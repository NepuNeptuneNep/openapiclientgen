//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V2Object
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V2Void
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3BulkDeparturesRequest
	{
		
		/// <summary>
		/// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_utc")]
		public System.Nullable<System.DateTimeOffset> Date_utc { get; set; }
		
		/// <summary>
		/// List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption, none
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expand")]
		public string[] Expand { get; set; }
		
		/// <summary>
		/// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_cancelled")]
		public System.Nullable<System.Boolean> Include_cancelled { get; set; }
		
		/// <summary>
		/// Indicates if the route geopath should be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_geopath")]
		public System.Nullable<System.Boolean> Include_geopath { get; set; }
		
		/// <summary>
		/// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="look_backwards")]
		public System.Nullable<System.Boolean> Look_backwards { get; set; }
		
		/// <summary>
		/// Collection of departure requests
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public V3StopDepartureRequest[] Requests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopDepartureRequest
	{
		
		/// <summary>
		/// Indicates that stop_id parameter will accept "GTFS stop_id" data and route_directions[x].route_id parameters will accept route_gtfs_id data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtfs")]
		public System.Nullable<System.Boolean> Gtfs { get; set; }
		
		/// <summary>
		/// Maximum number of results returned
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// The route directions to find departures for at this stop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_directions")]
		public V3StopDepartureRequestRouteDirection[] Route_directions { get; set; }
		
		/// <summary>
		/// Number identifying transport mode; values returned via RouteTypes API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<V3StopDepartureRequestRoute_type> Route_type { get; set; }
		
		/// <summary>
		/// Identifier of stop; values returned by Stops API
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Stop_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopDepartureRequestRouteDirection
	{
		
		/// <summary>
		/// Direction of travel identifier; values returned by Directions API - v3/directions
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Name of direction of travel; values returned by Directions API - v3/directions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction_name")]
		public string Direction_name { get; set; }
		
		/// <summary>
		/// Identifier of route; values returned by Routes API - v3/routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3StopDepartureRequestRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3BulkDeparturesResponse
	{
		
		/// <summary>
		/// Directions of travel of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public V3Direction[] Directions { get; set; }
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public System.Collections.Generic.Dictionary<string, V3Disruption> Disruptions { get; set; }
		
		/// <summary>
		/// Contains departures for the requested stop and route(s). It includes details as to the route_direction and whether it is still valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public V3BulkDeparturesUpdateResponse[] Responses { get; set; }
		
		/// <summary>
		/// Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V2Object[] Routes { get; set; }
		
		/// <summary>
		/// Individual trips/services of a route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public V3Run[] Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// A train station, tram stop, bus stop, regional coach stop or Night Bus stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public System.Collections.Generic.Dictionary<string, V3BulkDeparturesStopResponse> Stops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Direction
	{
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Name of direction of travel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_name")]
		public string Direction_name { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Disruption
	{
		
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// Description of the disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_on_board")]
		public System.Nullable<System.Boolean> Display_on_board { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_status")]
		public System.Nullable<System.Boolean> Display_status { get; set; }
		
		/// <summary>
		/// Disruption information identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_id")]
		public System.Nullable<System.Int64> Disruption_id { get; set; }
		
		/// <summary>
		/// Status of the disruption (e.g. "Planned", "Current")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_status")]
		public string Disruption_status { get; set; }
		
		/// <summary>
		/// Type of disruption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_type")]
		public string Disruption_type { get; set; }
		
		/// <summary>
		/// Date and time at which disruption begins, in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_date")]
		public System.Nullable<System.DateTimeOffset> From_date { get; set; }
		
		/// <summary>
		/// Date and time disruption information was last updated by PTV, in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_updated")]
		public System.Nullable<System.DateTimeOffset> Last_updated { get; set; }
		
		/// <summary>
		/// Date and time disruption information is published on PTV website, in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published_on")]
		public System.Nullable<System.DateTimeOffset> Published_on { get; set; }
		
		/// <summary>
		/// Route relevant to a disruption (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V3DisruptionRoute[] Routes { get; set; }
		
		/// <summary>
		/// Stop relevant to a disruption (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public V3DisruptionStop[] Stops { get; set; }
		
		/// <summary>
		/// Headline title summarising disruption information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to_date")]
		public System.Nullable<System.DateTimeOffset> To_date { get; set; }
		
		/// <summary>
		/// URL of relevant article on PTV website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public V3DisruptionDirection Direction { get; set; }
		
		/// <summary>
		/// GTFS Identifer of the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_gtfs_id")]
		public string Route_gtfs_id { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Name of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_name")]
		public string Route_name { get; set; }
		
		/// <summary>
		/// Route number presented to public (i.e. not route_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_number")]
		public string Route_number { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionDirection
	{
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Name of direction of travel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_name")]
		public string Direction_name { get; set; }
		
		/// <summary>
		/// Route and direction of travel combination identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_direction_id")]
		public System.Nullable<System.Int32> Route_direction_id { get; set; }
		
		/// <summary>
		/// Time of service to which disruption applies, in 24 hour clock format (HH:MM:SS) AEDT/AEST; returns null if disruption applies to multiple (or no) services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_time")]
		public string Service_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionStop
	{
		
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3BulkDeparturesUpdateResponse
	{
		
		/// <summary>
		/// Timetabled and real-time service departures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departures")]
		public V3Departure[] Departures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requested_route_direction")]
		public V3BulkDeparturesRouteDirectionResponse Requested_route_direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_direction")]
		public V3BulkDeparturesRouteDirectionResponse Route_direction { get; set; }
		
		/// <summary>
		/// The status of the route direction (changed | unchanged).
		///            If changed, requests should change the requested_route_direction for the route_direction supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_direction_status")]
		public System.Nullable<V3BulkDeparturesUpdateResponseRoute_direction_status> Route_direction_status { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Departure
	{
		
		/// <summary>
		/// Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="at_platform")]
		public System.Nullable<System.Boolean> At_platform { get; set; }
		
		/// <summary>
		/// Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departure_sequence")]
		public System.Nullable<System.Int32> Departure_sequence { get; set; }
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Disruption information identifier(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_ids")]
		public int[] Disruption_ids { get; set; }
		
		/// <summary>
		/// Real-time estimate of departure time and date in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimated_departure_utc")]
		public System.Nullable<System.DateTimeOffset> Estimated_departure_utc { get; set; }
		
		/// <summary>
		/// Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// Platform number at stop (metropolitan train only; returns null for other modes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform_number")]
		public string Platform_number { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_id")]
		public System.Nullable<System.Int32> Run_id { get; set; }
		
		/// <summary>
		/// Alphanumeric trip/service run identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_ref")]
		public string Run_ref { get; set; }
		
		/// <summary>
		/// Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduled_departure_utc")]
		public System.Nullable<System.DateTimeOffset> Scheduled_departure_utc { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3BulkDeparturesRouteDirectionResponse
	{
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Name of direction of travel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_name")]
		public string Direction_name { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3BulkDeparturesUpdateResponseRoute_direction_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Run
	{
		
		/// <summary>
		/// Name of destination of run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination_name")]
		public string Destination_name { get; set; }
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// The number of remaining skipped/express stations for the run/service from a stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="express_stop_count")]
		public System.Nullable<System.Int32> Express_stop_count { get; set; }
		
		/// <summary>
		/// stop_id of final stop of run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="final_stop_id")]
		public System.Nullable<System.Int32> Final_stop_id { get; set; }
		
		/// <summary>
		/// Geopath of the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geopath")]
		public V2Object[] Geopath { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_id")]
		public System.Nullable<System.Int32> Run_id { get; set; }
		
		/// <summary>
		/// Alphanumeric trip/service run identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_ref")]
		public string Run_ref { get; set; }
		
		/// <summary>
		/// Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_sequence")]
		public System.Nullable<System.Int32> Run_sequence { get; set; }
		
		/// <summary>
		/// Status of metropolitan train run; returns "scheduled" for other modes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vehicle_descriptor")]
		public V3VehicleDescriptor Vehicle_descriptor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vehicle_position")]
		public V3VehiclePosition Vehicle_position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3VehicleDescriptor
	{
		
		/// <summary>
		/// Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="air_conditioned")]
		public System.Nullable<System.Boolean> Air_conditioned { get; set; }
		
		/// <summary>
		/// Vehicle description such as "6 Car Comeng", "6 Car Xtrapolis", "3 Car Comeng", "6 Car Siemens", "3 Car Siemens". May be null/empty.
		///            Only available for some metropolitan train runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operator identifier of the vehicle such as "26094". May be null/empty. Only available for some tram and bus runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The length of the vehicle. Applies to CIS - Metro Trains
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// Indicator if vehicle has a low floor. May be null. Only available for some tram runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low_floor")]
		public System.Nullable<System.Boolean> Low_floor { get; set; }
		
		/// <summary>
		/// Operator name of the vehicle such as "Metro Trains Melbourne", "Yarra Trams", "Ventura Bus Line", "CDC" or "Sita Bus Lines" . May be null/empty.
		///            Only available for train, tram, v/line and some bus runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// Supplier of vehicle descriptor data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplier")]
		public string Supplier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3VehiclePosition
	{
		
		/// <summary>
		/// Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.
		///            Only available for some bus runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bearing")]
		public System.Nullable<System.Double> Bearing { get; set; }
		
		/// <summary>
		/// Date and time that the vehicle position data was supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datetime_utc")]
		public System.Nullable<System.DateTimeOffset> Datetime_utc { get; set; }
		
		/// <summary>
		/// CIS - Metro Train Vehicle Location Direction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// CIS - Metro Train Vehicle Location Easting coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="easting")]
		public System.Nullable<System.Double> Easting { get; set; }
		
		/// <summary>
		/// CIS - Metro Train Vehicle Location data expiry time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry_time")]
		public System.Nullable<System.DateTimeOffset> Expiry_time { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude of the vehicle when known. May be null.
		///            Only available for some bus runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude of the vehicle when known. 
		///            Only available for some bus runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// CIS - Metro Train Vehicle Location Northing coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="northing")]
		public System.Nullable<System.Double> Northing { get; set; }
		
		/// <summary>
		/// Supplier of vehicle position data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplier")]
		public string Supplier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Status
	{
		
		/// <summary>
		/// API system health status (0=offline, 1=online)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public System.Nullable<V3StatusHealth> Health { get; set; }
		
		/// <summary>
		/// API Version number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3StatusHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3BulkDeparturesStopResponse
	{
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DeparturesBroadParameters
	{
		
		/// <summary>
		/// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_utc")]
		public System.Nullable<System.DateTimeOffset> Date_utc { get; set; }
		
		/// <summary>
		/// Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
		///            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expand")]
		public string[] Expand { get; set; }
		
		/// <summary>
		/// Indicates that stop_id parameter will accept "GTFS stop_id" data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtfs")]
		public System.Nullable<System.Boolean> Gtfs { get; set; }
		
		/// <summary>
		/// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_cancelled")]
		public System.Nullable<System.Boolean> Include_cancelled { get; set; }
		
		/// <summary>
		/// Indicates if the route geopath should be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_geopath")]
		public System.Nullable<System.Boolean> Include_geopath { get; set; }
		
		/// <summary>
		/// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="look_backwards")]
		public System.Nullable<System.Boolean> Look_backwards { get; set; }
		
		/// <summary>
		/// Maximum number of results returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// Filter by platform number at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform_numbers")]
		public int[] Platform_numbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DeparturesResponse
	{
		
		/// <summary>
		/// Timetabled and real-time service departures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departures")]
		public V3Departure[] Departures { get; set; }
		
		/// <summary>
		/// Directions of travel of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public System.Collections.Generic.Dictionary<string, V3Direction> Directions { get; set; }
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public System.Collections.Generic.Dictionary<string, V3Disruption> Disruptions { get; set; }
		
		/// <summary>
		/// Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public System.Collections.Generic.Dictionary<string, V2Object> Routes { get; set; }
		
		/// <summary>
		/// Individual trips/services of a route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public System.Collections.Generic.Dictionary<string, V3Run> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// A train station, tram stop, bus stop, regional coach stop or Night Bus stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public System.Collections.Generic.Dictionary<string, V3StopModel> Stops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopModel
	{
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Distance of stop from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_distance")]
		public System.Nullable<System.Single> Stop_distance { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_sequence")]
		public System.Nullable<System.Int32> Stop_sequence { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DeparturesSpecificParameters
	{
		
		/// <summary>
		/// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_utc")]
		public System.Nullable<System.DateTimeOffset> Date_utc { get; set; }
		
		/// <summary>
		/// Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
		///            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expand")]
		public string[] Expand { get; set; }
		
		/// <summary>
		/// Indicates that stop_id parameter will accept "GTFS stop_id" data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtfs")]
		public System.Nullable<System.Boolean> Gtfs { get; set; }
		
		/// <summary>
		/// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_cancelled")]
		public System.Nullable<System.Boolean> Include_cancelled { get; set; }
		
		/// <summary>
		/// Indicates if the route geopath should be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_geopath")]
		public System.Nullable<System.Boolean> Include_geopath { get; set; }
		
		/// <summary>
		/// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="look_backwards")]
		public System.Nullable<System.Boolean> Look_backwards { get; set; }
		
		/// <summary>
		/// Maximum number of results returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DirectionWithDescription
	{
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Name of direction of travel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_name")]
		public string Direction_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_direction_description")]
		public string Route_direction_description { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DirectionsResponse
	{
		
		/// <summary>
		/// Directions of travel of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public V3DirectionWithDescription[] Directions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionMode
	{
		
		/// <summary>
		/// Disruption mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_mode")]
		public System.Nullable<System.Int32> Disruption_mode { get; set; }
		
		/// <summary>
		/// Name of disruption mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_mode_name")]
		public string Disruption_mode_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionModesResponse
	{
		
		/// <summary>
		/// Transport mode identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_modes")]
		public V3DisruptionMode[] Disruption_modes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="disruption")]
		public V3Disruption Disruption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Disruptions
	{
		
		/// <summary>
		/// Subset of disruption information applicable to ferry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ferry")]
		public V3Disruption[] Ferry { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to multiple route_types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="general")]
		public V3Disruption[] General { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to interstate train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interstate_train")]
		public V3Disruption[] Interstate_train { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to metropolitan bus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metro_bus")]
		public V3Disruption[] Metro_bus { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to metropolitan train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metro_train")]
		public V3Disruption[] Metro_train { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to metropolitan tram
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metro_tram")]
		public V3Disruption[] Metro_tram { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to night bus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="night_bus")]
		public V3Disruption[] Night_bus { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to regional bus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regional_bus")]
		public V3Disruption[] Regional_bus { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to V/Line coach
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regional_coach")]
		public V3Disruption[] Regional_coach { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to V/Line train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regional_train")]
		public V3Disruption[] Regional_train { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to school bus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="school_bus")]
		public V3Disruption[] School_bus { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to skybus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skybus")]
		public V3Disruption[] Skybus { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to taxi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxi")]
		public V3Disruption[] Taxi { get; set; }
		
		/// <summary>
		/// Subset of disruption information applicable to telebus services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telebus")]
		public V3Disruption[] Telebus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DisruptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public V3Disruptions Disruptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DynamoDbTimetable
	{
		
		/// <summary>
		/// Formated date string of applicable date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicable_local_date")]
		public string Applicable_local_date { get; set; }
		
		/// <summary>
		/// True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),
		///            or false if there are no records for this date and transport type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exists")]
		public System.Nullable<System.Boolean> Exists { get; set; }
		
		/// <summary>
		/// Diva Mapping Version used to load Parser into DynamoDB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parser_mapping_version")]
		public string Parser_mapping_version { get; set; }
		
		/// <summary>
		/// Parser verison
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parser_version")]
		public System.Nullable<System.Int64> Parser_version { get; set; }
		
		/// <summary>
		/// Diva Mapping Version used to load PT into DynamoDB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt_mapping_version")]
		public string Pt_mapping_version { get; set; }
		
		/// <summary>
		/// PT version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt_version")]
		public System.Nullable<System.Int64> Pt_version { get; set; }
		
		/// <summary>
		/// Name of corresponding table in DynamoDB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table_name")]
		public string Table_name { get; set; }
		
		/// <summary>
		/// A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transport_type")]
		public System.Nullable<V3DynamoDbTimetableTransport_type> Transport_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3DynamoDbTimetableTransport_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3DynamoDbTimetablesReponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timetables")]
		public V3DynamoDbTimetable[] Timetables { get; set; }
	}
	
	/// <summary>
	/// An error response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3ErrorResponse
	{
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3FareEstimateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3GenerateDivaMappingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="mapping_version")]
		public string Mapping_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3Outlet
	{
		
		/// <summary>
		/// The business name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business")]
		public string Outlet_business { get; set; }
		
		/// <summary>
		/// The business hours on Friday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_fri")]
		public string Outlet_business_hour_fri { get; set; }
		
		/// <summary>
		/// The business hours on Monday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_mon")]
		public string Outlet_business_hour_mon { get; set; }
		
		/// <summary>
		/// The business hours on Saturday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sat")]
		public string Outlet_business_hour_sat { get; set; }
		
		/// <summary>
		/// The business hours on Sunday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sun")]
		public string Outlet_business_hour_sun { get; set; }
		
		/// <summary>
		/// The business hours on Thursday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_thur")]
		public string Outlet_business_hour_thur { get; set; }
		
		/// <summary>
		/// The business hours on Tuesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_tue")]
		public string Outlet_business_hour_tue { get; set; }
		
		/// <summary>
		/// The business hours on Wednesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_wed")]
		public string Outlet_business_hour_wed { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_latitude")]
		public System.Nullable<System.Single> Outlet_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_longitude")]
		public System.Nullable<System.Single> Outlet_longitude { get; set; }
		
		/// <summary>
		/// The location name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_name")]
		public string Outlet_name { get; set; }
		
		/// <summary>
		/// Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_notes")]
		public string Outlet_notes { get; set; }
		
		/// <summary>
		/// The postcode for the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_postcode")]
		public System.Nullable<System.Int32> Outlet_postcode { get; set; }
		
		/// <summary>
		/// The SLID / SPID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_slid_spid")]
		public string Outlet_slid_spid { get; set; }
		
		/// <summary>
		/// The city/municipality the outlet is in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_suburb")]
		public string Outlet_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3OutletGeolocation
	{
		
		/// <summary>
		/// The business name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business")]
		public string Outlet_business { get; set; }
		
		/// <summary>
		/// The business hours on Friday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_fri")]
		public string Outlet_business_hour_fri { get; set; }
		
		/// <summary>
		/// The business hours on Monday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_mon")]
		public string Outlet_business_hour_mon { get; set; }
		
		/// <summary>
		/// The business hours on Saturday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sat")]
		public string Outlet_business_hour_sat { get; set; }
		
		/// <summary>
		/// The business hours on Sunday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sun")]
		public string Outlet_business_hour_sun { get; set; }
		
		/// <summary>
		/// The business hours on Thursday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_thur")]
		public string Outlet_business_hour_thur { get; set; }
		
		/// <summary>
		/// The business hours on Tuesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_tue")]
		public string Outlet_business_hour_tue { get; set; }
		
		/// <summary>
		/// The business hours on Wednesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_wed")]
		public string Outlet_business_hour_wed { get; set; }
		
		/// <summary>
		/// Distance of outlet from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_distance")]
		public System.Nullable<System.Single> Outlet_distance { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_latitude")]
		public System.Nullable<System.Single> Outlet_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_longitude")]
		public System.Nullable<System.Single> Outlet_longitude { get; set; }
		
		/// <summary>
		/// The location name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_name")]
		public string Outlet_name { get; set; }
		
		/// <summary>
		/// Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_notes")]
		public string Outlet_notes { get; set; }
		
		/// <summary>
		/// The postcode for the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_postcode")]
		public System.Nullable<System.Int32> Outlet_postcode { get; set; }
		
		/// <summary>
		/// The SLID / SPID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_slid_spid")]
		public string Outlet_slid_spid { get; set; }
		
		/// <summary>
		/// The city/municipality the outlet is in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_suburb")]
		public string Outlet_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3OutletGeolocationParameters
	{
		
		/// <summary>
		/// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_distance")]
		public System.Nullable<System.Double> Max_distance { get; set; }
		
		/// <summary>
		/// Maximum number of results returned (default = 30)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3OutletGeolocationResponse
	{
		
		/// <summary>
		/// myki ticket outlets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlets")]
		public V3OutletGeolocation[] Outlets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3OutletParameters
	{
		
		/// <summary>
		/// Maximum number of results returned (default = 30)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3OutletResponse
	{
		
		/// <summary>
		/// myki ticket outlets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlets")]
		public V3Outlet[] Outlets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3PatternDeparture
	{
		
		/// <summary>
		/// Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="at_platform")]
		public System.Nullable<System.Boolean> At_platform { get; set; }
		
		/// <summary>
		/// Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departure_sequence")]
		public System.Nullable<System.Int32> Departure_sequence { get; set; }
		
		/// <summary>
		/// Direction of travel identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		/// <summary>
		/// Disruption information identifier(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_ids")]
		public int[] Disruption_ids { get; set; }
		
		/// <summary>
		/// Real-time estimate of departure time and date in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimated_departure_utc")]
		public System.Nullable<System.DateTimeOffset> Estimated_departure_utc { get; set; }
		
		/// <summary>
		/// Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// Platform number at stop (metropolitan train only; returns null for other modes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform_number")]
		public string Platform_number { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_id")]
		public System.Nullable<System.Int32> Run_id { get; set; }
		
		/// <summary>
		/// Alphanumeric trip/service run identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run_ref")]
		public string Run_ref { get; set; }
		
		/// <summary>
		/// Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduled_departure_utc")]
		public System.Nullable<System.DateTimeOffset> Scheduled_departure_utc { get; set; }
		
		/// <summary>
		/// The stops to be skipped following the current departure in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipped_stops")]
		public V3StopModel[] Skipped_stops { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3ResultOutlet
	{
		
		/// <summary>
		/// The business name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business")]
		public string Outlet_business { get; set; }
		
		/// <summary>
		/// The business hours on Friday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_fri")]
		public string Outlet_business_hour_fri { get; set; }
		
		/// <summary>
		/// The business hours on Monday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_mon")]
		public string Outlet_business_hour_mon { get; set; }
		
		/// <summary>
		/// The business hours on Saturday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sat")]
		public string Outlet_business_hour_sat { get; set; }
		
		/// <summary>
		/// The business hours on Sunday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_sun")]
		public string Outlet_business_hour_sun { get; set; }
		
		/// <summary>
		/// The business hours on Thursday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_thur")]
		public string Outlet_business_hour_thur { get; set; }
		
		/// <summary>
		/// The business hours on Tuesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_tue")]
		public string Outlet_business_hour_tue { get; set; }
		
		/// <summary>
		/// The business hours on Wednesday
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_business_hour_wed")]
		public string Outlet_business_hour_wed { get; set; }
		
		/// <summary>
		/// Distance of outlet from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_distance")]
		public System.Nullable<System.Single> Outlet_distance { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_latitude")]
		public System.Nullable<System.Single> Outlet_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_longitude")]
		public System.Nullable<System.Single> Outlet_longitude { get; set; }
		
		/// <summary>
		/// The location name of the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_name")]
		public string Outlet_name { get; set; }
		
		/// <summary>
		/// Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_notes")]
		public string Outlet_notes { get; set; }
		
		/// <summary>
		/// The postcode for the outlet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_postcode")]
		public System.Nullable<System.Int32> Outlet_postcode { get; set; }
		
		/// <summary>
		/// The SLID / SPID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_slid_spid")]
		public string Outlet_slid_spid { get; set; }
		
		/// <summary>
		/// The city/municipality the outlet is in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlet_suburb")]
		public string Outlet_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3ResultRoute
	{
		
		/// <summary>
		/// GTFS Identifer of the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_gtfs_id")]
		public string Route_gtfs_id { get; set; }
		
		/// <summary>
		/// Route identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Name of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_name")]
		public string Route_name { get; set; }
		
		/// <summary>
		/// Route number presented to public (nb. not route_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_number")]
		public string Route_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_service_status")]
		public V3RouteServiceStatus Route_service_status { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RouteServiceStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3ResultStop
	{
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// List of routes travelling through the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V3ResultRoute[] Routes { get; set; }
		
		/// <summary>
		/// Distance of stop from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_distance")]
		public System.Nullable<System.Single> Stop_distance { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_sequence")]
		public System.Nullable<System.Int32> Stop_sequence { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RouteDeparturesSpecificParameters
	{
		
		/// <summary>
		/// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_utc")]
		public System.Nullable<System.DateTimeOffset> Date_utc { get; set; }
		
		/// <summary>
		/// List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
		///            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expand")]
		public string[] Expand { get; set; }
		
		/// <summary>
		/// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_cancelled")]
		public System.Nullable<System.Boolean> Include_cancelled { get; set; }
		
		/// <summary>
		/// Indicates if the route geopath should be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_geopath")]
		public System.Nullable<System.Boolean> Include_geopath { get; set; }
		
		/// <summary>
		/// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="look_backwards")]
		public System.Nullable<System.Boolean> Look_backwards { get; set; }
		
		/// <summary>
		/// Maximum number of results returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_results")]
		public System.Nullable<System.Int32> Max_results { get; set; }
		
		/// <summary>
		/// When set to true, all timetable information returned by Chronos will be sourced from the scheduled timetables,
		///            while when set to false (default state), the operational timetables will be used where available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduled_timetables")]
		public System.Nullable<System.Boolean> Scheduled_timetables { get; set; }
		
		/// <summary>
		/// DEPRECATED - use `scheduled_timetables` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="train_scheduled_timetables")]
		public System.Nullable<System.Boolean> Train_scheduled_timetables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RouteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public V2Object Route { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RouteType
	{
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Name of transport mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type_name")]
		public string Route_type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RouteTypesResponse
	{
		
		/// <summary>
		/// Transport mode identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_types")]
		public V3RouteType[] Route_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public V3Run Run { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3RunsResponse
	{
		
		/// <summary>
		/// Individual trips/services of a route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public V3Run[] Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SearchParameters
	{
		
		/// <summary>
		/// Placeholder for future development; currently unavailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_addresses")]
		public System.Nullable<System.Boolean> Include_addresses { get; set; }
		
		/// <summary>
		/// Indicates if outlets will be returned in response (default = true)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_outlets")]
		public System.Nullable<System.Boolean> Include_outlets { get; set; }
		
		/// <summary>
		/// Filter by geographic coordinate of latitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		/// <summary>
		/// Filter by geographic coordinate of longitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		/// <summary>
		/// Indicates whether to find routes by suburbs in the search term (default = true)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_route_by_suburb")]
		public System.Nullable<System.Boolean> Match_route_by_suburb { get; set; }
		
		/// <summary>
		/// Indicates whether to search for stops according to a metlink stop ID (default = false)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_stop_by_gtfs_stop_id")]
		public System.Nullable<System.Boolean> Match_stop_by_gtfs_stop_id { get; set; }
		
		/// <summary>
		/// Indicates whether to find stops by suburbs in the search term (default = true)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_stop_by_suburb")]
		public System.Nullable<System.Boolean> Match_stop_by_suburb { get; set; }
		
		/// <summary>
		/// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_distance")]
		public System.Nullable<System.Single> Max_distance { get; set; }
		
		/// <summary>
		/// Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_types")]
		public V3StopDepartureRequestRoute_type[] Route_types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SearchResult
	{
		
		/// <summary>
		/// myki ticket outlets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlets")]
		public V3ResultOutlet[] Outlets { get; set; }
		
		/// <summary>
		/// Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V3ResultRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public V3ResultStop[] Stops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriDirectionRefsDictionary
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction_refs")]
		public System.Collections.Generic.Dictionary<string, V3SiriStopsRefsDictionary> Direction_refs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriStopsRefsDictionary
	{
		
		[System.Runtime.Serialization.DataMember(Name="stop_point_refs")]
		public System.Collections.Generic.Dictionary<string, V3SiriReferenceDataDetail> Stop_point_refs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmatched_stop_point_refs")]
		public System.Collections.Generic.Dictionary<string, string> Unmatched_stop_point_refs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriReferenceDataDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction_id")]
		public System.Nullable<System.Int32> Direction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public System.Nullable<System.Int32> Route_id { get; set; }
		
		/// <summary>
		/// Route number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_number_short")]
		public string Route_number_short { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Authority (Upstream SIRI provider) of a route and direction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_supplier_id")]
		public System.Nullable<System.Int32> Tracking_supplier_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriDownstreamSubscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="consumer_address")]
		public string Consumer_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initial_termination_time")]
		public System.Nullable<System.DateTimeOffset> Initial_termination_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<V3SiriDownstreamSubscriptionMessage_type> Message_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview_interval")]
		public string Preview_interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="siri_format")]
		public System.Nullable<V3SiriDownstreamSubscriptionSiri_format> Siri_format { get; set; }
		
		/// <summary>
		/// Pattern: 1.3|2.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siri_version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"1.3|2.0")]
		public string Siri_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriber_ref")]
		public string Subscriber_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_ref")]
		public string Subscription_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public V3SiriDownstreamSubscriptionTopic[] Topics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity_period_end")]
		public System.Nullable<System.DateTimeOffset> Validity_period_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity_period_start")]
		public System.Nullable<System.DateTimeOffset> Validity_period_start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriDownstreamSubscriptionMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriDownstreamSubscriptionSiri_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriDownstreamSubscriptionTopic
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction_ref")]
		public System.Nullable<V3SiriDownstreamSubscriptionTopicDirection_ref> Direction_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_ref")]
		public string Line_ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<V3SiriDownstreamSubscriptionTopicRoute_type> Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriDownstreamSubscriptionTopicDirection_ref
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_65 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_130 = 130,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriDownstreamSubscriptionTopicRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriDownstreamSubscriptionDeleteRequest
	{
		
		/// <summary>
		/// Siri Subscriber Ref
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriber_ref")]
		public string Subscriber_ref { get; set; }
		
		/// <summary>
		/// Siri Subscription Reference(s) - Unique to a Subscriber Ref.
		///            If `null`, then all subscriptions will be terminated for the referenced Subscriber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_ref")]
		public string[] Subscription_ref { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriDownstreamSubscriptionResponse
	{
		
		/// <summary>
		/// The Data Horizon of Chronos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_until")]
		public System.Nullable<System.DateTimeOffset> Valid_until { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriEstimatedTimetableSubscriptionRequest
	{
		
		/// <summary>
		/// Siri Consumer Address - Baseline and Updates will be sent to this address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumer_address")]
		public string Consumer_address { get; set; }
		
		/// <summary>
		/// Siri Initial Termination Time - Expiry of the subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initial_termination_time")]
		public System.DateTimeOffset Initial_termination_time { get; set; }
		
		/// <summary>
		/// Siri Preview Interval
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preview_interval")]
		public string Preview_interval { get; set; }
		
		/// <summary>
		/// Siri Message Format 'xml' or 'json'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siri_format")]
		public V3SiriEstimatedTimetableSubscriptionRequestSiri_format Siri_format { get; set; }
		
		/// <summary>
		/// Siri Message Version '1.3' or '2.0'
		/// Required
		/// Pattern: 1.3|2.0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siri_version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"1.3|2.0")]
		public string Siri_version { get; set; }
		
		/// <summary>
		/// Siri Subscriber Ref
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriber_ref")]
		public string Subscriber_ref { get; set; }
		
		/// <summary>
		/// Siri Subscription Ref - Unique to a Subscriber Ref
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscription_ref")]
		public string Subscription_ref { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public V3SiriSubscriptionTopic[] Topics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriEstimatedTimetableSubscriptionRequestSiri_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriSubscriptionTopic
	{
		
		/// <summary>
		/// Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_ref")]
		public System.Nullable<V3SiriSubscriptionTopicDirection_ref> Direction_ref { get; set; }
		
		/// <summary>
		/// Siri LineRef
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line_ref")]
		public string Line_ref { get; set; }
		
		/// <summary>
		/// Route Type eg. 0 (Train) 1 (Tram) 2 (Bus) 3 (Vline) 4 (NightRider)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public V3SiriSubscriptionTopicRoute_type Route_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriSubscriptionTopicDirection_ref
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_65 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_130 = 130,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriSubscriptionTopicRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriLineRef
	{
		
		/// <summary>
		/// Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction_ref")]
		public System.Nullable<V3SiriLineRefDirection_ref> Direction_ref { get; set; }
		
		/// <summary>
		/// Siri LineRef
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line_ref")]
		public string Line_ref { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriLineRefDirection_ref
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_65 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_130 = 130,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriLineRefDirectionRefStopPointRef
	{
		
		/// <summary>
		/// Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction_ref")]
		public V3SiriLineRefDirectionRefStopPointRefDirection_ref Direction_ref { get; set; }
		
		/// <summary>
		/// Siri LineRef
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line_ref")]
		public string Line_ref { get; set; }
		
		/// <summary>
		/// Siri StopPointRef
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stop_point_ref")]
		public int Stop_point_ref { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriLineRefDirectionRefStopPointRefDirection_ref
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_65 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_130 = 130,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriLineRefDirectionRefsDictionary
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction_refs")]
		public System.Collections.Generic.Dictionary<string, V3SiriReferenceDataDetail[]> Direction_refs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmatched_direction_refs")]
		public System.Collections.Generic.Dictionary<string, string> Unmatched_direction_refs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriLineRefMappingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="line_refs")]
		public System.Collections.Generic.Dictionary<string, V3SiriLineRefDirectionRefsDictionary> Line_refs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapping_version")]
		public string Mapping_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriLineRefsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="line_refs")]
		public V3SiriLineRef[] Line_refs { get; set; }
		
		/// <summary>
		/// DIVA mapping version generated by Chronos during a Parser or RealtimeBusConfig load
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mapping_version")]
		public string Mapping_version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriProductionTimetableSubscriptionRequest
	{
		
		/// <summary>
		/// Siri Consumer Address - Baseline and Updates will be sent to this address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumer_address")]
		public string Consumer_address { get; set; }
		
		/// <summary>
		/// Siri End Time of the Validity Period
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.DateTimeOffset End_time { get; set; }
		
		/// <summary>
		/// Siri Initial Termination Time - Expiry of the subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initial_termination_time")]
		public System.DateTimeOffset Initial_termination_time { get; set; }
		
		/// <summary>
		/// Siri Message Format 'xml' or 'json'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siri_format")]
		public V3SiriProductionTimetableSubscriptionRequestSiri_format Siri_format { get; set; }
		
		/// <summary>
		/// Siri Message Version '1.3' or '2.0'
		/// Required
		/// Pattern: 1.3|2.0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siri_version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"1.3|2.0")]
		public string Siri_version { get; set; }
		
		/// <summary>
		/// Siri Start Time of the Validity Period
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.DateTimeOffset Start_time { get; set; }
		
		/// <summary>
		/// Siri Subscriber Ref
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriber_ref")]
		public string Subscriber_ref { get; set; }
		
		/// <summary>
		/// Siri Subscription Ref - Unique to a Subscriber Ref
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscription_ref")]
		public string Subscription_ref { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public V3SiriSubscriptionTopic[] Topics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V3SiriProductionTimetableSubscriptionRequestSiri_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriReferenceDataMappingsResponse
	{
		
		/// <summary>
		/// SIRI LineRef
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_refs")]
		public System.Collections.Generic.Dictionary<string, V3SiriDirectionRefsDictionary> Line_refs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapping_version")]
		public string Mapping_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_point_refs")]
		public System.Collections.Generic.Dictionary<string, V3StopPoint> Stop_point_refs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3SiriReferenceDataRequest
	{
		
		/// <summary>
		/// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_utc")]
		public System.Nullable<System.DateTimeOffset> Date_utc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line_refs")]
		public V3SiriLineRefDirectionRefStopPointRef[] Line_refs { get; set; }
		
		/// <summary>
		/// DIVA mapping version generated by Chronos during a Parser or RealtimeBusConfig load
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mapping_version")]
		public string Mapping_version { get; set; }
		
		/// <summary>
		/// Siri StopPointRef
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_point_refs")]
		public int[] Stop_point_refs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopAccessibility
	{
		
		/// <summary>
		/// Indicates if there is at least one audio customer information at the stop/platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audio_customer_information")]
		public System.Nullable<System.Boolean> Audio_customer_information { get; set; }
		
		/// <summary>
		/// Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="escalator")]
		public System.Nullable<System.Boolean> Escalator { get; set; }
		
		/// <summary>
		/// Indicates if there is a hearing loop facility at the stop/platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearing_loop")]
		public System.Nullable<System.Boolean> Hearing_loop { get; set; }
		
		/// <summary>
		/// Indicates if there is an elevator at the stop/platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lift")]
		public System.Nullable<System.Boolean> Lift { get; set; }
		
		/// <summary>
		/// Indicates if there is lighting at the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lighting")]
		public System.Nullable<System.Boolean> Lighting { get; set; }
		
		/// <summary>
		/// Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform_number")]
		public System.Nullable<System.Int32> Platform_number { get; set; }
		
		/// <summary>
		/// Indicates if there are stairs available in the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stairs")]
		public System.Nullable<System.Boolean> Stairs { get; set; }
		
		/// <summary>
		/// Indicates if the stop is accessible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_accessible")]
		public System.Nullable<System.Boolean> Stop_accessible { get; set; }
		
		/// <summary>
		/// Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tactile_ground_surface_indicator")]
		public System.Nullable<System.Boolean> Tactile_ground_surface_indicator { get; set; }
		
		/// <summary>
		/// Indicates if there is a general waiting area at the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waiting_room")]
		public System.Nullable<System.Boolean> Waiting_room { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wheelchair")]
		public V3StopAccessibilityWheelchair Wheelchair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopAccessibilityWheelchair
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessible_ramp")]
		public System.Nullable<System.Boolean> Accessible_ramp { get; set; }
		
		/// <summary>
		/// Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low_ticket_counter")]
		public System.Nullable<System.Boolean> Low_ticket_counter { get; set; }
		
		/// <summary>
		/// Indicates if there is a space for mobility device to board on or off a transport mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manouvering")]
		public System.Nullable<System.Boolean> Manouvering { get; set; }
		
		/// <summary>
		/// Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parking")]
		public System.Nullable<System.Boolean> Parking { get; set; }
		
		/// <summary>
		/// Indicates if there is a raised platform to board a train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raised_platform")]
		public System.Nullable<System.Boolean> Raised_platform { get; set; }
		
		/// <summary>
		/// Indicates if there is shelter near the raised platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raised_platform_shelther")]
		public System.Nullable<System.Boolean> Raised_platform_shelther { get; set; }
		
		/// <summary>
		/// Indicates if there are ramps (&lt;1:14) at the stop/platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ramp")]
		public System.Nullable<System.Boolean> Ramp { get; set; }
		
		/// <summary>
		/// Indicates if there is a path beyond the stop which is accessible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondary_path")]
		public System.Nullable<System.Boolean> Secondary_path { get; set; }
		
		/// <summary>
		/// Indicates if there are ramps (&gt;1:14) at the stop/platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steep_ramp")]
		public System.Nullable<System.Boolean> Steep_ramp { get; set; }
		
		/// <summary>
		/// Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telephone")]
		public System.Nullable<System.Boolean> Telephone { get; set; }
		
		/// <summary>
		/// Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toilet")]
		public System.Nullable<System.Boolean> Toilet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopAmenityDetails
	{
		
		/// <summary>
		/// The number of free car parking spots at the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="car_parking")]
		public string Car_parking { get; set; }
		
		/// <summary>
		/// Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cctv")]
		public System.Nullable<System.Boolean> Cctv { get; set; }
		
		/// <summary>
		/// Indicates if there is a taxi rank at or near the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxi_rank")]
		public System.Nullable<System.Boolean> Taxi_rank { get; set; }
		
		/// <summary>
		/// Indicates if there is a public toilet at or near the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toilet")]
		public System.Nullable<System.Boolean> Toilet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopBasic
	{
		
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopDetails
	{
		
		/// <summary>
		/// Disruption information identifier(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_ids")]
		public int[] Disruption_ids { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Routes travelling through the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V2Object[] Routes { get; set; }
		
		/// <summary>
		/// The definition applicable to the station_type; returns null for V/Line train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="station_description")]
		public string Station_description { get; set; }
		
		/// <summary>
		/// Type of metropolitan train station (i.e. "Premium", "Host" or "Unstaffed" station); returns null for V/Line train
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="station_type")]
		public string Station_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_accessibility")]
		public V3StopAccessibility Stop_accessibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_amenities")]
		public V3StopAmenityDetails Stop_amenities { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_location")]
		public V3StopLocation Stop_location { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_staffing")]
		public V3StopStaffing Stop_staffing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="gps")]
		public V3StopGps Gps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopGps
	{
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopStaffing
	{
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fri_am_from")]
		public string Fri_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fri_am_to")]
		public string Fri_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fri_pm_from")]
		public string Fri_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fri_pm_to")]
		public string Fri_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mon_am_from")]
		public string Mon_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mon_am_to")]
		public string Mon_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mon_pm_from")]
		public string Mon_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mon_pm_to")]
		public string Mon_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ph_additional_text")]
		public string Ph_additional_text { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ph_from")]
		public string Ph_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ph_to")]
		public string Ph_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sat_am_from")]
		public string Sat_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sat_am_to")]
		public string Sat_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sat_pm_from")]
		public string Sat_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sat_pm_to")]
		public string Sat_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sun_am_from")]
		public string Sun_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sun_am_to")]
		public string Sun_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sun_pm_from")]
		public string Sun_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sun_pm_to")]
		public string Sun_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thu_am_from")]
		public string Thu_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thu_am_to")]
		public string Thu_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thu_pm_from")]
		public string Thu_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thu_pm_to")]
		public string Thu_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tue_am_from")]
		public string Tue_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tue_am_to")]
		public string Tue_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tue_pm_from")]
		public string Tue_pm_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tue_pm_to")]
		public string Tue_pm_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wed_am_from")]
		public string Wed_am_from { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wed_am_to")]
		public string Wed_am_to { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wed_pm_To")]
		public string Wed_pm_To { get; set; }
		
		/// <summary>
		/// Stop staffing hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wed_pm_from")]
		public string Wed_pm_from { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopGeosearch
	{
		
		/// <summary>
		/// Disruption information identifier(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_ids")]
		public int[] Disruption_ids { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// List of routes travelling through the stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public V2Object[] Routes { get; set; }
		
		/// <summary>
		/// Distance of stop from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_distance")]
		public System.Nullable<System.Single> Stop_distance { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_sequence")]
		public System.Nullable<System.Int32> Stop_sequence { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopOnRoute
	{
		
		/// <summary>
		/// Disruption information identifier(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruption_ids")]
		public int[] Disruption_ids { get; set; }
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_sequence")]
		public System.Nullable<System.Int32> Stop_sequence { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_ticket")]
		public V3StopTicket Stop_ticket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopTicket
	{
		
		/// <summary>
		/// Indicates whether the stop is inside the free fare zone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_free_fare_zone")]
		public System.Nullable<System.Boolean> Is_free_fare_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticket_checks")]
		public System.Nullable<System.Boolean> Ticket_checks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticket_machine")]
		public System.Nullable<System.Boolean> Ticket_machine { get; set; }
		
		/// <summary>
		/// Indicates the ticket type for the stop (myki, paper or both)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticket_type")]
		public string Ticket_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticket_zones")]
		public int[] Ticket_zones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vline_reservation")]
		public System.Nullable<System.Boolean> Vline_reservation { get; set; }
		
		/// <summary>
		/// Description of the zone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopResponse
	{
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public System.Collections.Generic.Dictionary<string, V3Disruption> Disruptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public V3StopDetails Stop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StoppingPattern
	{
		
		/// <summary>
		/// Timetabled and real-time service departures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departures")]
		public V3PatternDeparture[] Departures { get; set; }
		
		/// <summary>
		/// Directions of travel of route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public System.Collections.Generic.Dictionary<string, V3Direction> Directions { get; set; }
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public V3Disruption[] Disruptions { get; set; }
		
		/// <summary>
		/// Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public System.Collections.Generic.Dictionary<string, V2Object> Routes { get; set; }
		
		/// <summary>
		/// Individual trips/services of a route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public System.Collections.Generic.Dictionary<string, V3Run> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// A train station, tram stop, bus stop, regional coach stop or Night Bus stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public System.Collections.Generic.Dictionary<string, V3StoppingPatternStop> Stops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StoppingPatternStop
	{
		
		/// <summary>
		/// Transport mode identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<System.Int32> Route_type { get; set; }
		
		/// <summary>
		/// Distance of stop from input location (in metres); returns 0 if no location is input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_distance")]
		public System.Nullable<System.Single> Stop_distance { get; set; }
		
		/// <summary>
		/// Stop identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_id")]
		public System.Nullable<System.Int32> Stop_id { get; set; }
		
		/// <summary>
		/// Landmark in proximity of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_landmark")]
		public string Stop_landmark { get; set; }
		
		/// <summary>
		/// Geographic coordinate of latitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_latitude")]
		public System.Nullable<System.Single> Stop_latitude { get; set; }
		
		/// <summary>
		/// Geographic coordinate of longitude at stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_longitude")]
		public System.Nullable<System.Single> Stop_longitude { get; set; }
		
		/// <summary>
		/// Name of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_name")]
		public string Stop_name { get; set; }
		
		/// <summary>
		/// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_sequence")]
		public System.Nullable<System.Int32> Stop_sequence { get; set; }
		
		/// <summary>
		/// suburb of stop
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_suburb")]
		public string Stop_suburb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop_ticket")]
		public V3StopTicket Stop_ticket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopsByDistanceResponse
	{
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public System.Collections.Generic.Dictionary<string, V3Disruption> Disruptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public V3StopGeosearch[] Stops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V3StopsOnRouteResponse
	{
		
		/// <summary>
		/// Disruption information applicable to relevant routes or stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptions")]
		public System.Collections.Generic.Dictionary<string, V3Disruption> Disruptions { get; set; }
		
		/// <summary>
		/// GeoPath for the route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geopath")]
		public V2Object[] Geopath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public V3Status Status { get; set; }
		
		/// <summary>
		/// Train stations, tram stops, bus stops, regional coach stops or Night Bus stops
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public V3StopOnRoute[] Stops { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// View departures for all routes from a stop
		/// Departures_GetForStop v3/departures/route_type/{route_type}/stop/{stop_id}
		/// </summary>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="stop_id">Identifier of stop; values returned by Stops API</param>
		/// <param name="platform_numbers">Filter by platform number at stop</param>
		/// <param name="direction_id">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}</param>
		/// <param name="gtfs">Indicates that stop_id parameter will accept "GTFS stop_id" data</param>
		/// <param name="date_utc">Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)</param>
		/// <param name="max_results">Maximum number of results returned</param>
		/// <param name="include_cancelled">Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only</param>
		/// <param name="look_backwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
		///            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.</param>
		/// <param name="include_geopath">Indicates if the route geopath should be returned</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Service departures from the specified stop for all routes of the specified route type; departures are timetabled and real-time (if applicable).</returns>
		public async Task<V3DeparturesResponse> Departures_GetForStopAsync(Departures_GetForStopRoute_type route_type, int stop_id, int[] platform_numbers, int direction_id, bool gtfs, System.DateTimeOffset date_utc, int max_results, bool include_cancelled, bool look_backwards, string[] expand, bool include_geopath, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/departures/route_type/"+route_type+"/stop/"+stop_id+"?"+string.Join("&", platform_numbers.Select(z => $"platform_numbers={z}"))+"&direction_id="+direction_id+"&gtfs="+gtfs+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&max_results="+max_results+"&include_cancelled="+include_cancelled+"&look_backwards="+look_backwards+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&include_geopath="+include_geopath+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DeparturesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View departures for a specific route from a stop
		/// Departures_GetForStopAndRoute v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}
		/// </summary>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="stop_id">Identifier of stop; values returned by Stops API</param>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes</param>
		/// <param name="direction_id">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}</param>
		/// <param name="gtfs">Indicates that stop_id parameter will accept "GTFS stop_id" data</param>
		/// <param name="date_utc">Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)</param>
		/// <param name="max_results">Maximum number of results returned</param>
		/// <param name="include_cancelled">Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only</param>
		/// <param name="look_backwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
		///            Run must be expanded to receive VehiclePosition and VehicleDescriptor information.</param>
		/// <param name="include_geopath">Indicates if the route geopath should be returned</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).</returns>
		public async Task<V3DeparturesResponse> Departures_GetForStopAndRouteAsync(Departures_GetForStopAndRouteRoute_type route_type, int stop_id, string route_id, int direction_id, bool gtfs, System.DateTimeOffset date_utc, int max_results, bool include_cancelled, bool look_backwards, string[] expand, bool include_geopath, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/departures/route_type/"+route_type+"/stop/"+stop_id+"/route/"+ (route_id==null? "" : System.Uri.EscapeDataString(route_id))+"&direction_id="+direction_id+"&gtfs="+gtfs+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&max_results="+max_results+"&include_cancelled="+include_cancelled+"&look_backwards="+look_backwards+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&include_geopath="+include_geopath+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DeparturesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View directions that a route travels in
		/// Directions_ForRoute v3/directions/route/{route_id}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>The directions that a specified route travels in.</returns>
		public async Task<V3DirectionsResponse> Directions_ForRouteAsync(int route_id, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/directions/route/"+route_id+"?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DirectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all routes for a direction of travel
		/// Directions_ForDirection v3/directions/{direction_id}
		/// </summary>
		/// <param name="direction_id">Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All routes that travel in the specified direction.</returns>
		public async Task<V3DirectionsResponse> Directions_ForDirectionAsync(int direction_id, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/directions/"+direction_id+"?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DirectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all routes of a particular type for a direction of travel
		/// Directions_ForDirectionAndType v3/directions/{direction_id}/route_type/{route_type}
		/// </summary>
		/// <param name="direction_id">Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All routes of the specified route type that travel in the specified direction.</returns>
		public async Task<V3DirectionsResponse> Directions_ForDirectionAndTypeAsync(int direction_id, Directions_ForDirectionAndTypeRoute_type route_type, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/directions/"+direction_id+"/route_type/"+route_type+"?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DirectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all disruptions for all route types
		/// Disruptions_GetAllDisruptions v3/disruptions
		/// </summary>
		/// <param name="route_types">Filter by route_type; values returned via RouteTypes API</param>
		/// <param name="disruption_modes">Filter by disruption_mode; values returned via v3/disruptions/modes API</param>
		/// <param name="disruption_status">Filter by status of disruption</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All disruption information for all route types.</returns>
		public async Task<V3DisruptionsResponse> Disruptions_GetAllDisruptionsAsync(V3StopDepartureRequestRoute_type[] route_types, int[] disruption_modes, Disruptions_GetAllDisruptionsDisruption_status disruption_status, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions?"+string.Join("&", route_types.Select(z => $"route_types={z}"))+"&"+string.Join("&", disruption_modes.Select(z => $"disruption_modes={z}"))+"&disruption_status=" + disruption_status+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all disruption modes
		/// Disruptions_GetDisruptionModes v3/disruptions/modes
		/// </summary>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Disruption specific modes</returns>
		public async Task<V3DisruptionModesResponse> Disruptions_GetDisruptionModesAsync(string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions/modes?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionModesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all disruptions for a particular route
		/// Disruptions_GetDisruptionsByRoute v3/disruptions/route/{route_id}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes</param>
		/// <param name="disruption_status">Filter by status of disruption</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All disruption information (if any exists) for the specified route.</returns>
		public async Task<V3DisruptionsResponse> Disruptions_GetDisruptionsByRouteAsync(int route_id, Disruptions_GetAllDisruptionsDisruption_status disruption_status, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions/route/"+route_id+"?disruption_status=" + disruption_status+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all disruptions for a particular route and stop
		/// Disruptions_GetDisruptionsByRouteAndStop v3/disruptions/route/{route_id}/stop/{stop_id}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes</param>
		/// <param name="stop_id">Identifier of stop; values returned by Stops API - v3/stops</param>
		/// <param name="disruption_status">Filter by status of disruption</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All disruption information (if any exists) for the specified route and stop.</returns>
		public async Task<V3DisruptionsResponse> Disruptions_GetDisruptionsByRouteAndStopAsync(int route_id, int stop_id, Disruptions_GetAllDisruptionsDisruption_status disruption_status, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions/route/"+route_id+"/stop/"+stop_id+"?disruption_status=" + disruption_status+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all disruptions for a particular stop
		/// Disruptions_GetDisruptionsByStop v3/disruptions/stop/{stop_id}
		/// </summary>
		/// <param name="stop_id">Identifier of stop; values returned by Stops API - v3/stops</param>
		/// <param name="disruption_status">Filter by status of disruption</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All disruption information (if any exists) for the specified stop.</returns>
		public async Task<V3DisruptionsResponse> Disruptions_GetDisruptionsByStopAsync(int stop_id, Disruptions_GetAllDisruptionsDisruption_status disruption_status, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions/stop/"+stop_id+"?disruption_status=" + disruption_status+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a specific disruption
		/// Disruptions_GetDisruptionById v3/disruptions/{disruption_id}
		/// </summary>
		/// <param name="disruption_id">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Disruption information for the specified disruption ID.</returns>
		public async Task<V3DisruptionResponse> Disruptions_GetDisruptionByIdAsync(long disruption_id, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/disruptions/"+disruption_id+"?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3DisruptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Estimate a fare by zone
		/// FareEstimate_GetFareEstimateByZone v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}
		/// </summary>
		/// <param name="minZone">Minimum Zone travelled through ie. 1</param>
		/// <param name="maxZone">Maximum Zone travelled through id. 6</param>
		/// <param name="journey_touch_on_utc">JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).</param>
		/// <param name="journey_touch_off_utc">JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Resultant set fare estimates</returns>
		public async Task<V3FareEstimateResponse> FareEstimate_GetFareEstimateByZoneAsync(int minZone, int maxZone, System.DateTimeOffset journey_touch_on_utc, System.DateTimeOffset journey_touch_off_utc, bool is_journey_in_free_tram_zone, V3StopDepartureRequestRoute_type[] travelled_route_types, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/fare_estimate/min_zone/"+minZone+"/max_zone/"+maxZone+"?journey_touch_on_utc=" + journey_touch_on_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&journey_touch_off_utc=" + journey_touch_off_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&is_journey_in_free_tram_zone="+is_journey_in_free_tram_zone+"&"+string.Join("&", travelled_route_types.Select(z => $"travelled_route_types={z}"))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3FareEstimateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ticket outlets
		/// Outlets_GetAllOutlets v3/outlets
		/// </summary>
		/// <param name="max_results">Maximum number of results returned (default = 30)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Ticket outlets.</returns>
		public async Task<V3OutletResponse> Outlets_GetAllOutletsAsync(int max_results, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/outlets?max_results="+max_results+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3OutletResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ticket outlets near a specific location
		/// Outlets_GetOutletsByGeolocation v3/outlets/location/{latitude},{longitude}
		/// </summary>
		/// <param name="latitude">Geographic coordinate of latitude</param>
		/// <param name="longitude">Geographic coordinate of longitude</param>
		/// <param name="max_distance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)</param>
		/// <param name="max_results">Maximum number of results returned (default = 30)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Ticket outlets near the specified location.</returns>
		public async Task<V3OutletGeolocationResponse> Outlets_GetOutletsByGeolocationAsync(float latitude, float longitude, double max_distance, int max_results, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/outlets/location/"+latitude+","+longitude+"?max_distance="+max_distance+"&max_results="+max_results+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3OutletGeolocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View the stopping pattern for a specific trip/service run
		/// Patterns_GetPatternByRun v3/pattern/run/{run_ref}/route_type/{route_type}
		/// </summary>
		/// <param name="run_ref">The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.</param>
		/// <param name="stop_id">Filter by stop_id; values returned by Stops API</param>
		/// <param name="date_utc">Filter by the date and time of the request (ISO 8601 UTC format)</param>
		/// <param name="include_skipped_stops">Include any skipped stops in a stopping pattern. Defaults to false.</param>
		/// <param name="include_geopath">Indicates if geopath data will be returned (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)</returns>
		public async Task<V3StoppingPattern> Patterns_GetPatternByRunAsync(string run_ref, Patterns_GetPatternByRunRoute_type route_type, string[] expand, int stop_id, System.DateTimeOffset date_utc, bool include_skipped_stops, bool include_geopath, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/pattern/run/"+ (run_ref==null? "" : System.Uri.EscapeDataString(run_ref))+"/route_type/"+route_type+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&stop_id="+stop_id+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_skipped_stops="+include_skipped_stops+"&include_geopath="+include_geopath+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3StoppingPattern>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all route types and their names
		/// RouteTypes_GetRouteTypes v3/route_types
		/// </summary>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All route types (i.e. identifiers of transport modes) and their names.</returns>
		public async Task<V3RouteTypesResponse> RouteTypes_GetRouteTypesAsync(string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/route_types?token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RouteTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View route names and numbers for all routes
		/// Routes_OneOrMoreRoutes v3/routes
		/// </summary>
		/// <param name="route_types">Filter by route_type; values returned via RouteTypes API</param>
		/// <param name="route_name">Filter by name  of route (accepts partial route name matches)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Route names and numbers for all routes of all route types.</returns>
		public async Task<V3RouteResponse> Routes_OneOrMoreRoutesAsync(V3StopDepartureRequestRoute_type[] route_types, string route_name, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/routes?"+string.Join("&", route_types.Select(z => $"route_types={z}"))+"&route_name=" + (route_name==null? "" : System.Uri.EscapeDataString(route_name))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RouteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View route name and number for specific route ID
		/// Routes_RouteFromId v3/routes/{route_id}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Departures, Directions and Disruptions APIs</param>
		/// <param name="include_geopath">Indicates kif geopath data will be returned (default = false)</param>
		/// <param name="geopath_utc">Filter geopaths by date (ISO 8601 UTC format) (default = current date)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>The route name and number for the specified route ID.</returns>
		public async Task<V3RouteResponse> Routes_RouteFromIdAsync(int route_id, bool include_geopath, System.DateTimeOffset geopath_utc, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/routes/"+route_id+"?include_geopath="+include_geopath+"&geopath_utc=" + geopath_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RouteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all trip/service runs for a specific route ID
		/// Runs_ForRoute v3/runs/route/{route_id}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes.</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
		/// <param name="date_utc">Date of the request. (optional - defaults to now)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All trip/service run details for the specified route ID.</returns>
		public async Task<V3RunsResponse> Runs_ForRouteAsync(int route_id, string[] expand, System.DateTimeOffset date_utc, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/runs/route/"+route_id+"?"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all trip/service runs for a specific route ID and route type
		/// Runs_ForRouteAndRouteType v3/runs/route/{route_id}/route_type/{route_type}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes.</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
		/// <param name="date_utc">Date of the request. (optional - defaults to now)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All trip/service run details for the specified route ID and route type.</returns>
		public async Task<V3RunsResponse> Runs_ForRouteAndRouteTypeAsync(int route_id, Runs_ForRouteAndRouteTypeRoute_type route_type, string[] expand, System.DateTimeOffset date_utc, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/runs/route/"+route_id+"/route_type/"+route_type+"?"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all trip/service runs for a specific run_ref
		/// Runs_ForRun v3/runs/{run_ref}
		/// </summary>
		/// <param name="run_ref">The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
		/// <param name="date_utc">Date of the request. (optional - defaults to now)</param>
		/// <param name="include_geopath">Indicates if geopath data will be returned (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All trip/service run details for the specified run_ref.</returns>
		public async Task<V3RunsResponse> Runs_ForRunAsync(string run_ref, string[] expand, System.DateTimeOffset date_utc, bool include_geopath, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/runs/"+ (run_ref==null? "" : System.Uri.EscapeDataString(run_ref))+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_geopath="+include_geopath+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View the trip/service run for a specific run_ref and route type
		/// Runs_ForRunAndRouteType v3/runs/{run_ref}/route_type/{route_type}
		/// </summary>
		/// <param name="run_ref">The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
		/// <param name="date_utc">Date of the request. (optional - defaults to now)</param>
		/// <param name="include_geopath">Indicates if geopath data will be returned (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>The trip/service run details for the run_ref and route type specified.</returns>
		public async Task<V3RunResponse> Runs_ForRunAndRouteTypeAsync(string run_ref, Runs_ForRunAndRouteTypeRoute_type route_type, string[] expand, System.DateTimeOffset date_utc, bool include_geopath, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/runs/"+ (run_ref==null? "" : System.Uri.EscapeDataString(run_ref))+"/route_type/"+route_type+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"))+"&date_utc=" + date_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_geopath="+include_geopath+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3RunResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View stops, routes and myki ticket outlets that match the search term
		/// Search_Search v3/search/{search_term}
		/// </summary>
		/// <param name="search_term">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
		/// <param name="route_types">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)</param>
		/// <param name="latitude">Filter by geographic coordinate of latitude</param>
		/// <param name="longitude">Filter by geographic coordinate of longitude</param>
		/// <param name="max_distance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters</param>
		/// <param name="include_addresses">Placeholder for future development; currently unavailable</param>
		/// <param name="include_outlets">Indicates if outlets will be returned in response (default = true)</param>
		/// <param name="match_stop_by_suburb">Indicates whether to find stops by suburbs in the search term (default = true)</param>
		/// <param name="match_route_by_suburb">Indicates whether to find routes by suburbs in the search term (default = true)</param>
		/// <param name="match_stop_by_gtfs_stop_id">Indicates whether to search for stops according to a metlink stop ID (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default).</returns>
		public async Task<V3SearchResult> Search_SearchAsync(string search_term, V3StopDepartureRequestRoute_type[] route_types, float latitude, float longitude, float max_distance, bool include_addresses, bool include_outlets, bool match_stop_by_suburb, bool match_route_by_suburb, bool match_stop_by_gtfs_stop_id, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/search/"+ (search_term==null? "" : System.Uri.EscapeDataString(search_term))+"&"+string.Join("&", route_types.Select(z => $"route_types={z}"))+"&latitude="+latitude+"&longitude="+longitude+"&max_distance="+max_distance+"&include_addresses="+include_addresses+"&include_outlets="+include_outlets+"&match_stop_by_suburb="+match_stop_by_suburb+"&match_route_by_suburb="+match_route_by_suburb+"&match_stop_by_gtfs_stop_id="+match_stop_by_gtfs_stop_id+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3SearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all stops near a specific location
		/// Stops_StopsByGeolocation v3/stops/location/{latitude},{longitude}
		/// </summary>
		/// <param name="latitude">Geographic coordinate of latitude</param>
		/// <param name="longitude">Geographic coordinate of longitude</param>
		/// <param name="route_types">Filter by route_type; values returned via RouteTypes API</param>
		/// <param name="max_results">Maximum number of results returned (default = 30)</param>
		/// <param name="max_distance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)</param>
		/// <param name="stop_disruptions">Indicates if stop disruption information will be returned (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All stops near the specified location.</returns>
		public async Task<V3StopsByDistanceResponse> Stops_StopsByGeolocationAsync(float latitude, float longitude, V3StopDepartureRequestRoute_type[] route_types, int max_results, double max_distance, bool stop_disruptions, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/stops/location/"+latitude+","+longitude+"?"+string.Join("&", route_types.Select(z => $"route_types={z}"))+"&max_results="+max_results+"&max_distance="+max_distance+"&stop_disruptions="+stop_disruptions+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3StopsByDistanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all stops on a specific route
		/// Stops_StopsForRoute v3/stops/route/{route_id}/route_type/{route_type}
		/// </summary>
		/// <param name="route_id">Identifier of route; values returned by Routes API - v3/routes</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="direction_id">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.</param>
		/// <param name="stop_disruptions">Indicates if stop disruption information will be returned (default = false)</param>
		/// <param name="include_geopath">Indicates if geopath data will be returned (default = false)</param>
		/// <param name="geopath_utc">Filter geopaths by date (ISO 8601 UTC format) (default = current date)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>All stops on the specified route.</returns>
		public async Task<V3StopsOnRouteResponse> Stops_StopsForRouteAsync(int route_id, Stops_StopsForRouteRoute_type route_type, int direction_id, bool stop_disruptions, bool include_geopath, System.DateTimeOffset geopath_utc, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/stops/route/"+route_id+"/route_type/"+route_type+"?direction_id="+direction_id+"&stop_disruptions="+stop_disruptions+"&include_geopath="+include_geopath+"&geopath_utc=" + geopath_utc.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3StopsOnRouteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View facilities at a specific stop (Metro and V/Line stations only)
		/// Stops_StopDetails v3/stops/{stop_id}/route_type/{route_type}
		/// </summary>
		/// <param name="stop_id">Identifier of stop; values returned by Stops API</param>
		/// <param name="route_type">Number identifying transport mode; values returned via RouteTypes API</param>
		/// <param name="stop_location">Indicates if stop location information will be returned (default = false)</param>
		/// <param name="stop_amenities">Indicates if stop amenity information will be returned (default = false)</param>
		/// <param name="stop_accessibility">Indicates if stop accessibility information will be returned (default = false)</param>
		/// <param name="stop_contact">Indicates if stop contact information will be returned (default = false)</param>
		/// <param name="stop_ticket">Indicates if stop ticket information will be returned (default = false)</param>
		/// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not</param>
		/// <param name="stop_staffing">Indicates if stop staffing information will be returned (default = false)</param>
		/// <param name="stop_disruptions">Indicates if stop disruption information will be returned (default = false)</param>
		/// <param name="token">Please ignore</param>
		/// <param name="devid">Your developer id</param>
		/// <param name="signature">Authentication signature for request</param>
		/// <returns>Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).</returns>
		public async Task<V3StopResponse> Stops_StopDetailsAsync(int stop_id, Stops_StopDetailsRoute_type route_type, bool stop_location, bool stop_amenities, bool stop_accessibility, bool stop_contact, bool stop_ticket, bool gtfs, bool stop_staffing, bool stop_disruptions, string token, string devid, string signature, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/stops/"+stop_id+"/route_type/"+route_type+"?stop_location="+stop_location+"&stop_amenities="+stop_amenities+"&stop_accessibility="+stop_accessibility+"&stop_contact="+stop_contact+"&stop_ticket="+stop_ticket+"&gtfs="+gtfs+"&stop_staffing="+stop_staffing+"&stop_disruptions="+stop_disruptions+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&devid=" + (devid==null? "" : System.Uri.EscapeDataString(devid))+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V3StopResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Departures_GetForStopRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Departures_GetForStopAndRouteRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Directions_ForDirectionAndTypeRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Disruptions_GetAllDisruptionsDisruption_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="current")]
		current = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="planned")]
		planned = 1,
	}
	
	public enum Patterns_GetPatternByRunRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Runs_ForRouteAndRouteTypeRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Runs_ForRunAndRouteTypeRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Stops_StopsForRouteRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	public enum Stops_StopDetailsRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
