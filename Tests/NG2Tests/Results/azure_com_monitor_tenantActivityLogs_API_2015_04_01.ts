import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Describes the format of Error response. */
	export interface ErrorResponse {

		/** Error code */
		code?: string | null;

		/** Error message indicating why the operation failed. */
		message?: string | null;
	}

	/** Describes the format of Error response. */
	export interface ErrorResponseFormProperties {

		/** Error code */
		code: FormControl<string | null | undefined>,

		/** Error message indicating why the operation failed. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateErrorResponseFormGroup() {
		return new FormGroup<ErrorResponseFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Azure event log entries are of type EventData */
	export interface EventData {

		/** the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope' */
		authorization?: SenderAuthorization;

		/** the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability. */
		caller?: string | null;

		/** The localizable string class. */
		category?: LocalizableString;

		/** key value pairs to identify ARM permissions. */
		claims?: {[id: string]: string };

		/** the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation. */
		correlationId?: string | null;

		/** the description of the event. */
		description?: string | null;

		/** the event data Id. This is a unique identifier for an event. */
		eventDataId?: string | null;

		/** The localizable string class. */
		eventName?: LocalizableString;

		/** the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format. */
		eventTimestamp?: Date | null;

		/** The Http request info. */
		httpRequest?: HttpRequestInfo;

		/** the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information. */
		id?: string | null;

		/** the event level */
		level?: EventDataLevel | null;

		/** It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName. */
		operationId?: string | null;

		/** The localizable string class. */
		operationName?: LocalizableString;

		/** the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event. */
		properties?: {[id: string]: string };

		/** the resource group name of the impacted resource. */
		resourceGroupName?: string | null;

		/** the resource uri that uniquely identifies the resource that caused this event. */
		resourceId?: string | null;

		/** The localizable string class. */
		resourceProviderName?: LocalizableString;

		/** The localizable string class. */
		resourceType?: LocalizableString;

		/** The localizable string class. */
		status?: LocalizableString;

		/** The localizable string class. */
		subStatus?: LocalizableString;

		/** the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure. */
		submissionTimestamp?: Date | null;

		/** the Azure subscription Id usually a GUID. */
		subscriptionId?: string | null;

		/** the Azure tenant Id */
		tenantId?: string | null;
	}

	/** The Azure event log entries are of type EventData */
	export interface EventDataFormProperties {

		/** the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability. */
		caller: FormControl<string | null | undefined>,

		/** key value pairs to identify ARM permissions. */
		claims: FormControl<{[id: string]: string } | null | undefined>,

		/** the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation. */
		correlationId: FormControl<string | null | undefined>,

		/** the description of the event. */
		description: FormControl<string | null | undefined>,

		/** the event data Id. This is a unique identifier for an event. */
		eventDataId: FormControl<string | null | undefined>,

		/** the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format. */
		eventTimestamp: FormControl<Date | null | undefined>,

		/** the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information. */
		id: FormControl<string | null | undefined>,

		/** the event level */
		level: FormControl<EventDataLevel | null | undefined>,

		/** It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName. */
		operationId: FormControl<string | null | undefined>,

		/** the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event. */
		properties: FormControl<{[id: string]: string } | null | undefined>,

		/** the resource group name of the impacted resource. */
		resourceGroupName: FormControl<string | null | undefined>,

		/** the resource uri that uniquely identifies the resource that caused this event. */
		resourceId: FormControl<string | null | undefined>,

		/** the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure. */
		submissionTimestamp: FormControl<Date | null | undefined>,

		/** the Azure subscription Id usually a GUID. */
		subscriptionId: FormControl<string | null | undefined>,

		/** the Azure tenant Id */
		tenantId: FormControl<string | null | undefined>,
	}
	export function CreateEventDataFormGroup() {
		return new FormGroup<EventDataFormProperties>({
			caller: new FormControl<string | null | undefined>(undefined),
			claims: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			correlationId: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			eventDataId: new FormControl<string | null | undefined>(undefined),
			eventTimestamp: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			level: new FormControl<EventDataLevel | null | undefined>(undefined),
			operationId: new FormControl<string | null | undefined>(undefined),
			properties: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			resourceGroupName: new FormControl<string | null | undefined>(undefined),
			resourceId: new FormControl<string | null | undefined>(undefined),
			submissionTimestamp: new FormControl<Date | null | undefined>(undefined),
			subscriptionId: new FormControl<string | null | undefined>(undefined),
			tenantId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum EventDataLevel { Critical = 'Critical', Error = 'Error', Warning = 'Warning', Informational = 'Informational', Verbose = 'Verbose' }


	/** Represents collection of events. */
	export interface EventDataCollection {

		/** Provides the link to retrieve the next set of events. */
		nextLink?: string | null;

		/**
		 * this list that includes the Azure audit logs.
		 * Required
		 */
		value: Array<EventData>;
	}

	/** Represents collection of events. */
	export interface EventDataCollectionFormProperties {

		/** Provides the link to retrieve the next set of events. */
		nextLink: FormControl<string | null | undefined>,
	}
	export function CreateEventDataCollectionFormGroup() {
		return new FormGroup<EventDataCollectionFormProperties>({
			nextLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Http request info. */
	export interface HttpRequestInfo {

		/** the client Ip Address */
		clientIpAddress?: string | null;

		/** the client request id. */
		clientRequestId?: string | null;

		/** the Http request method. */
		method?: string | null;

		/** the Uri. */
		uri?: string | null;
	}

	/** The Http request info. */
	export interface HttpRequestInfoFormProperties {

		/** the client Ip Address */
		clientIpAddress: FormControl<string | null | undefined>,

		/** the client request id. */
		clientRequestId: FormControl<string | null | undefined>,

		/** the Http request method. */
		method: FormControl<string | null | undefined>,

		/** the Uri. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateHttpRequestInfoFormGroup() {
		return new FormGroup<HttpRequestInfoFormProperties>({
			clientIpAddress: new FormControl<string | null | undefined>(undefined),
			clientRequestId: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The localizable string class. */
	export interface LocalizableString {

		/** the locale specific value. */
		localizedValue?: string | null;

		/**
		 * the invariant value.
		 * Required
		 */
		value: string;
	}

	/** The localizable string class. */
	export interface LocalizableStringFormProperties {

		/** the locale specific value. */
		localizedValue: FormControl<string | null | undefined>,

		/**
		 * the invariant value.
		 * Required
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateLocalizableStringFormGroup() {
		return new FormGroup<LocalizableStringFormProperties>({
			localizedValue: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope' */
	export interface SenderAuthorization {

		/** the permissible actions. For instance: microsoft.support/supporttickets/write */
		action?: string | null;

		/** the role of the user. For instance: Subscription Admin */
		role?: string | null;

		/** the scope. */
		scope?: string | null;
	}

	/** the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope' */
	export interface SenderAuthorizationFormProperties {

		/** the permissible actions. For instance: microsoft.support/supporttickets/write */
		action: FormControl<string | null | undefined>,

		/** the role of the user. For instance: Subscription Admin */
		role: FormControl<string | null | undefined>,

		/** the scope. */
		scope: FormControl<string | null | undefined>,
	}
	export function CreateSenderAuthorizationFormGroup() {
		return new FormGroup<SenderAuthorizationFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			role: new FormControl<string | null | undefined>(undefined),
			scope: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.
		 * Get providers/microsoft.insights/eventtypes/management/values
		 * @param {string} api_version Client Api Version.
		 * @param {string} filter Reduces the set of data collected. <br>The **$filter** is very restricted and allows only the following patterns.<br>- List events for a resource group: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceGroupName eq '<ResourceGroupName>'.<br>- List events for resource: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceUri eq '<ResourceURI>'.<br>- List events for a subscription: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation'.<br>- List events for a resource provider: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceProvider eq '<ResourceProviderName>'.<br>- List events for a correlation Id: api-version=2014-04-01&$filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and correlationId eq '<CorrelationID>'.<br>**NOTE**: No other syntax is allowed.
		 * @param {string} select Used to fetch events with only the given properties.<br>The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
		 * @return {EventDataCollection} Successful request to get a page of events in the tenant activity logs
		 */
		TenantActivityLogs_List(api_version: string, filter: string | null | undefined, select: string | null | undefined): Observable<EventDataCollection> {
			return this.http.get<EventDataCollection>(this.baseUri + 'providers/microsoft.insights/eventtypes/management/values?api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)) + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&select=' + (select == null ? '' : encodeURIComponent(select)), {});
		}
	}

}

