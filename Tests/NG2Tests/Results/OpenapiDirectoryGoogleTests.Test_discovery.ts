import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
export namespace MyNS {
	export interface DirectoryList {

		/** Indicate the version of the Discovery API used to generate this doc. */
		discoveryVersion?: string;

		/** The individual directory entries. One entry per api/version pair. */
		DirectoryListItems?: Array<DirectoryListItems>;

		/** The kind for this response. */
		kind?: string;
	}

	export interface DirectoryListItems {

		/** The description of this API. */
		description?: string;

		/** A link to the discovery document. */
		discoveryLink?: string;

		/** The URL for the discovery REST document. */
		discoveryRestUrl?: string;

		/** A link to human readable documentation for the API. */
		documentationLink?: string;

		/** Links to 16x16 and 32x32 icons representing the API. */
		icons?: DirectoryListIcons;

		/** The id of this API. */
		id?: string;

		/** The kind for this response. */
		kind?: string;

		/** Labels for the status of this API, such as labs or deprecated. */
		labels?: Array<string>;

		/** The name of the API. */
		name?: string;

		/** True if this version is the preferred version to use. */
		preferred?: boolean;

		/** The title of this API. */
		title?: string;

		/** The version of the API. */
		version?: string;
	}

	export interface DirectoryListIcons {

		/** The URL of the 16x16 icon. */
		x16?: string;

		/** The URL of the 32x32 icon. */
		x32?: string;
	}

	export interface JsonSchema {

		/** A reference to another schema. The value of this property is the "id" of another schema. */
		ref?: string;
		additionalProperties?: JsonSchema;

		/** Additional information about this property. */
		annotations?: JsonSchemaAnnotations;

		/** The default value of this property (if one exists). */
		default?: string;

		/** A description of this object. */
		description?: string;

		/** Values this parameter may take (if it is an enum). */
		enum?: Array<string>;

		/** The descriptions for the enums. Each position maps to the corresponding value in the "enum" array. */
		enumDescriptions?: Array<string>;

		/** An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23 */
		format?: string;

		/** Unique identifier for this schema. */
		id?: string;
		items?: JsonSchema;

		/** Whether this parameter goes in the query or the path for REST requests. */
		location?: string;

		/** The maximum value of this parameter. */
		maximum?: string;

		/** The minimum value of this parameter. */
		minimum?: string;

		/** The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html */
		pattern?: string;

		/** If this is a schema for an object, list the schema for each property of this object. */
		properties?: {[id: string]: JsonSchema };

		/** The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service. */
		readOnly?: boolean;

		/** Whether this parameter may appear multiple times. */
		repeated?: boolean;

		/** Whether the parameter is required. */
		required?: boolean;

		/** The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1 */
		type?: string;

		/** In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names. */
		variant?: JsonSchemaVariant;
	}

	export interface JsonSchemaAnnotations {

		/** A list of methods for which this property is required on requests. */
		required?: Array<string>;
	}

	export interface JsonSchemaVariant {

		/** The name of the type discriminant property. */
		discriminant?: string;

		/** The map of discriminant value to schema to use for parsing.. */
		JsonSchemaVariantMap?: Array<JsonSchemaVariantMap>;
	}

	export interface JsonSchemaVariantMap {
		ref?: string;
		type_value?: string;
	}

	export interface RestDescription {

		/** Authentication information. */
		auth?: RestDescriptionAuth;

		/** [DEPRECATED] The base path for REST requests. */
		basePath?: string;

		/** [DEPRECATED] The base URL for REST requests. */
		baseUrl?: string;

		/** The path for REST batch requests. */
		batchPath?: string;

		/** Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names. */
		canonicalName?: string;

		/** The description of this API. */
		description?: string;

		/** Indicate the version of the Discovery API used to generate this doc. */
		discoveryVersion?: string;

		/** A link to human readable documentation for the API. */
		documentationLink?: string;

		/** The ETag for this response. */
		etag?: string;

		/** Enable exponential backoff for suitable methods in the generated clients. */
		exponentialBackoffDefault?: boolean;

		/** A list of supported features for this API. */
		features?: Array<string>;

		/** Links to 16x16 and 32x32 icons representing the API. */
		icons?: RestDescriptionIcons;

		/** The ID of this API. */
		id?: string;

		/** The kind for this response. */
		kind?: string;

		/** Labels for the status of this API, such as labs or deprecated. */
		labels?: Array<string>;

		/** API-level methods for this API. */
		methods?: {[id: string]: RestMethod };

		/** The name of this API. */
		name?: string;

		/** The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name. */
		ownerDomain?: string;

		/** The name of the owner of this API. See ownerDomain. */
		ownerName?: string;

		/** The package of the owner of this API. See ownerDomain. */
		packagePath?: string;

		/** Common parameters that apply across all apis. */
		parameters?: {[id: string]: JsonSchema };

		/** The protocol described by this document. */
		protocol?: string;

		/** The resources in this API. */
		resources?: {[id: string]: RestResource };

		/** The version of this API. */
		revision?: string;

		/** The root URL under which all API services live. */
		rootUrl?: string;

		/** The schemas for this API. */
		schemas?: {[id: string]: JsonSchema };

		/** The base path for all REST requests. */
		servicePath?: string;

		/** The title of this API. */
		title?: string;

		/** The version of this API. */
		version?: string;
		version_module?: boolean;
	}

	export interface RestDescriptionAuth {

		/** OAuth 2.0 authentication information. */
		oauth2?: RestDescriptionAuthOauth2;
	}

	export interface RestDescriptionAuthOauth2 {

		/** Available OAuth 2.0 scopes. */
		scopes?: {[id: string]: RestDescriptionAuthOauth2Scopes };
	}

	export interface RestDescriptionAuthOauth2Scopes {

		/** Description of scope. */
		description?: string;
	}

	export interface RestDescriptionIcons {

		/** The URL of the 16x16 icon. */
		x16?: string;

		/** The URL of the 32x32 icon. */
		x32?: string;
	}

	export interface RestMethod {

		/** Description of this method. */
		description?: string;

		/** Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header. */
		etagRequired?: boolean;

		/** HTTP method used by this method. */
		httpMethod?: string;

		/** A unique ID for this method. This property can be used to match methods between different versions of Discovery. */
		id?: string;

		/** Media upload parameters. */
		mediaUpload?: RestMethodMediaUpload;

		/** Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first. */
		parameterOrder?: Array<string>;

		/** Details for all parameters in this method. */
		parameters?: {[id: string]: JsonSchema };

		/** The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level. */
		path?: string;

		/** The schema for the request. */
		request?: RestMethodRequest;

		/** The schema for the response. */
		response?: RestMethodResponse;

		/** OAuth 2.0 scopes applicable to this method. */
		scopes?: Array<string>;

		/** Whether this method supports media downloads. */
		supportsMediaDownload?: boolean;

		/** Whether this method supports media uploads. */
		supportsMediaUpload?: boolean;

		/** Whether this method supports subscriptions. */
		supportsSubscription?: boolean;

		/** Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download. */
		useMediaDownloadService?: boolean;
	}

	export interface RestMethodMediaUpload {

		/** MIME Media Ranges for acceptable media uploads to this method. */
		accept?: Array<string>;

		/** Maximum size of a media upload, such as "1MB", "2GB" or "3TB". */
		maxSize?: string;

		/** Supported upload protocols. */
		protocols?: RestMethodMediaUploadProtocols;
	}

	export interface RestMethodMediaUploadProtocols {

		/** Supports the Resumable Media Upload protocol. */
		resumable?: RestMethodMediaUploadProtocolsResumable;

		/** Supports uploading as a single HTTP request. */
		simple?: RestMethodMediaUploadProtocolsSimple;
	}

	export interface RestMethodMediaUploadProtocolsResumable {

		/** True if this endpoint supports uploading multipart media. */
		multipart?: boolean;

		/** The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level. */
		path?: string;
	}

	export interface RestMethodMediaUploadProtocolsSimple {

		/** True if this endpoint supports upload multipart media. */
		multipart?: boolean;

		/** The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level. */
		path?: string;
	}

	export interface RestMethodRequest {

		/** Schema ID for the request schema. */
		ref?: string;

		/** parameter name. */
		parameterName?: string;
	}

	export interface RestMethodResponse {

		/** Schema ID for the response schema. */
		ref?: string;
	}

	export interface RestResource {

		/** Methods on this resource. */
		methods?: {[id: string]: RestMethod };

		/** Sub-resources on this resource. */
		resources?: {[id: string]: RestResource };
	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Retrieve the list of APIs supported at this endpoint.
		 * Get apis
		 * @param {string} name Only include APIs with the given name.
		 * @param {boolean} preferred Return only the preferred version of an API.
		 * @return {void} Successful response
		 */
		Discovery_apis_list(name: string, preferred: boolean): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'apis?name=' + (name == null ? '' : encodeURIComponent(name)) + '&preferred=' + preferred, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieve the description of a particular version of an api.
		 * Get apis/{api}/{version}/rest
		 * @param {string} api The name of the API.
		 * @param {string} version The version of the API.
		 * @return {void} Successful response
		 */
		Discovery_apis_getRest(api: string, version: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'apis/' + (api == null ? '' : encodeURIComponent(api)) + '/' + (version == null ? '' : encodeURIComponent(version)) + '/rest', { observe: 'response', responseType: 'text' });
		}
	}

}

