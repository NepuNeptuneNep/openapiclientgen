import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Empty response. */
	export interface EmptyResponse {

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;
	}

	/** Empty response. */
	export interface EmptyResponseFormProperties {
	}
	export function CreateEmptyResponseFormGroup() {
		return new FormGroup<EmptyResponseFormProperties>({
		});

	}


	/**
	 * Request Error information.
	 * The presence of an error field signals that the operation
	 * has failed.
	 */
	export interface Errors {

		/**
		 * Global error code. Deprecated and ignored.
		 * Set custom error codes in ErrorProto.domain and ErrorProto.code
		 * instead.
		 */
		code?: ErrorsCode | null;

		/** Specific error description and codes */
		error?: Array<ErrorProto>;

		/**
		 * Request identifier generated by the service, which can be
		 * used to identify the error in the logs
		 */
		requestId?: string | null;
	}

	/**
	 * Request Error information.
	 * The presence of an error field signals that the operation
	 * has failed.
	 */
	export interface ErrorsFormProperties {

		/**
		 * Global error code. Deprecated and ignored.
		 * Set custom error codes in ErrorProto.domain and ErrorProto.code
		 * instead.
		 */
		code: FormControl<ErrorsCode | null | undefined>,

		/**
		 * Request identifier generated by the service, which can be
		 * used to identify the error in the logs
		 */
		requestId: FormControl<string | null | undefined>,
	}
	export function CreateErrorsFormGroup() {
		return new FormGroup<ErrorsFormProperties>({
			code: new FormControl<ErrorsCode | null | undefined>(undefined),
			requestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ErrorsCode { BAD_REQUEST = 0, FORBIDDEN = 1, NOT_FOUND = 2, CONFLICT = 3, GONE = 4, PRECONDITION_FAILED = 5, INTERNAL_ERROR = 6, SERVICE_UNAVAILABLE = 7 }


	/** Describes one specific error. */
	export interface ErrorProto {

		/**
		 * Error arguments, to be used when building user-friendly error messages
		 * given the error domain and code.  Different error codes require different
		 * arguments.
		 */
		argument?: Array<string>;

		/**
		 * Error code in the error domain. This should correspond to
		 * a value of the enum type whose name is in domain. See
		 * the core error domain in error_domain.proto.
		 */
		code?: string | null;

		/**
		 * Debugging information, which should not be
		 * shared externally.
		 */
		debugInfo?: string | null;

		/**
		 * Error domain. RoSy services can define their own
		 * domain and error codes. This should normally be
		 * the name of an enum type, such as: gdata.CoreErrorDomain
		 */
		domain?: string | null;

		/**
		 * A short explanation for the error, which can be shared outside Google.
		 * Please set domain, code and arguments whenever possible instead of this
		 * error message so that external APIs can build safe error messages
		 * themselves.
		 * External messages built in a RoSy interface will most likely refer to
		 * information and concepts that are not available externally and should not
		 * be exposed. It is safer if external APIs can understand the errors and
		 * decide what the error message should look like.
		 */
		externalErrorMessage?: string | null;

		/**
		 * Location of the error, as specified by the location type.
		 * If location_type is PATH, this should be a path to a field that's
		 * relative to the request, using FieldPath notation
		 * (net/proto2/util/public/field_path.h).
		 * Examples:
		 * authenticated_user.gaia_id
		 * resource.address[2].country
		 */
		location?: string | null;
		locationType?: ErrorProtoLocationType | null;
	}

	/** Describes one specific error. */
	export interface ErrorProtoFormProperties {

		/**
		 * Error code in the error domain. This should correspond to
		 * a value of the enum type whose name is in domain. See
		 * the core error domain in error_domain.proto.
		 */
		code: FormControl<string | null | undefined>,

		/**
		 * Debugging information, which should not be
		 * shared externally.
		 */
		debugInfo: FormControl<string | null | undefined>,

		/**
		 * Error domain. RoSy services can define their own
		 * domain and error codes. This should normally be
		 * the name of an enum type, such as: gdata.CoreErrorDomain
		 */
		domain: FormControl<string | null | undefined>,

		/**
		 * A short explanation for the error, which can be shared outside Google.
		 * Please set domain, code and arguments whenever possible instead of this
		 * error message so that external APIs can build safe error messages
		 * themselves.
		 * External messages built in a RoSy interface will most likely refer to
		 * information and concepts that are not available externally and should not
		 * be exposed. It is safer if external APIs can understand the errors and
		 * decide what the error message should look like.
		 */
		externalErrorMessage: FormControl<string | null | undefined>,

		/**
		 * Location of the error, as specified by the location type.
		 * If location_type is PATH, this should be a path to a field that's
		 * relative to the request, using FieldPath notation
		 * (net/proto2/util/public/field_path.h).
		 * Examples:
		 * authenticated_user.gaia_id
		 * resource.address[2].country
		 */
		location: FormControl<string | null | undefined>,
		locationType: FormControl<ErrorProtoLocationType | null | undefined>,
	}
	export function CreateErrorProtoFormGroup() {
		return new FormGroup<ErrorProtoFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			debugInfo: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			externalErrorMessage: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			locationType: new FormControl<ErrorProtoLocationType | null | undefined>(undefined),
		});

	}

	export enum ErrorProtoLocationType { PATH = 0, OTHER = 1, PARAMETER = 2 }


	/** A group. */
	export interface Group {

		/** A group's content details. */
		contentDetails?: GroupContentDetails;

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;

		/** The Etag of this resource. */
		etag?: string | null;

		/** The ID that YouTube uses to uniquely identify the group. */
		id?: string | null;

		/** Identifies the API resource's type. The value will be `youtube#group`. */
		kind?: string | null;

		/** A group snippet. */
		snippet?: GroupSnippet;
	}

	/** A group. */
	export interface GroupFormProperties {

		/** The Etag of this resource. */
		etag: FormControl<string | null | undefined>,

		/** The ID that YouTube uses to uniquely identify the group. */
		id: FormControl<string | null | undefined>,

		/** Identifies the API resource's type. The value will be `youtube#group`. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateGroupFormGroup() {
		return new FormGroup<GroupFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A group's content details. */
	export interface GroupContentDetails {

		/** The number of items in the group. */
		itemCount?: string | null;

		/**
		 * The type of resources that the group contains.
		 * Valid values for this property are:
		 * * `youtube#channel`
		 * * `youtube#playlist`
		 * * `youtube#video`
		 * * `youtubePartner#asset`
		 */
		itemType?: string | null;
	}

	/** A group's content details. */
	export interface GroupContentDetailsFormProperties {

		/** The number of items in the group. */
		itemCount: FormControl<string | null | undefined>,

		/**
		 * The type of resources that the group contains.
		 * Valid values for this property are:
		 * * `youtube#channel`
		 * * `youtube#playlist`
		 * * `youtube#video`
		 * * `youtubePartner#asset`
		 */
		itemType: FormControl<string | null | undefined>,
	}
	export function CreateGroupContentDetailsFormGroup() {
		return new FormGroup<GroupContentDetailsFormProperties>({
			itemCount: new FormControl<string | null | undefined>(undefined),
			itemType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A group snippet. */
	export interface GroupSnippet {

		/**
		 * The date and time that the group was created. The value is specified in
		 * ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
		 */
		publishedAt?: string | null;

		/** The group name. The value must be a non-empty string. */
		title?: string | null;
	}

	/** A group snippet. */
	export interface GroupSnippetFormProperties {

		/**
		 * The date and time that the group was created. The value is specified in
		 * ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
		 */
		publishedAt: FormControl<string | null | undefined>,

		/** The group name. The value must be a non-empty string. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGroupSnippetFormGroup() {
		return new FormGroup<GroupSnippetFormProperties>({
			publishedAt: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A group item. */
	export interface GroupItem {

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;

		/** The Etag of this resource. */
		etag?: string | null;

		/**
		 * The ID that YouTube uses to uniquely identify the group that contains the
		 * item.
		 */
		groupId?: string | null;

		/**
		 * The ID that YouTube uses to uniquely identify the `channel`, `video`,
		 * `playlist`, or `asset` resource that is included in the group. Note that
		 * this ID refers specifically to the inclusion of that resource in a
		 * particular group and is different than the channel ID, video ID,
		 * playlist ID, or asset ID that uniquely identifies the resource itself.
		 * The `resource.id` property's value specifies the unique channel, video,
		 * playlist, or asset ID.
		 */
		id?: string | null;

		/** Identifies the API resource's type. The value will be `youtube#groupItem`. */
		kind?: string | null;
		resource?: GroupItemResource;
	}

	/** A group item. */
	export interface GroupItemFormProperties {

		/** The Etag of this resource. */
		etag: FormControl<string | null | undefined>,

		/**
		 * The ID that YouTube uses to uniquely identify the group that contains the
		 * item.
		 */
		groupId: FormControl<string | null | undefined>,

		/**
		 * The ID that YouTube uses to uniquely identify the `channel`, `video`,
		 * `playlist`, or `asset` resource that is included in the group. Note that
		 * this ID refers specifically to the inclusion of that resource in a
		 * particular group and is different than the channel ID, video ID,
		 * playlist ID, or asset ID that uniquely identifies the resource itself.
		 * The `resource.id` property's value specifies the unique channel, video,
		 * playlist, or asset ID.
		 */
		id: FormControl<string | null | undefined>,

		/** Identifies the API resource's type. The value will be `youtube#groupItem`. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateGroupItemFormGroup() {
		return new FormGroup<GroupItemFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			groupId: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GroupItemResource {

		/**
		 * The channel, video, playlist, or asset ID that YouTube uses to uniquely
		 * identify the item that is being added to the group.
		 */
		id?: string | null;

		/**
		 * Identifies the type of resource being added to the group.
		 * Valid values for this property are:
		 * * `youtube#channel`
		 * * `youtube#playlist`
		 * * `youtube#video`
		 * * `youtubePartner#asset`
		 */
		kind?: string | null;
	}
	export interface GroupItemResourceFormProperties {

		/**
		 * The channel, video, playlist, or asset ID that YouTube uses to uniquely
		 * identify the item that is being added to the group.
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Identifies the type of resource being added to the group.
		 * Valid values for this property are:
		 * * `youtube#channel`
		 * * `youtube#playlist`
		 * * `youtube#video`
		 * * `youtubePartner#asset`
		 */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateGroupItemResourceFormGroup() {
		return new FormGroup<GroupItemResourceFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for GroupsService.ListGroupItems. */
	export interface ListGroupItemsResponse {

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;

		/** The Etag of this resource. */
		etag?: string | null;

		/**
		 * A list of groups that match the API request parameters. Each item in the
		 * list represents a `groupItem` resource.
		 */
		items?: Array<GroupItem>;

		/**
		 * Identifies the API resource's type. The value will be
		 * `youtube#groupItemListResponse`.
		 */
		kind?: string | null;
	}

	/** Response message for GroupsService.ListGroupItems. */
	export interface ListGroupItemsResponseFormProperties {

		/** The Etag of this resource. */
		etag: FormControl<string | null | undefined>,

		/**
		 * Identifies the API resource's type. The value will be
		 * `youtube#groupItemListResponse`.
		 */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateListGroupItemsResponseFormGroup() {
		return new FormGroup<ListGroupItemsResponseFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for GroupsService.ListGroups. */
	export interface ListGroupsResponse {

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;

		/** The Etag of this resource. */
		etag?: string | null;

		/**
		 * A list of groups that match the API request parameters. Each item in the
		 * list represents a `group` resource.
		 */
		items?: Array<Group>;

		/**
		 * Identifies the API resource's type. The value will be
		 * `youtube#groupListResponse`.
		 */
		kind?: string | null;

		/**
		 * The token that can be used as the value of the `pageToken` parameter to
		 * retrieve the next page in the result set.
		 */
		nextPageToken?: string | null;
	}

	/** Response message for GroupsService.ListGroups. */
	export interface ListGroupsResponseFormProperties {

		/** The Etag of this resource. */
		etag: FormControl<string | null | undefined>,

		/**
		 * Identifies the API resource's type. The value will be
		 * `youtube#groupListResponse`.
		 */
		kind: FormControl<string | null | undefined>,

		/**
		 * The token that can be used as the value of the `pageToken` parameter to
		 * retrieve the next page in the result set.
		 */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListGroupsResponseFormGroup() {
		return new FormGroup<ListGroupsResponseFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for TargetedQueriesService.Query. */
	export interface QueryResponse {

		/**
		 * This value specifies information about the data returned in the `rows`
		 * fields. Each item in the `columnHeaders` list identifies a field returned
		 * in the `rows` value, which contains a list of comma-delimited data. The
		 * `columnHeaders` list will begin with the dimensions specified in the API
		 * request, which will be followed by the metrics specified in the API
		 * request. The order of both dimensions and metrics will match the ordering
		 * in the API request. For example, if the API request contains the parameters
		 * `dimensions=ageGroup,gender&metrics=viewerPercentage`, the API response
		 * will return columns in this order: `ageGroup`, `gender`,
		 * `viewerPercentage`.
		 */
		columnHeaders?: Array<ResultTableColumnHeader>;

		/**
		 * Request Error information.
		 * The presence of an error field signals that the operation
		 * has failed.
		 */
		errors?: Errors;

		/**
		 * This value specifies the type of data included in the API response.
		 * For the query method, the kind property value will be
		 * `youtubeAnalytics#resultTable`.
		 */
		kind?: string | null;

		/**
		 * The list contains all rows of the result table. Each item in the list is
		 * an array that contains comma-delimited data corresponding to a single row
		 * of data. The order of the comma-delimited data fields will match the
		 * order of the columns listed in the `columnHeaders` field.
		 * If no data is available for the given query, the `rows` element will be
		 * omitted from the response.
		 * The response for a query with the `day` dimension will not contain rows for
		 * the most recent days.
		 */
		rows?: Array<string>;
	}

	/** Response message for TargetedQueriesService.Query. */
	export interface QueryResponseFormProperties {

		/**
		 * This value specifies the type of data included in the API response.
		 * For the query method, the kind property value will be
		 * `youtubeAnalytics#resultTable`.
		 */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateQueryResponseFormGroup() {
		return new FormGroup<QueryResponseFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The description of a column of the result table. */
	export interface ResultTableColumnHeader {

		/** The type of the column (`DIMENSION` or `METRIC`). */
		columnType?: string | null;

		/** The type of the data in the column (`STRING`, `INTEGER`, `FLOAT`, etc.). */
		dataType?: string | null;

		/** The name of the dimension or metric. */
		name?: string | null;
	}

	/** The description of a column of the result table. */
	export interface ResultTableColumnHeaderFormProperties {

		/** The type of the column (`DIMENSION` or `METRIC`). */
		columnType: FormControl<string | null | undefined>,

		/** The type of the data in the column (`STRING`, `INTEGER`, `FLOAT`, etc.). */
		dataType: FormControl<string | null | undefined>,

		/** The name of the dimension or metric. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateResultTableColumnHeaderFormGroup() {
		return new FormGroup<ResultTableColumnHeaderFormProperties>({
			columnType: new FormControl<string | null | undefined>(undefined),
			dataType: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Removes an item from a group.
		 * Delete v2/groupItems
		 * @param {string} id The `id` parameter specifies the YouTube group item ID of the group item
		 * that is being deleted.
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groupItems_delete(id: string | null | undefined, onBehalfOfContentOwner: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v2/groupItems?id=' + (id == null ? '' : encodeURIComponent(id)) + '&onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns a collection of group items that match the API request parameters.
		 * Get v2/groupItems
		 * @param {string} groupId The `groupId` parameter specifies the unique ID of the group for which you
		 * want to retrieve group items.
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groupItems_list(groupId: string | null | undefined, onBehalfOfContentOwner: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v2/groupItems?groupId=' + (groupId == null ? '' : encodeURIComponent(groupId)) + '&onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a group item.
		 * Post v2/groupItems
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groupItems_insert(onBehalfOfContentOwner: string | null | undefined, requestBody: GroupItem): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v2/groupItems?onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a group.
		 * Delete v2/groups
		 * @param {string} id The `id` parameter specifies the YouTube group ID of the group that is
		 * being deleted.
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groups_delete(id: string | null | undefined, onBehalfOfContentOwner: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v2/groups?id=' + (id == null ? '' : encodeURIComponent(id)) + '&onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns a collection of groups that match the API request parameters. For
		 * example, you can retrieve all groups that the authenticated user owns,
		 * or you can retrieve one or more groups by their unique IDs.
		 * Get v2/groups
		 * @param {string} id The `id` parameter specifies a comma-separated list of the YouTube group
		 * ID(s) for the resource(s) that are being retrieved. Each group must be
		 * owned by the authenticated user. In a `group` resource, the `id` property
		 * specifies the group's YouTube group ID.
		 * Note that if you do not specify a value for the `id` parameter, then you
		 * must set the `mine` parameter to `true`.
		 * @param {boolean} mine This parameter can only be used in a properly authorized request. Set this
		 * parameter's value to true to retrieve all groups owned by the authenticated
		 * user.
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @param {string} pageToken The `pageToken` parameter identifies a specific page in the result set that
		 * should be returned. In an API response, the `nextPageToken` property
		 * identifies the next page that can be retrieved.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groups_list(id: string | null | undefined, mine: boolean | null | undefined, onBehalfOfContentOwner: string | null | undefined, pageToken: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v2/groups?id=' + (id == null ? '' : encodeURIComponent(id)) + '&mine=' + mine + '&onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a group.
		 * Post v2/groups
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groups_insert(onBehalfOfContentOwner: string | null | undefined, requestBody: Group): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v2/groups?onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Modifies a group. For example, you could change a group's title.
		 * Put v2/groups
		 * @param {string} onBehalfOfContentOwner This parameter can only be used in a properly authorized request. **Note:**
		 * This parameter is intended exclusively for YouTube content partners that
		 * own and manage many different YouTube channels.
		 * The `onBehalfOfContentOwner` parameter indicates that the request's
		 * authorization credentials identify a YouTube user who is acting on behalf
		 * of the content owner specified in the parameter value. It allows content
		 * owners to authenticate once and get access to all their video and channel
		 * data, without having to provide authentication credentials for each
		 * individual channel. The account that the user authenticates with must be
		 * linked to the specified YouTube content owner.
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_groups_update(onBehalfOfContentOwner: string | null | undefined, requestBody: Group): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v2/groups?onBehalfOfContentOwner=' + (onBehalfOfContentOwner == null ? '' : encodeURIComponent(onBehalfOfContentOwner)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieve your YouTube Analytics reports.
		 * Get v2/reports
		 * @param {string} currency The currency to which financial metrics should be converted. The default is
		 * US Dollar (USD). If the result contains no financial metrics, this flag
		 * will be ignored. Responds with an error if the specified currency is not
		 * recognized.",
		 * pattern: [A-Z]{3}
		 * @param {string} dimensions A comma-separated list of YouTube Analytics dimensions, such as `views` or
		 * `ageGroup,gender`. See the [Available
		 * Reports](/youtube/analytics/v2/available_reports) document for a list of
		 * the reports that you can retrieve and the dimensions used for those
		 * reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims)
		 * document for definitions of those dimensions."
		 * pattern: [0-9a-zA-Z,]+
		 * @param {string} endDate The end date for fetching YouTube Analytics data. The value should be in
		 * `YYYY-MM-DD` format.
		 * required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2}
		 * @param {string} filters A list of filters that should be applied when retrieving YouTube Analytics
		 * data. The [Available Reports](/youtube/analytics/v2/available_reports)
		 * document identifies the dimensions that can be used to filter each report,
		 * and the [Dimensions](/youtube/analytics/v2/dimsmets/dims)  document defines
		 * those dimensions. If a request uses multiple filters, join them together
		 * with a semicolon (`;`), and the returned result table will satisfy both
		 * filters. For example, a filters parameter value of
		 * `video==dMH0bHeiRNg;country==IT` restricts the result set to include data
		 * for the given video in Italy.",
		 * @param {string} ids Identifies the YouTube channel or content owner for which you are
		 * retrieving YouTube Analytics data.
		 * - To request data for a YouTube user, set the `ids` parameter value to
		 *   `channel==CHANNEL_ID`, where `CHANNEL_ID` specifies the unique YouTube
		 *   channel ID.
		 * - To request data for a YouTube CMS content owner, set the `ids` parameter
		 *   value to `contentOwner==OWNER_NAME`, where `OWNER_NAME` is the CMS name
		 *   of the content owner.
		 * required: true, pattern: [a-zA-Z]+==[a-zA-Z0-9_+-]+
		 * @param {boolean} includeHistoricalChannelData If set to true historical data (i.e. channel data from before the linking
		 * of the channel to the content owner) will be retrieved.",
		 * @param {number} maxResults The maximum number of rows to include in the response.",
		 * minValue: 1
		 * @param {string} metrics A comma-separated list of YouTube Analytics metrics, such as `views` or
		 * `likes,dislikes`. See the
		 * [Available Reports](/youtube/analytics/v2/available_reports)  document for
		 * a list of the reports that you can retrieve and the metrics
		 * available in each report, and see the
		 * [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of
		 * those metrics.
		 * required: true, pattern: [0-9a-zA-Z,]+
		 * @param {string} sort A comma-separated list of dimensions or metrics that determine the sort
		 * order for YouTube Analytics data. By default the sort order is ascending.
		 * The '`-`' prefix causes descending sort order.",
		 * pattern: [-0-9a-zA-Z,]+
		 * @param {string} startDate The start date for fetching YouTube Analytics data. The value should be in
		 * `YYYY-MM-DD` format.
		 * required: true, pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}
		 * @param {number} startIndex An index of the first entity to retrieve. Use this parameter as a
		 * pagination mechanism along with the max-results parameter (one-based,
		 * inclusive).",
		 * minValue: 1
		 * @return {void} Successful response
		 */
		YoutubeAnalytics_reports_query(currency: string | null | undefined, dimensions: string | null | undefined, endDate: string | null | undefined, filters: string | null | undefined, ids: string | null | undefined, includeHistoricalChannelData: boolean | null | undefined, maxResults: number | null | undefined, metrics: string | null | undefined, sort: string | null | undefined, startDate: string | null | undefined, startIndex: number | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v2/reports?currency=' + (currency == null ? '' : encodeURIComponent(currency)) + '&dimensions=' + (dimensions == null ? '' : encodeURIComponent(dimensions)) + '&endDate=' + (endDate == null ? '' : encodeURIComponent(endDate)) + '&filters=' + (filters == null ? '' : encodeURIComponent(filters)) + '&ids=' + (ids == null ? '' : encodeURIComponent(ids)) + '&includeHistoricalChannelData=' + includeHistoricalChannelData + '&maxResults=' + maxResults + '&metrics=' + (metrics == null ? '' : encodeURIComponent(metrics)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&startDate=' + (startDate == null ? '' : encodeURIComponent(startDate)) + '&startIndex=' + startIndex, { observe: 'response', responseType: 'text' });
		}
	}

}

