import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Properties of the export operation's result. */
	export interface DatabaseVulnerabilityAssessmentScanExportProperties {

		/** Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx). */
		exportedReportLocation?: string | null;
	}

	/** Properties of the export operation's result. */
	export interface DatabaseVulnerabilityAssessmentScanExportPropertiesFormProperties {

		/** Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx). */
		exportedReportLocation: FormControl<string | null | undefined>,
	}
	export function CreateDatabaseVulnerabilityAssessmentScanExportPropertiesFormGroup() {
		return new FormGroup<DatabaseVulnerabilityAssessmentScanExportPropertiesFormProperties>({
			exportedReportLocation: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A database Vulnerability Assessment scan export resource. */
	export interface DatabaseVulnerabilityAssessmentScansExport {

		/** Properties of the export operation's result. */
		properties?: DatabaseVulnerabilityAssessmentScanExportProperties;
	}

	/** A database Vulnerability Assessment scan export resource. */
	export interface DatabaseVulnerabilityAssessmentScansExportFormProperties {
	}
	export function CreateDatabaseVulnerabilityAssessmentScansExportFormGroup() {
		return new FormGroup<DatabaseVulnerabilityAssessmentScansExportFormProperties>({
		});

	}


	/** Properties of a vulnerability assessment scan error. */
	export interface VulnerabilityAssessmentScanError {

		/** The error code. */
		code?: string | null;

		/** The error message. */
		message?: string | null;
	}

	/** Properties of a vulnerability assessment scan error. */
	export interface VulnerabilityAssessmentScanErrorFormProperties {

		/** The error code. */
		code: FormControl<string | null | undefined>,

		/** The error message. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVulnerabilityAssessmentScanErrorFormGroup() {
		return new FormGroup<VulnerabilityAssessmentScanErrorFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A vulnerability assessment scan record. */
	export interface VulnerabilityAssessmentScanRecord {

		/** Properties of a vulnerability assessment scan record. */
		properties?: VulnerabilityAssessmentScanRecordProperties;
	}

	/** A vulnerability assessment scan record. */
	export interface VulnerabilityAssessmentScanRecordFormProperties {
	}
	export function CreateVulnerabilityAssessmentScanRecordFormGroup() {
		return new FormGroup<VulnerabilityAssessmentScanRecordFormProperties>({
		});

	}


	/** Properties of a vulnerability assessment scan record. */
	export interface VulnerabilityAssessmentScanRecordProperties {

		/** The scan end time (UTC). */
		endTime?: Date | null;

		/** The scan errors. */
		errors?: Array<VulnerabilityAssessmentScanError>;

		/** The number of failed security checks. */
		numberOfFailedSecurityChecks?: number | null;

		/** The scan ID. */
		scanId?: string | null;

		/** The scan start time (UTC). */
		startTime?: Date | null;

		/** The scan status. */
		state?: VulnerabilityAssessmentScanRecordPropertiesState | null;

		/** The scan results storage container path. */
		storageContainerPath?: string | null;

		/** The scan trigger type. */
		triggerType?: VulnerabilityAssessmentScanRecordPropertiesTriggerType | null;
	}

	/** Properties of a vulnerability assessment scan record. */
	export interface VulnerabilityAssessmentScanRecordPropertiesFormProperties {

		/** The scan end time (UTC). */
		endTime: FormControl<Date | null | undefined>,

		/** The number of failed security checks. */
		numberOfFailedSecurityChecks: FormControl<number | null | undefined>,

		/** The scan ID. */
		scanId: FormControl<string | null | undefined>,

		/** The scan start time (UTC). */
		startTime: FormControl<Date | null | undefined>,

		/** The scan status. */
		state: FormControl<VulnerabilityAssessmentScanRecordPropertiesState | null | undefined>,

		/** The scan results storage container path. */
		storageContainerPath: FormControl<string | null | undefined>,

		/** The scan trigger type. */
		triggerType: FormControl<VulnerabilityAssessmentScanRecordPropertiesTriggerType | null | undefined>,
	}
	export function CreateVulnerabilityAssessmentScanRecordPropertiesFormGroup() {
		return new FormGroup<VulnerabilityAssessmentScanRecordPropertiesFormProperties>({
			endTime: new FormControl<Date | null | undefined>(undefined),
			numberOfFailedSecurityChecks: new FormControl<number | null | undefined>(undefined),
			scanId: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<VulnerabilityAssessmentScanRecordPropertiesState | null | undefined>(undefined),
			storageContainerPath: new FormControl<string | null | undefined>(undefined),
			triggerType: new FormControl<VulnerabilityAssessmentScanRecordPropertiesTriggerType | null | undefined>(undefined),
		});

	}

	export enum VulnerabilityAssessmentScanRecordPropertiesState { Passed = 0, Failed = 1, FailedToRun = 2, InProgress = 3 }

	export enum VulnerabilityAssessmentScanRecordPropertiesTriggerType { OnDemand = 0, Recurring = 1 }


	/** A list of vulnerability assessment scan records. */
	export interface VulnerabilityAssessmentScanRecordListResult {

		/** Link to retrieve next page of results. */
		nextLink?: string | null;

		/** Array of results. */
		value?: Array<VulnerabilityAssessmentScanRecord>;
	}

	/** A list of vulnerability assessment scan records. */
	export interface VulnerabilityAssessmentScanRecordListResultFormProperties {

		/** Link to retrieve next page of results. */
		nextLink: FormControl<string | null | undefined>,
	}
	export function CreateVulnerabilityAssessmentScanRecordListResultFormGroup() {
		return new FormGroup<VulnerabilityAssessmentScanRecordListResultFormProperties>({
			nextLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists the vulnerability assessment scans of a database.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance.
		 * @param {string} databaseName The name of the database.
		 * @param {ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {VulnerabilityAssessmentScanRecordListResult} Successfully retrieved the database vulnerability assessment scan records.
		 */
		ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, vulnerabilityAssessmentName: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName, subscriptionId: string, api_version: string): Observable<VulnerabilityAssessmentScanRecordListResult> {
			return this.http.get<VulnerabilityAssessmentScanRecordListResult>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/databases/' + (databaseName == null ? '' : encodeURIComponent(databaseName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '/scans&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Gets a vulnerability assessment scan record of a database.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance.
		 * @param {string} databaseName The name of the database.
		 * @param {ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} scanId The vulnerability assessment scan Id of the scan to retrieve.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {VulnerabilityAssessmentScanRecord} Successfully retrieved the database vulnerability assessment scan record.
		 */
		ManagedDatabaseVulnerabilityAssessmentScans_Get(resourceGroupName: string, managedInstanceName: string, databaseName: string, vulnerabilityAssessmentName: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName, scanId: string, subscriptionId: string, api_version: string): Observable<VulnerabilityAssessmentScanRecord> {
			return this.http.get<VulnerabilityAssessmentScanRecord>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/databases/' + (databaseName == null ? '' : encodeURIComponent(databaseName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '/scans/' + (scanId == null ? '' : encodeURIComponent(scanId)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Convert an existing scan result to a human readable format. If already exists nothing happens
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance.
		 * @param {string} databaseName The name of the scanned database.
		 * @param {ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} scanId The vulnerability assessment scan Id.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {DatabaseVulnerabilityAssessmentScansExport} Scan result was converted successfully.
		 */
		ManagedDatabaseVulnerabilityAssessmentScans_Export(resourceGroupName: string, managedInstanceName: string, databaseName: string, vulnerabilityAssessmentName: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName, scanId: string, subscriptionId: string, api_version: string): Observable<DatabaseVulnerabilityAssessmentScansExport> {
			return this.http.post<DatabaseVulnerabilityAssessmentScansExport>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/databases/' + (databaseName == null ? '' : encodeURIComponent(databaseName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '/scans/' + (scanId == null ? '' : encodeURIComponent(scanId)) + '/export&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, {});
		}

		/**
		 * Executes a Vulnerability Assessment database scan.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance.
		 * @param {string} databaseName The name of the database.
		 * @param {ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} scanId The vulnerability assessment scan Id of the scan to retrieve.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {void} Successfully executed a Vulnerability Assessment database scan.
		 */
		ManagedDatabaseVulnerabilityAssessmentScans_InitiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, vulnerabilityAssessmentName: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName, scanId: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/databases/' + (databaseName == null ? '' : encodeURIComponent(databaseName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '/scans/' + (scanId == null ? '' : encodeURIComponent(scanId)) + '/initiateScan&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}
	}

	export enum ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName { default = 0 }

}

