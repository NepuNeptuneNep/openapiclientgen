import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Describes the server vulnerability assessment details on a resource */
	export interface ServerVulnerabilityAssessment {

		/** describes ServerVulnerabilityAssessment properties. */
		properties?: ServerVulnerabilityAssessmentProperties;
	}

	/** Describes the server vulnerability assessment details on a resource */
	export interface ServerVulnerabilityAssessmentFormProperties {
	}
	export function CreateServerVulnerabilityAssessmentFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentFormProperties>({
		});

	}


	/** describes ServerVulnerabilityAssessment properties. */
	export interface ServerVulnerabilityAssessmentProperties {

		/** The provisioningState of the vulnerability assessment capability on the VM */
		provisioningState?: ServerVulnerabilityAssessmentPropertiesProvisioningState | null;
	}

	/** describes ServerVulnerabilityAssessment properties. */
	export interface ServerVulnerabilityAssessmentPropertiesFormProperties {

		/** The provisioningState of the vulnerability assessment capability on the VM */
		provisioningState: FormControl<ServerVulnerabilityAssessmentPropertiesProvisioningState | null | undefined>,
	}
	export function CreateServerVulnerabilityAssessmentPropertiesFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentPropertiesFormProperties>({
			provisioningState: new FormControl<ServerVulnerabilityAssessmentPropertiesProvisioningState | null | undefined>(undefined),
		});

	}

	export enum ServerVulnerabilityAssessmentPropertiesProvisioningState { Succeeded = 'Succeeded', Failed = 'Failed', Canceled = 'Canceled', Provisioning = 'Provisioning', Deprovisioning = 'Deprovisioning' }


	/** List of server vulnerability assessments */
	export interface ServerVulnerabilityAssessmentsList {
		value?: Array<ServerVulnerabilityAssessment>;
	}

	/** List of server vulnerability assessments */
	export interface ServerVulnerabilityAssessmentsListFormProperties {
	}
	export function CreateServerVulnerabilityAssessmentsListFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentsListFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Gets a list of server vulnerability assessment onboarding statuses on a given resource.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments
		 * @param {string} subscriptionId Azure subscription ID
		 * @param {string} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
		 * @param {string} resourceNamespace The Namespace of the resource.
		 * @param {string} resourceType The type of the resource.
		 * @param {string} resourceName Name of the resource.
		 * @param {string} api_version API version for the operation
		 * @return {ServerVulnerabilityAssessmentsList} OK
		 */
		ServerVulnerabilityAssessment_ListByExtendedResource(subscriptionId: string, resourceGroupName: string, resourceNamespace: string, resourceType: string, resourceName: string, api_version: string): Observable<ServerVulnerabilityAssessmentsList> {
			return this.http.get<ServerVulnerabilityAssessmentsList>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/' + (resourceNamespace == null ? '' : encodeURIComponent(resourceNamespace)) + '/' + (resourceType == null ? '' : encodeURIComponent(resourceType)) + '/' + (resourceName == null ? '' : encodeURIComponent(resourceName)) + '/providers/Microsoft.Security/serverVulnerabilityAssessments&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Gets a server vulnerability assessment onboarding statuses on a given resource.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}
		 * @param {string} subscriptionId Azure subscription ID
		 * @param {string} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
		 * @param {string} resourceNamespace The Namespace of the resource.
		 * @param {string} resourceType The type of the resource.
		 * @param {string} resourceName Name of the resource.
		 * @param {ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment} serverVulnerabilityAssessment ServerVulnerabilityAssessment status. only a 'default' value is supported.
		 * @param {string} api_version API version for the operation
		 * @return {ServerVulnerabilityAssessment} OK
		 */
		ServerVulnerabilityAssessment_Get(subscriptionId: string, resourceGroupName: string, resourceNamespace: string, resourceType: string, resourceName: string, serverVulnerabilityAssessment: ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment, api_version: string): Observable<ServerVulnerabilityAssessment> {
			return this.http.get<ServerVulnerabilityAssessment>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/' + (resourceNamespace == null ? '' : encodeURIComponent(resourceNamespace)) + '/' + (resourceType == null ? '' : encodeURIComponent(resourceType)) + '/' + (resourceName == null ? '' : encodeURIComponent(resourceName)) + '/providers/Microsoft.Security/serverVulnerabilityAssessments/' + serverVulnerabilityAssessment + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Creating a server vulnerability assessment on a resource, which will onboard a resource for having a vulnerability assessment on it
		 * Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}
		 * @param {string} subscriptionId Azure subscription ID
		 * @param {string} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
		 * @param {string} resourceNamespace The Namespace of the resource.
		 * @param {string} resourceType The type of the resource.
		 * @param {string} resourceName Name of the resource.
		 * @param {ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment} serverVulnerabilityAssessment ServerVulnerabilityAssessment status. only a 'default' value is supported.
		 * @param {string} api_version API version for the operation
		 * @return {void} 
		 */
		ServerVulnerabilityAssessment_CreateOrUpdate(subscriptionId: string, resourceGroupName: string, resourceNamespace: string, resourceType: string, resourceName: string, serverVulnerabilityAssessment: ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment, api_version: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/' + (resourceNamespace == null ? '' : encodeURIComponent(resourceNamespace)) + '/' + (resourceType == null ? '' : encodeURIComponent(resourceType)) + '/' + (resourceName == null ? '' : encodeURIComponent(resourceName)) + '/providers/Microsoft.Security/serverVulnerabilityAssessments/' + serverVulnerabilityAssessment + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Removing server vulnerability assessment from a resource.
		 * Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}
		 * @param {string} subscriptionId Azure subscription ID
		 * @param {string} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
		 * @param {string} resourceNamespace The Namespace of the resource.
		 * @param {string} resourceType The type of the resource.
		 * @param {string} resourceName Name of the resource.
		 * @param {ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment} serverVulnerabilityAssessment ServerVulnerabilityAssessment status. only a 'default' value is supported.
		 * @param {string} api_version API version for the operation
		 * @return {void} OK
		 */
		ServerVulnerabilityAssessment_Delete(subscriptionId: string, resourceGroupName: string, resourceNamespace: string, resourceType: string, resourceName: string, serverVulnerabilityAssessment: ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment, api_version: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/' + (resourceNamespace == null ? '' : encodeURIComponent(resourceNamespace)) + '/' + (resourceType == null ? '' : encodeURIComponent(resourceType)) + '/' + (resourceName == null ? '' : encodeURIComponent(resourceName)) + '/providers/Microsoft.Security/serverVulnerabilityAssessments/' + serverVulnerabilityAssessment + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), { observe: 'response', responseType: 'text' });
		}
	}

	export enum ServerVulnerabilityAssessment_GetServerVulnerabilityAssessment { default = 'default' }

}

