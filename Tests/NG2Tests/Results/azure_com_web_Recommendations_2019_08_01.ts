import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Represents a recommendation result generated by the recommendation engine. */
	export interface Recommendation {

		/** Recommendation resource specific properties */
		properties?: any;
	}

	/** Represents a recommendation result generated by the recommendation engine. */
	export interface RecommendationFormProperties {

		/** Recommendation resource specific properties */
		properties: FormControl<any | null | undefined>,
	}
	export function CreateRecommendationFormGroup() {
		return new FormGroup<RecommendationFormProperties>({
			properties: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** Collection of recommendations. */
	export interface RecommendationCollection {

		/** Link to next page of resources. */
		nextLink?: string | null;

		/**
		 * Collection of resources.
		 * Required
		 */
		value: Array<Recommendation>;
	}

	/** Collection of recommendations. */
	export interface RecommendationCollectionFormProperties {

		/** Link to next page of resources. */
		nextLink: FormControl<string | null | undefined>,
	}
	export function CreateRecommendationCollectionFormGroup() {
		return new FormGroup<RecommendationCollectionFormProperties>({
			nextLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a recommendation rule that the recommendation engine can perform. */
	export interface RecommendationRule {

		/** RecommendationRule resource specific properties */
		properties?: any;
	}

	/** Represents a recommendation rule that the recommendation engine can perform. */
	export interface RecommendationRuleFormProperties {

		/** RecommendationRule resource specific properties */
		properties: FormControl<any | null | undefined>,
	}
	export function CreateRecommendationRuleFormGroup() {
		return new FormGroup<RecommendationRuleFormProperties>({
			properties: new FormControl<any | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * List all recommendations for a subscription.
		 * Description for List all recommendations for a subscription.
		 * Get subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
		 * @param {boolean} featured Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
		 * @param {string} filter Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationCollection} OK
		 */
		Recommendations_List(featured: boolean | null | undefined, filter: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationCollection> {
			return this.http.get<RecommendationCollection>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/providers/Microsoft.Web/recommendations?featured=' + featured + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Reset all recommendation opt-out settings for a subscription.
		 * Description for Reset all recommendation opt-out settings for a subscription.
		 * Post subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} 
		 */
		Recommendations_ResetAllFilters(subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/providers/Microsoft.Web/recommendations/reset&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Disables the specified rule so it will not apply to a subscription in the future.
		 * Description for Disables the specified rule so it will not apply to a subscription in the future.
		 * Post subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
		 * @param {string} name Rule name
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} Successfully disabled recommendations.
		 */
		Recommendations_DisableRecommendationForSubscription(name: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/providers/Microsoft.Web/recommendations/' + (name == null ? '' : encodeURIComponent(name)) + '/disable&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get past recommendations for an app, optionally specified by the time range.
		 * Description for Get past recommendations for an app, optionally specified by the time range.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} hostingEnvironmentName Name of the hosting environment.
		 * @param {boolean} expiredOnly Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
		 * @param {string} filter Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationCollection} OK
		 */
		Recommendations_ListHistoryForHostingEnvironment(resourceGroupName: string, hostingEnvironmentName: string, expiredOnly: boolean | null | undefined, filter: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationCollection> {
			return this.http.get<RecommendationCollection>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendationHistory&expiredOnly=' + expiredOnly + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Get all recommendations for an app.
		 * Description for Get all recommendations for an app.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} hostingEnvironmentName Name of the app.
		 * @param {boolean} featured Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
		 * @param {string} filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationCollection} OK
		 */
		Recommendations_ListRecommendedRulesForHostingEnvironment(resourceGroupName: string, hostingEnvironmentName: string, featured: boolean | null | undefined, filter: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationCollection> {
			return this.http.get<RecommendationCollection>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendations&featured=' + featured + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Disable all recommendations for an app.
		 * Description for Disable all recommendations for an app.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} environmentName Name of the app.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} 
		 */
		Recommendations_DisableAllForHostingEnvironment(resourceGroupName: string, environmentName: string, hostingEnvironmentName: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendations/disable&environmentName=' + (environmentName == null ? '' : encodeURIComponent(environmentName)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Reset all recommendation opt-out settings for an app.
		 * Description for Reset all recommendation opt-out settings for an app.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} environmentName Name of the app.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} 
		 */
		Recommendations_ResetAllFiltersForHostingEnvironment(resourceGroupName: string, environmentName: string, hostingEnvironmentName: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendations/reset&environmentName=' + (environmentName == null ? '' : encodeURIComponent(environmentName)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a recommendation rule for an app.
		 * Description for Get a recommendation rule for an app.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} hostingEnvironmentName Name of the hosting environment.
		 * @param {string} name Name of the recommendation.
		 * @param {boolean} updateSeen Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
		 * @param {string} recommendationId The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationRule} OK
		 */
		Recommendations_GetRuleDetailsByHostingEnvironment(resourceGroupName: string, hostingEnvironmentName: string, name: string, updateSeen: boolean | null | undefined, recommendationId: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationRule> {
			return this.http.get<RecommendationRule>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendations/' + (name == null ? '' : encodeURIComponent(name)) + '&updateSeen=' + updateSeen + '&recommendationId=' + (recommendationId == null ? '' : encodeURIComponent(recommendationId)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Disables the specific rule for a web site permanently.
		 * Description for Disables the specific rule for a web site permanently.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} environmentName Site name
		 * @param {string} name Rule name
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} Successfully disabled recommendations.
		 */
		Recommendations_DisableRecommendationForHostingEnvironment(resourceGroupName: string, environmentName: string, name: string, hostingEnvironmentName: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/hostingEnvironments/' + (hostingEnvironmentName == null ? '' : encodeURIComponent(hostingEnvironmentName)) + '/recommendations/' + (name == null ? '' : encodeURIComponent(name)) + '/disable&environmentName=' + (environmentName == null ? '' : encodeURIComponent(environmentName)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get past recommendations for an app, optionally specified by the time range.
		 * Description for Get past recommendations for an app, optionally specified by the time range.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Name of the app.
		 * @param {boolean} expiredOnly Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
		 * @param {string} filter Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationCollection} OK
		 */
		Recommendations_ListHistoryForWebApp(resourceGroupName: string, siteName: string, expiredOnly: boolean | null | undefined, filter: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationCollection> {
			return this.http.get<RecommendationCollection>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendationHistory&expiredOnly=' + expiredOnly + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Get all recommendations for an app.
		 * Description for Get all recommendations for an app.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Name of the app.
		 * @param {boolean} featured Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
		 * @param {string} filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationCollection} OK
		 */
		Recommendations_ListRecommendedRulesForWebApp(resourceGroupName: string, siteName: string, featured: boolean | null | undefined, filter: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationCollection> {
			return this.http.get<RecommendationCollection>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendations&featured=' + featured + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Disable all recommendations for an app.
		 * Description for Disable all recommendations for an app.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Name of the app.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} 
		 */
		Recommendations_DisableAllForWebApp(resourceGroupName: string, siteName: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendations/disable&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Reset all recommendation opt-out settings for an app.
		 * Description for Reset all recommendation opt-out settings for an app.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Name of the app.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} 
		 */
		Recommendations_ResetAllFiltersForWebApp(resourceGroupName: string, siteName: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendations/reset&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a recommendation rule for an app.
		 * Description for Get a recommendation rule for an app.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Name of the app.
		 * @param {string} name Name of the recommendation.
		 * @param {boolean} updateSeen Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
		 * @param {string} recommendationId The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {RecommendationRule} OK
		 */
		Recommendations_GetRuleDetailsByWebApp(resourceGroupName: string, siteName: string, name: string, updateSeen: boolean | null | undefined, recommendationId: string | null | undefined, subscriptionId: string, api_version: string): Observable<RecommendationRule> {
			return this.http.get<RecommendationRule>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendations/' + (name == null ? '' : encodeURIComponent(name)) + '&updateSeen=' + updateSeen + '&recommendationId=' + (recommendationId == null ? '' : encodeURIComponent(recommendationId)) + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Disables the specific rule for a web site permanently.
		 * Description for Disables the specific rule for a web site permanently.
		 * Post subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable
		 * @param {string} resourceGroupName Name of the resource group to which the resource belongs.
		 *     Min length: 1    Max length: 90
		 * @param {string} siteName Site name
		 * @param {string} name Rule name
		 * @param {string} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
		 * @param {string} api_version API Version
		 * @return {void} Successfully disabled recommendations.
		 */
		Recommendations_DisableRecommendationForSite(resourceGroupName: string, siteName: string, name: string, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Web/sites/' + (siteName == null ? '' : encodeURIComponent(siteName)) + '/recommendations/' + (name == null ? '' : encodeURIComponent(name)) + '/disable&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), null, { observe: 'response', responseType: 'text' });
		}
	}

}

