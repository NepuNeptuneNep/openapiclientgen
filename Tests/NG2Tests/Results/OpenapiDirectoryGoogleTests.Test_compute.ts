import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
export namespace MyNS {

	/** A specification of the type and number of accelerator cards attached to the instance. */
	export interface AcceleratorConfig {

		/** The number of the guest accelerator cards exposed to this instance. */
		acceleratorCount?: number | null;

		/** Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types. */
		acceleratorType?: string | null;
	}


	/**
	 * Represents an Accelerator Type resource.
	 * Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine. (== resource_for {$api_version}.acceleratorTypes ==)
	 */
	export interface AcceleratorType {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types. */
		kind?: string | null;

		/** [Output Only] Maximum accelerator cards allowed per instance. */
		maximumCardsPerInstance?: number | null;

		/**
		 * [Output Only] Name of the resource.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}


	/** Deprecation status for a public resource. */
	export interface DeprecationStatus {

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it. */
		deleted?: string | null;

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it. */
		deprecated?: string | null;

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it. */
		obsolete?: string | null;

		/** The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource. */
		replacement?: string | null;

		/** The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error. */
		state?: DeprecationStatusState | null;
	}

	export enum DeprecationStatusState { ACTIVE = 0, DELETED = 1, DEPRECATED = 2, OBSOLETE = 3 }

	export interface AcceleratorTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AcceleratorTypesScopedList resources. */
		items?: {[id: string]: AcceleratorTypesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AcceleratorTypeAggregatedListWarning | null;
	}

	export interface AcceleratorTypesScopedList {

		/** [Output Only] A list of accelerator types contained in this scope. */
		acceleratorTypes?: Array<AcceleratorType> | null;

		/** [Output Only] An informational warning that appears when the accelerator types list is empty. */
		warning?: AcceleratorTypesScopedListWarning | null;
	}

	export interface AcceleratorTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AcceleratorTypesScopedListWarningData?: Array<AcceleratorTypesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export enum AcceleratorTypesScopedListWarningCode { CLEANUP_FAILED = 0, DEPRECATED_RESOURCE_USED = 1, DEPRECATED_TYPE_USED = 2, DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 3, EXPERIMENTAL_TYPE_USED = 4, EXTERNAL_API_WARNING = 5, FIELD_VALUE_OVERRIDEN = 6, INJECTED_KERNELS_DEPRECATED = 7, MISSING_TYPE_DEPENDENCY = 8, NEXT_HOP_ADDRESS_NOT_ASSIGNED = 9, NEXT_HOP_CANNOT_IP_FORWARD = 10, NEXT_HOP_INSTANCE_NOT_FOUND = 11, NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 12, NEXT_HOP_NOT_RUNNING = 13, NOT_CRITICAL_ERROR = 14, NO_RESULTS_ON_PAGE = 15, REQUIRED_TOS_AGREEMENT = 16, RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 17, RESOURCE_NOT_DELETED = 18, SCHEMA_VALIDATION_IGNORED = 19, SINGLE_INSTANCE_PROPERTY_TEMPLATE = 20, UNDECLARED_PROPERTIES = 21, UNREACHABLE = 22 }

	export interface AcceleratorTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface AcceleratorTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AcceleratorTypeAggregatedListWarningData?: Array<AcceleratorTypeAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AcceleratorTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of accelerator types. */
	export interface AcceleratorTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AcceleratorType resources. */
		items?: Array<AcceleratorType> | null;

		/** [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AcceleratorTypeListWarning | null;
	}

	export interface AcceleratorTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AcceleratorTypeListWarningData?: Array<AcceleratorTypeListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AcceleratorTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** An access configuration attached to an instance's network interface. Only one access config per instance is supported. */
	export interface AccessConfig {

		/** [Output Only] Type of the resource. Always compute#accessConfig for access configs. */
		kind?: string | null;

		/** The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. */
		name?: string | null;

		/** An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance. */
		natIP?: string | null;

		/**
		 * This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.
		 * If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.
		 * If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
		 */
		networkTier?: AccessConfigNetworkTier | null;

		/** The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled. */
		publicPtrDomainName?: string | null;

		/** Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. */
		setPublicPtr?: boolean | null;

		/** The type of configuration. The default and only option is ONE_TO_ONE_NAT. */
		type?: AccessConfigType | null;
	}

	export enum AccessConfigNetworkTier { PREMIUM = 0, STANDARD = 1 }

	export enum AccessConfigType { ONE_TO_ONE_NAT = 0 }


	/**
	 * Use global external addresses for GFE-based external HTTP(S) load balancers in Premium Tier.
	 * Use global internal addresses for reserved peering network range.
	 * Use regional external addresses for the following resources:
	 * - External IP addresses for VM instances - Regional external forwarding rules - Cloud NAT external IP addresses - GFE based LBs in Standard Tier - Network LBs in Premium or Standard Tier - Cloud VPN gateways (both Classic and HA)
	 * Use regional internal IP addresses for subnet IP ranges (primary and secondary). This includes:
	 * - Internal IP addresses for VM instances - Alias IP ranges of VM instances (/32 only) - Regional internal forwarding rules - Internal TCP/UDP load balancer addresses - Internal HTTP(S) load balancer addresses - Cloud DNS inbound forwarding IP addresses
	 * For more information, read reserved IP address.
	 * (== resource_for {$api_version}.addresses ==) (== resource_for {$api_version}.globalAddresses ==)
	 */
	export interface Address {

		/** The static IP address represented by this resource. */
		address?: string | null;

		/** The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL. */
		addressType?: AddressAddressType | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address. */
		ipVersion?: AddressIpVersion | null;

		/** [Output Only] Type of the resource. Always compute#address for addresses. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose. */
		network?: string | null;

		/**
		 * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
		 * If this field is not specified, it is assumed to be PREMIUM.
		 */
		networkTier?: AccessConfigNetworkTier | null;

		/** The prefix length if the resource reprensents an IP range. */
		prefixLength?: number | null;

		/**
		 * The purpose of this resource, which can be one of the following values:
		 * - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
		 * - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
		 * - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
		 * - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
		 */
		purpose?: AddressPurpose | null;

		/** [Output Only] The URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available. */
		status?: AddressStatus | null;

		/** The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose. */
		subnetwork?: string | null;

		/** [Output Only] The URLs of the resources that are using this address. */
		users?: Array<string> | null;
	}

	export enum AddressAddressType { EXTERNAL = 0, INTERNAL = 1, UNSPECIFIED_TYPE = 2 }

	export enum AddressIpVersion { IPV4 = 0, IPV6 = 1, UNSPECIFIED_VERSION = 2 }

	export enum AddressPurpose { DNS_RESOLVER = 0, GCE_ENDPOINT = 1, NAT_AUTO = 2, VPC_PEERING = 3 }

	export enum AddressStatus { IN_USE = 0, RESERVED = 1, RESERVING = 2 }

	export interface AddressAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AddressesScopedList resources. */
		items?: {[id: string]: AddressesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AddressAggregatedListWarning | null;
	}

	export interface AddressesScopedList {

		/** [Output Only] A list of addresses contained in this scope. */
		addresses?: Array<Address> | null;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: AddressesScopedListWarning | null;
	}

	export interface AddressesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AddressesScopedListWarningData?: Array<AddressesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AddressesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface AddressAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AddressAggregatedListWarningData?: Array<AddressAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AddressAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of addresses. */
	export interface AddressList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Address resources. */
		items?: Array<Address> | null;

		/** [Output Only] Type of resource. Always compute#addressList for lists of addresses. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AddressListWarning | null;
	}

	export interface AddressListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AddressListWarningData?: Array<AddressListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AddressListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** An alias IP range attached to an instance's network interface. */
	export interface AliasIpRange {

		/** The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24). */
		ipCidrRange?: string | null;

		/** The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used. */
		subnetworkRangeName?: string | null;
	}

	export interface AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {

		/** Specifies the size of the disk in base-2 GB. */
		diskSizeGb?: string | null;

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. */
		interface?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null;
	}

	export enum AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface { NVME = 0, SCSI = 1 }


	/** Properties of the SKU instances being reserved. */
	export interface AllocationSpecificSKUAllocationReservedInstanceProperties {

		/** Specifies accelerator type and count. */
		guestAccelerators?: Array<AcceleratorConfig> | null;

		/** Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd. */
		localSsds?: Array<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk> | null;

		/** Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern. */
		machineType?: string | null;

		/** Minimum cpu platform the reservation. */
		minCpuPlatform?: string | null;
	}


	/** This reservation type allows to pre allocate specific instance configuration. */
	export interface AllocationSpecificSKUReservation {

		/** Specifies the number of resources that are allocated. */
		count?: string | null;

		/** [Output Only] Indicates how many instances are in use. */
		inUseCount?: string | null;

		/** Properties of the SKU instances being reserved. */
		instanceProperties?: AllocationSpecificSKUAllocationReservedInstanceProperties | null;
	}


	/** An instance-attached disk resource. */
	export interface AttachedDisk {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete?: boolean | null;

		/** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
		boot?: boolean | null;

		/**
		 * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance.
		 * If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
		 */
		deviceName?: string | null;

		/** Represents a customer-supplied encryption key */
		diskEncryptionKey?: CustomerEncryptionKey | null;

		/** The size of the disk in GB. */
		diskSizeGb?: string | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature> | null;

		/** [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number. */
		index?: number | null;

		/**
		 * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.
		 * This property is mutually exclusive with the source property; you can only define one or the other, but not both.
		 */
		initializeParams?: AttachedDiskInitializeParams | null;

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. */
		interface?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null;

		/** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
		kind?: string | null;

		/** [Output Only] Any valid publicly visible licenses. */
		licenses?: Array<string> | null;

		/** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
		mode?: AttachedDiskMode | null;

		/** Initial State for shielded instance, these are public keys which are safe to store in public */
		shieldedInstanceInitialState?: InitialStateConfig | null;

		/**
		 * Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.
		 * If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks.
		 * Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
		 */
		source?: string | null;

		/** Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT. */
		type?: AttachedDiskType | null;
	}


	/** Represents a customer-supplied encryption key */
	export interface CustomerEncryptionKey {

		/** The name of the encryption key that is stored in Google Cloud KMS. */
		kmsKeyName?: string | null;

		/** The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. */
		kmsKeyServiceAccount?: string | null;

		/** Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. */
		rawKey?: string | null;

		/** [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource. */
		sha256?: string | null;
	}


	/** Guest OS features. */
	export interface GuestOsFeature {

		/** The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options. */
		type?: GuestOsFeatureType | null;
	}

	export enum GuestOsFeatureType { FEATURE_TYPE_UNSPECIFIED = 0, MULTI_IP_SUBNET = 1, SECURE_BOOT = 2, UEFI_COMPATIBLE = 3, VIRTIO_SCSI_MULTIQUEUE = 4, WINDOWS = 5 }


	/**
	 * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.
	 * This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	 */
	export interface AttachedDiskInitializeParams {

		/** An optional description. Provide this property when creating the disk. */
		description?: string | null;

		/** Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created. */
		diskName?: string | null;

		/** Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB. */
		diskSizeGb?: string | null;

		/**
		 * Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example:
		 * https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/pd-standard
		 * Other values include pd-ssd and local-ssd. If you define this field, you can provide either the full or partial URL. For example, the following are valid values:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/diskType
		 * - projects/project/zones/zone/diskTypes/diskType
		 * - zones/zone/diskTypes/diskType  Note that for InstanceTemplate, this is the name of the disk type, not URL.
		 */
		diskType?: string | null;

		/** Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks. */
		labels?: {[id: string]: string } | null;

		/** Specifies which action to take on instance update with this disk. Default is to use the existing disk. */
		onUpdateAction?: AttachedDiskInitializeParamsOnUpdateAction | null;

		/** Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name. */
		resourcePolicies?: Array<string> | null;

		/**
		 * The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD.
		 * To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image:
		 * projects/debian-cloud/global/images/family/debian-9
		 * Alternatively, use a specific version of a public operating system image:
		 * projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD
		 * To create a disk with a custom image that you created, specify the image name in the following format:
		 * global/images/my-custom-image
		 * You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name:
		 * global/images/family/my-image-family
		 * If the source image is deleted later, this field will not be set.
		 */
		sourceImage?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceImageEncryptionKey?: CustomerEncryptionKey | null;

		/**
		 * The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD.
		 * To create a disk with a snapshot that you created, specify the snapshot name in the following format:
		 * global/snapshots/my-backup
		 * If the source snapshot is deleted later, this field will not be set.
		 */
		sourceSnapshot?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey | null;
	}

	export enum AttachedDiskInitializeParamsOnUpdateAction { RECREATE_DISK = 0, RECREATE_DISK_IF_SOURCE_CHANGED = 1, USE_EXISTING_DISK = 2 }

	export enum AttachedDiskMode { READ_ONLY = 0, READ_WRITE = 1 }


	/** Initial State for shielded instance, these are public keys which are safe to store in public */
	export interface InitialStateConfig {

		/** The Key Database (db). */
		dbs?: Array<FileContentBuffer> | null;

		/** The forbidden key database (dbx). */
		dbxs?: Array<FileContentBuffer> | null;

		/** The Key Exchange Key (KEK). */
		keks?: Array<FileContentBuffer> | null;
		pk?: FileContentBuffer | null;
	}

	export interface FileContentBuffer {

		/** The raw content in the secure keys file. */
		content?: string | null;
		fileType?: FileContentBufferFileType | null;
	}

	export enum FileContentBufferFileType { BIN = 0, UNDEFINED = 1, X509 = 2 }

	export enum AttachedDiskType { PERSISTENT = 0, SCRATCH = 1 }


	/**
	 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.
	 * If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.
	 * Example Policy with multiple AuditConfigs:
	 * { "audit_configs": [ { "service": "allServices" "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE", }, { "log_type": "ADMIN_READ", } ] }, { "service": "sampleservice.googleapis.com" "audit_log_configs": [ { "log_type": "DATA_READ", }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] }
	 * For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
	 */
	export interface AuditConfig {

		/** The configuration for logging of each type of permission. */
		auditLogConfigs?: Array<AuditLogConfig> | null;
		exemptedMembers?: Array<string> | null;

		/** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
		service?: string | null;
	}


	/**
	 * Provides the configuration for logging a type of permissions. Example:
	 * { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE", } ] }
	 * This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	 */
	export interface AuditLogConfig {

		/** Specifies the identities that do not cause logging for this type of permission. Follows the same format of [Binding.members][]. */
		exemptedMembers?: Array<string> | null;
		ignoreChildExemptions?: boolean | null;

		/** The log type that this config enables. */
		logType?: AuditLogConfigLogType | null;
	}

	export enum AuditLogConfigLogType { ADMIN_READ = 0, DATA_READ = 1, DATA_WRITE = 2, LOG_TYPE_UNSPECIFIED = 3 }


	/** Authorization-related information used by Cloud Audit Logging. */
	export interface AuthorizationLoggingOptions {

		/** The type of the permission that was checked. */
		permissionType?: AuthorizationLoggingOptionsPermissionType | null;
	}

	export enum AuthorizationLoggingOptionsPermissionType { ADMIN_READ = 0, ADMIN_WRITE = 1, DATA_READ = 2, DATA_WRITE = 3, PERMISSION_TYPE_UNSPECIFIED = 4 }


	/**
	 * Represents an Autoscaler resource.
	 * Google Compute Engine has two Autoscaler resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/autoscalers) * [Regional](/compute/docs/reference/rest/{$api_version}/regionAutoscalers)
	 * Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances.
	 * For zonal managed instance groups resource, use the autoscaler resource.
	 * For regional managed instance groups, use the regionAutoscalers resource. (== resource_for {$api_version}.autoscalers ==) (== resource_for {$api_version}.regionAutoscalers ==)
	 */
	export interface Autoscaler {

		/** Cloud Autoscaler policy. */
		autoscalingPolicy?: AutoscalingPolicy | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#autoscaler for autoscalers. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates recommended MIG size even when autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to the existing managed instance group or autoscaler did not generate its prediction. */
		recommendedSize?: number | null;

		/** [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope). */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * [Output Only] The status of the autoscaler configuration. Current set of possible values:
		 * - PENDING: Autoscaler backend hasn't read new/updated configuration.
		 * - DELETING: Configuration is being deleted.
		 * - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field.
		 * - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future.
		 */
		status?: AutoscalerStatus | null;

		/** [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter. */
		statusDetails?: Array<AutoscalerStatusDetails> | null;

		/** URL of the managed instance group that this autoscaler will scale. */
		target?: string | null;

		/** [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope). */
		zone?: string | null;
	}


	/** Cloud Autoscaler policy. */
	export interface AutoscalingPolicy {

		/**
		 * The number of seconds that the autoscaler should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds.
		 * Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
		 */
		coolDownPeriodSec?: number | null;

		/** CPU utilization policy. */
		cpuUtilization?: AutoscalingPolicyCpuUtilization | null;

		/** Configuration parameters of autoscaling based on a custom metric. */
		customMetricUtilizations?: Array<AutoscalingPolicyCustomMetricUtilization> | null;

		/** Configuration parameters of autoscaling based on load balancing. */
		loadBalancingUtilization?: AutoscalingPolicyLoadBalancingUtilization | null;

		/** The maximum number of instances that the autoscaler can scale up to. This is required when creating or updating an autoscaler. The maximum number of replicas should not be lower than minimal number of replicas. */
		maxNumReplicas?: number | null;

		/** The minimum number of replicas that the autoscaler can scale down to. This cannot be less than 0. If not provided, autoscaler will choose a default value depending on maximum number of instances allowed. */
		minNumReplicas?: number | null;

		/** Defines operating mode for this policy. */
		mode?: AutoscalingPolicyMode | null;
	}


	/** CPU utilization policy. */
	export interface AutoscalingPolicyCpuUtilization {

		/**
		 * The target CPU utilization that the autoscaler should maintain. Must be a float value in the range (0, 1]. If not specified, the default is 0.6.
		 * If the CPU level is below the target utilization, the autoscaler scales down the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization.
		 * If the average CPU is above the target utilization, the autoscaler scales up until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
		 */
		utilizationTarget?: number | null;
	}


	/** Custom utilization metric policy. */
	export interface AutoscalingPolicyCustomMetricUtilization {

		/**
		 * The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.
		 * The metric must have a value type of INT64 or DOUBLE.
		 */
		metric?: string | null;

		/**
		 * The target value of the metric that autoscaler should maintain. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.
		 * For example, a good metric to use as a utilization_target is compute.googleapis.com/instance/network/received_bytes_count. The autoscaler will work to keep this value constant for each of the instances.
		 */
		utilizationTarget?: number | null;

		/** Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE. */
		utilizationTargetType?: AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType | null;
	}

	export enum AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType { DELTA_PER_MINUTE = 0, DELTA_PER_SECOND = 1, GAUGE = 2 }


	/** Configuration parameters of autoscaling based on load balancing. */
	export interface AutoscalingPolicyLoadBalancingUtilization {

		/** Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that autoscaler should maintain. Must be a positive float value. If not defined, the default is 0.8. */
		utilizationTarget?: number | null;
	}

	export enum AutoscalingPolicyMode { OFF = 0, ON = 1, ONLY_UP = 2 }

	export enum AutoscalerStatus { ACTIVE = 0, DELETING = 1, ERROR = 2, PENDING = 3 }

	export interface AutoscalerStatusDetails {

		/** The status message. */
		message?: string | null;

		/**
		 * The type of error, warning, or notice returned. Current set of possible values:
		 * - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state).
		 * - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group.
		 * - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas.
		 * - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling.
		 * - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels.
		 * - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group.
		 * - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling.
		 * - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer.
		 * - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved.
		 * - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only up" mode. The autoscaler can add instances but not remove any.
		 * - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it.
		 * - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances.
		 * - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region.
		 * - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist.
		 * - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate.
		 * - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.  New values might be added in the future. Some of the values might not be available in all API versions.
		 */
		type?: AutoscalerStatusDetailsType | null;
	}

	export enum AutoscalerStatusDetailsType { ALL_INSTANCES_UNHEALTHY = 0, BACKEND_SERVICE_DOES_NOT_EXIST = 1, CAPPED_AT_MAX_NUM_REPLICAS = 2, CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE = 3, CUSTOM_METRIC_INVALID = 4, MIN_EQUALS_MAX = 5, MISSING_CUSTOM_METRIC_DATA_POINTS = 6, MISSING_LOAD_BALANCING_DATA_POINTS = 7, MODE_OFF = 8, MODE_ONLY_UP = 9, MORE_THAN_ONE_BACKEND_SERVICE = 10, NOT_ENOUGH_QUOTA_AVAILABLE = 11, REGION_RESOURCE_STOCKOUT = 12, SCALING_TARGET_DOES_NOT_EXIST = 13, UNKNOWN = 14, UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION = 15, ZONE_RESOURCE_STOCKOUT = 16 }

	export interface AutoscalerAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AutoscalersScopedList resources. */
		items?: {[id: string]: AutoscalersScopedList } | null;

		/** [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AutoscalerAggregatedListWarning | null;
	}

	export interface AutoscalersScopedList {

		/** [Output Only] A list of autoscalers contained in this scope. */
		autoscalers?: Array<Autoscaler> | null;

		/** [Output Only] Informational warning which replaces the list of autoscalers when the list is empty. */
		warning?: AutoscalersScopedListWarning | null;
	}

	export interface AutoscalersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AutoscalersScopedListWarningData?: Array<AutoscalersScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AutoscalersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface AutoscalerAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AutoscalerAggregatedListWarningData?: Array<AutoscalerAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AutoscalerAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Autoscaler resources. */
	export interface AutoscalerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Autoscaler resources. */
		items?: Array<Autoscaler> | null;

		/** [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AutoscalerListWarning | null;
	}

	export interface AutoscalerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		AutoscalerListWarningData?: Array<AutoscalerListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface AutoscalerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Message containing information of one individual backend. */
	export interface Backend {

		/**
		 * Specifies the balancing mode for the backend.
		 * When choosing a balancing mode, you need to consider the loadBalancingScheme, and protocol for the backend service, as well as the type of backend (instance group or NEG).
		 * - If the load balancing mode is CONNECTION, then the load is spread based on how many concurrent connections the backend can handle.
		 * You can use the CONNECTION balancing mode if the protocol for the backend service is SSL, TCP, or UDP.
		 * If the loadBalancingScheme for the backend service is EXTERNAL (SSL Proxy and TCP Proxy load balancers), you must also specify exactly one of the following parameters: maxConnections (except for regional managed instance groups), maxConnectionsPerInstance, or maxConnectionsPerEndpoint.
		 * If the loadBalancingScheme for the backend service is INTERNAL (internal TCP/UDP load balancers), you cannot specify any additional parameters.
		 * - If the load balancing mode is RATE, the load is spread based on the rate of HTTP requests per second (RPS).
		 * You can use the RATE balancing mode if the protocol for the backend service is HTTP or HTTPS. You must specify exactly one of the following parameters: maxRate (except for regional managed instance groups), maxRatePerInstance, or maxRatePerEndpoint.
		 * - If the load balancing mode is UTILIZATION, the load is spread based on the backend utilization of instances in an instance group.
		 * You can use the UTILIZATION balancing mode if the loadBalancingScheme of the backend service is EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED and the backends are instance groups. There are no restrictions on the backend service protocol.
		 */
		balancingMode?: BackendBalancingMode | null;

		/**
		 * A multiplier applied to the group's maximum servicing capacity (based on UTILIZATION, RATE or CONNECTION). Default value is 1, which means the group will serve up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available Capacity. Valid range is [0.0,1.0].
		 * This cannot be used for internal load balancing.
		 */
		capacityScaler?: number | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService. */
		failover?: boolean | null;

		/**
		 * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. The type of backend that a backend service supports depends on the backend service's loadBalancingScheme.
		 * - When the loadBalancingScheme for the backend service is EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, the backend can be either an instance group or a NEG. The backends on the backend service must be either all instance groups or all NEGs. You cannot mix instance group and NEG backends on the same backend service.
		 * - When the loadBalancingScheme for the backend service is INTERNAL, the backend must be an instance group in the same region as the backend service. NEGs are not supported.
		 * You must use the fully-qualified URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
		 */
		group?: string | null;

		/**
		 * Defines a target maximum number of simultaneous connections that the backend can handle. Valid for network endpoint group and instance group backends (except for regional managed instance groups). If the backend's balancingMode is UTILIZATION, this is an optional parameter. If the backend's balancingMode is CONNECTION, and backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnectionsPerInstance, or maxConnectionsPerEndpoint.
		 * Not available if the backend's balancingMode is RATE. If the loadBalancingScheme is INTERNAL, then maxConnections is not supported, even though the backend requires a balancing mode of CONNECTION.
		 */
		maxConnections?: number | null;

		/**
		 * Defines a target maximum number of simultaneous connections for an endpoint of a NEG. This is multiplied by the number of endpoints in the NEG to implicitly calculate a maximum number of target maximum simultaneous connections for the NEG. If the backend's balancingMode is CONNECTION, and the backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnections, or maxConnectionsPerInstance.
		 * Not available if the backend's balancingMode is RATE. Internal TCP/UDP load balancing does not support setting maxConnectionsPerEndpoint even though its backends require a balancing mode of CONNECTION.
		 */
		maxConnectionsPerEndpoint?: number | null;

		/**
		 * Defines a target maximum number of simultaneous connections for a single VM in a backend instance group. This is multiplied by the number of instances in the instance group to implicitly calculate a target maximum number of simultaneous connections for the whole instance group. If the backend's balancingMode is UTILIZATION, this is an optional parameter. If the backend's balancingMode is CONNECTION, and backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnections, or maxConnectionsPerEndpoint.
		 * Not available if the backend's balancingMode is RATE. Internal TCP/UDP load balancing does not support setting maxConnectionsPerInstance even though its backends require a balancing mode of CONNECTION.
		 */
		maxConnectionsPerInstance?: number | null;

		/**
		 * Defines a maximum number of HTTP requests per second (RPS) that the backend can handle. Valid for network endpoint group and instance group backends (except for regional managed instance groups). Must not be defined if the backend is a managed instance group that uses autoscaling based on load balancing.
		 * If the backend's balancingMode is UTILIZATION, this is an optional parameter. If the backend's balancingMode is RATE, you must specify maxRate, maxRatePerInstance, or maxRatePerEndpoint.
		 * Not available if the backend's balancingMode is CONNECTION.
		 */
		maxRate?: number | null;

		/**
		 * Defines a maximum target for requests per second (RPS) for an endpoint of a NEG. This is multiplied by the number of endpoints in the NEG to implicitly calculate a target maximum rate for the NEG.
		 * If the backend's balancingMode is RATE, you must specify either this parameter, maxRate (except for regional managed instance groups), or maxRatePerInstance.
		 * Not available if the backend's balancingMode is CONNECTION.
		 */
		maxRatePerEndpoint?: number | null;

		/**
		 * Defines a maximum target for requests per second (RPS) for a single VM in a backend instance group. This is multiplied by the number of instances in the instance group to implicitly calculate a target maximum rate for the whole instance group.
		 * If the backend's balancingMode is UTILIZATION, this is an optional parameter. If the backend's balancingMode is RATE, you must specify either this parameter, maxRate (except for regional managed instance groups), or maxRatePerEndpoint.
		 * Not available if the backend's balancingMode is CONNECTION.
		 */
		maxRatePerInstance?: number | null;

		/**
		 * Defines the maximum average backend utilization of a backend VM in an instance group. The valid range is [0.0, 1.0]. This is an optional parameter if the backend's balancingMode is UTILIZATION.
		 * This parameter can be used in conjunction with maxRate, maxRatePerInstance, maxConnections (except for regional managed instance groups), or maxConnectionsPerInstance.
		 */
		maxUtilization?: number | null;
	}

	export enum BackendBalancingMode { CONNECTION = 0, RATE = 1, UTILIZATION = 2 }


	/**
	 * Represents a Cloud Storage Bucket resource.
	 * This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets.
	 */
	export interface BackendBucket {

		/** Cloud Storage bucket name. */
		bucketName?: string | null;

		/** Message containing Cloud CDN configuration for a backend bucket. */
		cdnPolicy?: BackendBucketCdnPolicy | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description?: string | null;

		/** If true, enable Cloud CDN for this BackendBucket. */
		enableCdn?: boolean | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}


	/** Message containing Cloud CDN configuration for a backend bucket. */
	export interface BackendBucketCdnPolicy {

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec?: string | null;

		/** [Output Only] Names of the keys for signing request URLs. */
		signedUrlKeyNames?: Array<string> | null;
	}


	/** Contains a list of BackendBucket resources. */
	export interface BackendBucketList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendBucket resources. */
		items?: Array<BackendBucket> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendBucketListWarning | null;
	}

	export interface BackendBucketListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		BackendBucketListWarningData?: Array<BackendBucketListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface BackendBucketListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Backend Service resource.
	 * A backend service contains configuration values for Google Cloud Platform load balancing services.
	 * Backend services in Google Compute Engine can be either regionally or globally scoped.
	 * * [Global](/compute/docs/reference/rest/{$api_version}/backendServices) * [Regional](/compute/docs/reference/rest/{$api_version}/regionBackendServices)
	 * For more information, read Backend Services.
	 * (== resource_for {$api_version}.backendService ==)
	 */
	export interface BackendService {

		/** If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is one day (86,400). */
		affinityCookieTtlSec?: number | null;

		/** The list of backends that serve this BackendService. */
		backends?: Array<Backend> | null;

		/** Message containing Cloud CDN configuration for a backend service. */
		cdnPolicy?: BackendServiceCdnPolicy | null;

		/** Settings controlling the volume of connections to a backend service. */
		circuitBreakers?: CircuitBreakers | null;

		/** Message containing connection draining configuration. */
		connectionDraining?: ConnectionDraining | null;

		/** This message defines settings for a consistent hash style load balancer. */
		consistentHash?: ConsistentHashLoadBalancerSettings | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Headers that the HTTP/S load balancer should add to proxied requests. */
		customRequestHeaders?: Array<string> | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** If true, enables Cloud CDN for the backend service. Only applicable if the loadBalancingScheme is EXTERNAL and the protocol is HTTP or HTTPS. */
		enableCDN?: boolean | null;

		/** Applicable only to Failover for Internal TCP/UDP Load Balancing. On failover or failback, this field indicates whether connection draining will be honored. GCP has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes). */
		failoverPolicy?: BackendServiceFailoverPolicy | null;

		/**
		 * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve a BackendService.
		 */
		fingerprint?: string | null;

		/** The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See  Load balancer guide. Currently at most one health check can be specified. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet NEG backends must not have a health check. A health check must */
		healthChecks?: Array<string> | null;

		/** Identity-Aware Proxy */
		iap?: BackendServiceIAP | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#backendService for backend services. */
		kind?: string | null;

		/** Specifies the load balancer type. Choose EXTERNAL for load balancers that receive traffic from external clients. Choose INTERNAL for Internal TCP/UDP Load Balancing. Choose INTERNAL_MANAGED for Internal HTTP(S) Load Balancing. Choose INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancing cannot be used with another. For more information, refer to Choosing a load balancer. */
		loadBalancingScheme?: BackendServiceLoadBalancingScheme | null;

		/**
		 * The load balancing algorithm used within the scope of the locality. The possible values are:
		 * - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
		 * - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
		 * - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
		 * - RANDOM: The load balancer selects a random healthy host.
		 * - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
		 * - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, refer to https://ai.google/research/pubs/pub44824
		 * This field is applicable to either:
		 * - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.
		 * - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
		 * If sessionAffinity is not NONE, and this field is not set to >MAGLEV or RING_HASH, session affinity settings will not take effect.
		 */
		localityLbPolicy?: BackendServiceLocalityLbPolicy | null;

		/** The available logging options for the load balancer traffic served by this backend service. */
		logConfig?: BackendServiceLogConfig | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The URL of the network to which this backend service belongs. This field can only be spcified when the load balancing scheme is set to INTERNAL. */
		network?: string | null;

		/** Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. */
		outlierDetection?: OutlierDetection | null;

		/**
		 * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.
		 * This cannot be used if the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
		 */
		port?: number | null;

		/**
		 * A named port on a backend instance group representing the port for communication to the backend VMs in that group. Required when the loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED and the backends are instance groups. The named port must be defined on each backend instance group. This parameter has no meaning if the backends are NEGs.
		 * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Blaancing).
		 */
		portName?: string | null;

		/**
		 * The protocol this BackendService uses to communicate with backends.
		 * Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, or UDP. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.
		 */
		protocol?: BackendServiceProtocol | null;

		/** [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] The resource URL for the security policy associated with this backend service. */
		securityPolicy?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the --protocol is UDP.
		 * When the loadBalancingScheme is EXTERNAL, possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. You can use GENERATED_COOKIE if the protocol is HTTP or HTTPS.
		 * When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.
		 * When the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.
		 */
		sessionAffinity?: BackendServiceSessionAffinity | null;

		/** The backend service timeout has a different meaning depending on the type of load balancer. For more information read,  Backend service settings The default is 30 seconds. */
		timeoutSec?: number | null;
	}


	/** Message containing Cloud CDN configuration for a backend service. */
	export interface BackendServiceCdnPolicy {

		/** Message containing what to include in the cache key for a request for Cloud CDN. */
		cacheKeyPolicy?: CacheKeyPolicy | null;

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec?: string | null;

		/** [Output Only] Names of the keys for signing request URLs. */
		signedUrlKeyNames?: Array<string> | null;
	}


	/** Message containing what to include in the cache key for a request for Cloud CDN. */
	export interface CacheKeyPolicy {

		/** If true, requests to different hosts will be cached separately. */
		includeHost?: boolean | null;

		/** If true, http and https requests will be cached separately. */
		includeProtocol?: boolean | null;

		/** If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely. */
		includeQueryString?: boolean | null;

		/** Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters. */
		queryStringBlacklist?: Array<string> | null;

		/** Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters. */
		queryStringWhitelist?: Array<string> | null;
	}


	/** Settings controlling the volume of connections to a backend service. */
	export interface CircuitBreakers {

		/** The maximum number of connections to the backend service. If not specified, there is no limit. */
		maxConnections?: number | null;

		/** The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. */
		maxPendingRequests?: number | null;

		/** The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit. */
		maxRequests?: number | null;

		/** Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. */
		maxRequestsPerConnection?: number | null;

		/** The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. */
		maxRetries?: number | null;
	}


	/** Message containing connection draining configuration. */
	export interface ConnectionDraining {

		/** The amount of time in seconds to allow existing connections to persist while on unhealthy backend VMs. Only applicable if the protocol is not UDP. The valid range is [0, 3600]. */
		drainingTimeoutSec?: number | null;
	}


	/** This message defines settings for a consistent hash style load balancer. */
	export interface ConsistentHashLoadBalancerSettings {

		/** The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash. */
		httpCookie?: ConsistentHashLoadBalancerSettingsHttpCookie | null;

		/** The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD. */
		httpHeaderName?: string | null;

		/** The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node. */
		minimumRingSize?: string | null;
	}


	/** The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash. */
	export interface ConsistentHashLoadBalancerSettingsHttpCookie {

		/** Name of the cookie. */
		name?: string | null;

		/** Path to set for the cookie. */
		path?: string | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		ttl?: Duration | null;
	}


	/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
	export interface Duration {

		/** Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive. */
		nanos?: number | null;

		/** Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years */
		seconds?: string | null;
	}


	/** Applicable only to Failover for Internal TCP/UDP Load Balancing. On failover or failback, this field indicates whether connection draining will be honored. GCP has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes). */
	export interface BackendServiceFailoverPolicy {

		/**
		 * This can be set to true only if the protocol is TCP.
		 * The default is false.
		 */
		disableConnectionDrainOnFailover?: boolean | null;

		/**
		 * Applicable only to Failover for Internal TCP/UDP Load Balancing. If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy. If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy.
		 * The default is false.
		 */
		dropTrafficIfUnhealthy?: boolean | null;

		/** Applicable only to Failover for Internal TCP/UDP Load Balancing. The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. */
		failoverRatio?: number | null;
	}


	/** Identity-Aware Proxy */
	export interface BackendServiceIAP {
		enabled?: boolean | null;
		oauth2ClientId?: string | null;
		oauth2ClientSecret?: string | null;

		/** [Output Only] SHA256 hash value for the field oauth2_client_secret above. */
		oauth2ClientSecretSha256?: string | null;
	}

	export enum BackendServiceLoadBalancingScheme { EXTERNAL = 0, INTERNAL = 1, INTERNAL_MANAGED = 2, INTERNAL_SELF_MANAGED = 3, INVALID_LOAD_BALANCING_SCHEME = 4 }

	export enum BackendServiceLocalityLbPolicy { INVALID_LB_POLICY = 0, LEAST_REQUEST = 1, MAGLEV = 2, ORIGINAL_DESTINATION = 3, RANDOM = 4, RING_HASH = 5, ROUND_ROBIN = 6 }


	/** The available logging options for the load balancer traffic served by this backend service. */
	export interface BackendServiceLogConfig {

		/** This field denotes whether to enable logging for the load balancer traffic served by this backend service. */
		enable?: boolean | null;

		/** This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0. */
		sampleRate?: number | null;
	}


	/** Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. */
	export interface OutlierDetection {

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		baseEjectionTime?: Duration | null;

		/** Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. */
		consecutiveErrors?: number | null;

		/** The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3. */
		consecutiveGatewayFailure?: number | null;

		/** The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. */
		enforcingConsecutiveErrors?: number | null;

		/** The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. */
		enforcingConsecutiveGatewayFailure?: number | null;

		/** The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. */
		enforcingSuccessRate?: number | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		interval?: Duration | null;

		/** Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%. */
		maxEjectionPercent?: number | null;

		/** The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5. */
		successRateMinimumHosts?: number | null;

		/** The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100. */
		successRateRequestVolume?: number | null;

		/** This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. */
		successRateStdevFactor?: number | null;
	}

	export enum BackendServiceProtocol { HTTP = 0, HTTP2 = 1, HTTPS = 2, SSL = 3, TCP = 4, UDP = 5 }

	export enum BackendServiceSessionAffinity { CLIENT_IP = 0, CLIENT_IP_PORT_PROTO = 1, CLIENT_IP_PROTO = 2, GENERATED_COOKIE = 3, HEADER_FIELD = 4, HTTP_COOKIE = 5, NONE = 6 }


	/** Contains a list of BackendServicesScopedList. */
	export interface BackendServiceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendServicesScopedList resources. */
		items?: {[id: string]: BackendServicesScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendServiceAggregatedListWarning | null;
	}

	export interface BackendServicesScopedList {

		/** A list of BackendServices contained in this scope. */
		backendServices?: Array<BackendService> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: BackendServicesScopedListWarning | null;
	}

	export interface BackendServicesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		BackendServicesScopedListWarningData?: Array<BackendServicesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface BackendServicesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface BackendServiceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		BackendServiceAggregatedListWarningData?: Array<BackendServiceAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface BackendServiceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface BackendServiceGroupHealth {

		/** Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks. */
		healthStatus?: Array<HealthStatus> | null;

		/** [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services. */
		kind?: string | null;
	}

	export interface HealthStatus {

		/** Health state of the instance. */
		healthState?: HealthStatusHealthState | null;

		/** URL of the instance resource. */
		instance?: string | null;

		/** A forwarding rule IP address assigned to this instance. */
		ipAddress?: string | null;

		/** The named port of the instance group, not necessarily the port that is health-checked. */
		port?: number | null;
	}

	export enum HealthStatusHealthState { HEALTHY = 0, UNHEALTHY = 1 }


	/** Contains a list of BackendService resources. */
	export interface BackendServiceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendService resources. */
		items?: Array<BackendService> | null;

		/** [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendServiceListWarning | null;
	}

	export interface BackendServiceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		BackendServiceListWarningData?: Array<BackendServiceListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface BackendServiceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface BackendServiceReference {
		backendService?: string | null;
	}


	/** Associates `members` with a `role`. */
	export interface Binding {

		/**
		 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.
		 * Example (Comparison):
		 * title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100"
		 * Example (Equality):
		 * title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email"
		 * Example (Logic):
		 * title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'"
		 * Example (Data Manipulation):
		 * title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)"
		 * The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		 */
		condition?: Expr | null;

		/**
		 * Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:
		 * * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.
		 * * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.
		 * * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` .
		 * * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.
		 * * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.
		 * * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding.
		 * * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding.
		 * * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		 * * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
		 */
		members?: Array<string> | null;

		/** Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
		role?: string | null;
	}


	/**
	 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.
	 * Example (Comparison):
	 * title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100"
	 * Example (Equality):
	 * title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email"
	 * Example (Logic):
	 * title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'"
	 * Example (Data Manipulation):
	 * title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)"
	 * The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	 */
	export interface Expr {

		/** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
		description?: string | null;

		/** Textual representation of an expression in Common Expression Language syntax. */
		expression?: string | null;

		/** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
		location?: string | null;

		/** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
		title?: string | null;
	}

	export interface CacheInvalidationRule {

		/** If set, this invalidation rule will only apply to requests with a Host header matching host. */
		host?: string | null;
		path?: string | null;
	}


	/**
	 * Represents a regional Commitment resource.
	 * Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts. (== resource_for {$api_version}.regionCommitments ==)
	 */
	export interface Commitment {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Commitment end time in RFC3339 text format. */
		endTimestamp?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#commitment for commitments. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). */
		plan?: CommitmentPlan | null;

		/** [Output Only] URL of the region where this commitment may be used. */
		region?: string | null;

		/** List of reservations in this commitment. */
		reservations?: Array<Reservation> | null;

		/** A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together. */
		resources?: Array<ResourceCommitment> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Commitment start time in RFC3339 text format. */
		startTimestamp?: string | null;

		/** [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED. */
		status?: CommitmentStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;
	}

	export enum CommitmentPlan { INVALID = 0, THIRTY_SIX_MONTH = 1, TWELVE_MONTH = 2 }


	/** Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read  Reserving zonal resources. (== resource_for {$api_version}.reservations ==) */
	export interface Reservation {

		/** [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment. */
		commitment?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#reservations for reservations. */
		kind?: string | null;

		/**
		 * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** This reservation type allows to pre allocate specific instance configuration. */
		specificReservation?: AllocationSpecificSKUReservation | null;

		/** Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation. */
		specificReservationRequired?: boolean | null;

		/** [Output Only] The status of the reservation. */
		status?: ReservationStatus | null;

		/** Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment. */
		zone?: string | null;
	}

	export enum ReservationStatus { CREATING = 0, DELETING = 1, INVALID = 2, READY = 3, UPDATING = 4 }


	/** Commitment for a particular resource (a Commitment is composed of one or more of these). */
	export interface ResourceCommitment {

		/** Name of the accelerator type resource. Applicable only when the type is ACCELERATOR. */
		acceleratorType?: string | null;

		/** The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU. */
		amount?: string | null;

		/** Type of resource for which this commitment applies. Possible values are VCPU and MEMORY */
		type?: ResourceCommitmentType | null;
	}

	export enum ResourceCommitmentType { ACCELERATOR = 0, LOCAL_SSD = 1, MEMORY = 2, UNSPECIFIED = 3, VCPU = 4 }

	export enum CommitmentStatus { ACTIVE = 0, CREATING = 1, EXPIRED = 2, NOT_YET_ACTIVE = 3 }

	export interface CommitmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of CommitmentsScopedList resources. */
		items?: {[id: string]: CommitmentsScopedList } | null;

		/** [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: CommitmentAggregatedListWarning | null;
	}

	export interface CommitmentsScopedList {

		/** [Output Only] A list of commitments contained in this scope. */
		commitments?: Array<Commitment> | null;

		/** [Output Only] Informational warning which replaces the list of commitments when the list is empty. */
		warning?: CommitmentsScopedListWarning | null;
	}

	export interface CommitmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		CommitmentsScopedListWarningData?: Array<CommitmentsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface CommitmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface CommitmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		CommitmentAggregatedListWarningData?: Array<CommitmentAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface CommitmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Commitment resources. */
	export interface CommitmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Commitment resources. */
		items?: Array<Commitment> | null;

		/** [Output Only] Type of resource. Always compute#commitmentList for lists of commitments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: CommitmentListWarning | null;
	}

	export interface CommitmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		CommitmentListWarningData?: Array<CommitmentListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface CommitmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** A condition to be met. */
	export interface Condition {

		/** Trusted attributes supplied by the IAM system. */
		iam?: ConditionIam | null;

		/** An operator to apply the subject with. */
		op?: ConditionOp | null;

		/** Trusted attributes discharged by the service. */
		svc?: string | null;

		/** Trusted attributes supplied by any service that owns resources and uses the IAM system for access control. */
		sys?: ConditionSys | null;

		/** The objects of the condition. */
		values?: Array<string> | null;
	}

	export enum ConditionIam { APPROVER = 0, ATTRIBUTION = 1, AUTHORITY = 2, CREDENTIALS_TYPE = 3, JUSTIFICATION_TYPE = 4, NO_ATTR = 5, SECURITY_REALM = 6 }

	export enum ConditionOp { DISCHARGED = 0, EQUALS = 1, IN = 2, NOT_EQUALS = 3, NOT_IN = 4, NO_OP = 5 }

	export enum ConditionSys { IP = 0, NAME = 1, NO_ATTR = 2, REGION = 3, SERVICE = 4 }


	/** The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing */
	export interface CorsPolicy {

		/**
		 * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header.
		 * Default is false.
		 */
		allowCredentials?: boolean | null;

		/** Specifies the content for the Access-Control-Allow-Headers header. */
		allowHeaders?: Array<string> | null;

		/** Specifies the content for the Access-Control-Allow-Methods header. */
		allowMethods?: Array<string> | null;

		/**
		 * Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
		 * An origin is allowed if it matches either allow_origins or allow_origin_regex.
		 */
		allowOriginRegexes?: Array<string> | null;

		/**
		 * Specifies the list of origins that will be allowed to do CORS requests.
		 * An origin is allowed if it matches either allow_origins or allow_origin_regex.
		 */
		allowOrigins?: Array<string> | null;

		/** If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect. */
		disabled?: boolean | null;

		/** Specifies the content for the Access-Control-Expose-Headers header. */
		exposeHeaders?: Array<string> | null;

		/** Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header. */
		maxAge?: number | null;
	}

	export interface CustomerEncryptionKeyProtectedDisk {

		/** Represents a customer-supplied encryption key */
		diskEncryptionKey?: CustomerEncryptionKey | null;

		/** Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. */
		source?: string | null;
	}


	/**
	 * Represents a Persistent Disk resource.
	 * Google Compute Engine has two Disk resources:
	 * * [Zonal](/compute/docs/reference/rest/{$api_version}/disks) * [Regional](/compute/docs/reference/rest/{$api_version}/regionDisks)
	 * Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options.
	 * The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks.
	 * The regionDisks resource represents a regional persistent disk. For more information, read  Regional resources. (== resource_for {$api_version}.disks ==) (== resource_for {$api_version}.regionDisks ==)
	 */
	export interface Disk {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Represents a customer-supplied encryption key */
		diskEncryptionKey?: CustomerEncryptionKey | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#disk for disks. */
		kind?: string | null;

		/**
		 * A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve a disk.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this disk. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string } | null;

		/** [Output Only] Last attach timestamp in RFC3339 text format. */
		lastAttachTimestamp?: string | null;

		/** [Output Only] Last detach timestamp in RFC3339 text format. */
		lastDetachTimestamp?: string | null;

		/** Integer license codes indicating which licenses are attached to this disk. */
		licenseCodes?: Array<string> | null;

		/** A list of publicly visible licenses. Reserved for Google's use. */
		licenses?: Array<string> | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Internal use only. */
		options?: string | null;

		/** Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project. */
		physicalBlockSizeBytes?: string | null;

		/** [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** URLs of the zones where the disk should be replicated to. Only applicable for regional resources. */
		replicaZones?: Array<string> | null;

		/** Resource policies applied to this disk for automatic snapshot creations. */
		resourcePolicies?: Array<string> | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/**
		 * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.
		 * If you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot. Acceptable values are 1 to 65536, inclusive.
		 */
		sizeGb?: string | null;

		/**
		 * The source image used to create this disk. If the source image is deleted, this field will not be set.
		 * To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image:
		 * projects/debian-cloud/global/images/family/debian-9
		 * Alternatively, use a specific version of a public operating system image:
		 * projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD
		 * To create a disk with a custom image that you created, specify the image name in the following format:
		 * global/images/my-custom-image
		 * You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name:
		 * global/images/family/my-image-family
		 */
		sourceImage?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceImageEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used. */
		sourceImageId?: string | null;

		/**
		 * The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:
		 * - https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot
		 * - projects/project/global/snapshots/snapshot
		 * - global/snapshots/snapshot
		 */
		sourceSnapshot?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used. */
		sourceSnapshotId?: string | null;

		/** [Output Only] The status of disk creation. CREATING: Disk is provisioning. RESTORING: Source data is being copied into the disk. FAILED: Disk creation failed. READY: Disk is ready for use. DELETING: Disk is deleting. */
		status?: DiskStatus | null;

		/** URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project/zones/zone/diskTypes/pd-standard or pd-ssd */
		type?: string | null;

		/** [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance */
		users?: Array<string> | null;

		/** [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	export enum DiskStatus { CREATING = 0, DELETING = 1, FAILED = 2, READY = 3, RESTORING = 4 }

	export interface DiskAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DisksScopedList resources. */
		items?: {[id: string]: DisksScopedList } | null;

		/** [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskAggregatedListWarning | null;
	}

	export interface DisksScopedList {

		/** [Output Only] A list of disks contained in this scope. */
		disks?: Array<Disk> | null;

		/** [Output Only] Informational warning which replaces the list of disks when the list is empty. */
		warning?: DisksScopedListWarning | null;
	}

	export interface DisksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DisksScopedListWarningData?: Array<DisksScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DisksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface DiskAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DiskAggregatedListWarningData?: Array<DiskAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DiskAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** A specification of the desired way to instantiate a disk in the instance template when its created from a source instance. */
	export interface DiskInstantiationConfig {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete?: boolean | null;

		/** The custom source image to be used to restore this disk when instantiating this instance template. */
		customImage?: string | null;

		/** Specifies the device name of the disk to which the configurations apply to. */
		deviceName?: string | null;

		/**
		 * Specifies whether to include the disk and what image to use. Possible values are:
		 * - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks.
		 * - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks.
		 * - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks.
		 * - attach-read-only: to attach a read-only disk. Applicable to read-only disks.
		 * - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
		 */
		instantiateFrom?: DiskInstantiationConfigInstantiateFrom | null;
	}

	export enum DiskInstantiationConfigInstantiateFrom { ATTACH_READ_ONLY = 0, BLANK = 1, CUSTOM_IMAGE = 2, DEFAULT = 3, DO_NOT_INCLUDE = 4, SOURCE_IMAGE = 5, SOURCE_IMAGE_FAMILY = 6 }


	/** A list of Disk resources. */
	export interface DiskList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Disk resources. */
		items?: Array<Disk> | null;

		/** [Output Only] Type of resource. Always compute#diskList for lists of disks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskListWarning | null;
	}

	export interface DiskListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DiskListWarningData?: Array<DiskListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DiskListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface DiskMoveRequest {

		/**
		 * The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone
		 * - projects/project/zones/zone
		 * - zones/zone
		 */
		destinationZone?: string | null;

		/**
		 * The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
		 * - projects/project/zones/zone/disks/disk
		 * - zones/zone/disks/disk
		 */
		targetDisk?: string | null;
	}


	/**
	 * Represents a Disk Type resource.
	 * Google Compute Engine has two Disk Type resources:
	 * * [Regional](/compute/docs/reference/rest/{$api_version}/regionDiskTypes) * [Zonal](/compute/docs/reference/rest/{$api_version}/diskTypes)
	 * You can choose from a variety of disk types based on your needs. For more information, read Storage options.
	 * The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks.
	 * The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks. (== resource_for {$api_version}.diskTypes ==) (== resource_for {$api_version}.regionDiskTypes ==)
	 */
	export interface DiskType {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] Server-defined default disk size in GB. */
		defaultDiskSizeGb?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] An optional description of this resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#diskType for disk types. */
		kind?: string | null;

		/**
		 * [Output Only] Name of the resource.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] An optional textual description of the valid disk size, such as "10GB-10TB". */
		validDiskSize?: string | null;

		/** [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	export interface DiskTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskTypesScopedList resources. */
		items?: {[id: string]: DiskTypesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#diskTypeAggregatedList. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskTypeAggregatedListWarning | null;
	}

	export interface DiskTypesScopedList {

		/** [Output Only] A list of disk types contained in this scope. */
		diskTypes?: Array<DiskType> | null;

		/** [Output Only] Informational warning which replaces the list of disk types when the list is empty. */
		warning?: DiskTypesScopedListWarning | null;
	}

	export interface DiskTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DiskTypesScopedListWarningData?: Array<DiskTypesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DiskTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface DiskTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DiskTypeAggregatedListWarningData?: Array<DiskTypeAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DiskTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of disk types. */
	export interface DiskTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskType resources. */
		items?: Array<DiskType> | null;

		/** [Output Only] Type of resource. Always compute#diskTypeList for disk types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskTypeListWarning | null;
	}

	export interface DiskTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		DiskTypeListWarningData?: Array<DiskTypeListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface DiskTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface DisksAddResourcePoliciesRequest {

		/** Resource policies to be added to this disk. Currently you can only specify one policy here. */
		resourcePolicies?: Array<string> | null;
	}

	export interface DisksRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this disk. */
		resourcePolicies?: Array<string> | null;
	}

	export interface DisksResizeRequest {

		/** The new size of the persistent disk, which is specified in GB. */
		sizeGb?: string | null;
	}


	/** A set of Display Device options */
	export interface DisplayDevice {

		/** Defines whether the instance has Display enabled. */
		enableDisplay?: boolean | null;
	}

	export interface DistributionPolicy {

		/** Zones where the regional managed instance group will create and manage instances. */
		zones?: Array<DistributionPolicyZoneConfiguration> | null;
	}

	export interface DistributionPolicyZoneConfiguration {

		/** The URL of the zone. The zone must exist in the region where the managed instance group is located. */
		zone?: string | null;
	}

	export interface ExchangedPeeringRoute {

		/** The destination range of the route. */
		destRange?: string | null;

		/** True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict. */
		imported?: boolean | null;

		/** The region of peering route next hop, only applies to dynamic routes. */
		nextHopRegion?: string | null;

		/** The priority of the peering route. */
		priority?: string | null;

		/** The type of the peering route. */
		type?: ExchangedPeeringRouteType | null;
	}

	export enum ExchangedPeeringRouteType { DYNAMIC_PEERING_ROUTE = 0, STATIC_PEERING_ROUTE = 1, SUBNET_PEERING_ROUTE = 2 }

	export interface ExchangedPeeringRoutesList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ExchangedPeeringRoute resources. */
		items?: Array<ExchangedPeeringRoute> | null;

		/** [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ExchangedPeeringRoutesListWarning | null;
	}

	export interface ExchangedPeeringRoutesListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ExchangedPeeringRoutesListWarningData?: Array<ExchangedPeeringRoutesListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ExchangedPeeringRoutesListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** External VPN gateway is the on-premises VPN gateway(s) or another cloud provider's VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud to your on-premises side or another Cloud provider's VPN gateway, you must create a external VPN gateway resource in GCP, which provides the information to GCP about your external VPN gateway. */
	export interface ExternalVpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** List of interfaces for this external VPN gateway. */
		interfaces?: Array<ExternalVpnGatewayInterface> | null;

		/** [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways. */
		kind?: string | null;

		/**
		 * A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this ExternalVpnGateway resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string } | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Indicates the user-supplied redundancy type of this external VPN gateway. */
		redundancyType?: ExternalVpnGatewayRedundancyType | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}


	/** The interface for the external VPN gateway. */
	export interface ExternalVpnGatewayInterface {

		/** The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: SINGLE_IP_INTERNALLY_REDUNDANT - 0 TWO_IPS_REDUNDANCY - 0, 1 FOUR_IPS_REDUNDANCY - 0, 1, 2, 3 */
		id?: string | null;

		/** IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine. */
		ipAddress?: string | null;
	}

	export enum ExternalVpnGatewayRedundancyType { FOUR_IPS_REDUNDANCY = 0, SINGLE_IP_INTERNALLY_REDUNDANT = 1, TWO_IPS_REDUNDANCY = 2 }


	/** Response to the list request, and contains a list of externalVpnGateways. */
	export interface ExternalVpnGatewayList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ExternalVpnGateway resources. */
		items?: Array<ExternalVpnGateway> | null;

		/** [Output Only] Type of resource. Always compute#externalVpnGatewayList  for lists of externalVpnGateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ExternalVpnGatewayListWarning | null;
	}

	export interface ExternalVpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ExternalVpnGatewayListWarningData?: Array<ExternalVpnGatewayListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ExternalVpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Firewall Rule resource.
	 * Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules.
	 */
	export interface Firewall {

		/** The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection. */
		FirewallAllowed?: Array<FirewallAllowed> | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection. */
		FirewallDenied?: Array<FirewallDenied> | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported. */
		destinationRanges?: Array<string> | null;

		/** Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields. */
		direction?: FirewallDirection | null;

		/** Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled. */
		disabled?: boolean | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#firewall for firewall rules. */
		kind?: string | null;

		/** The available logging options for a firewall rule. */
		logConfig?: FirewallLogConfig | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used:
		 * global/networks/default
		 * If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network
		 * - projects/myproject/global/networks/my-network
		 * - global/networks/default
		 */
		network?: string | null;

		/** Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`. */
		priority?: number | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Only IPv4 is supported. */
		sourceRanges?: Array<string> | null;

		/** If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags. */
		sourceServiceAccounts?: Array<string> | null;

		/** If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply. */
		sourceTags?: Array<string> | null;

		/** A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network. */
		targetServiceAccounts?: Array<string> | null;

		/** A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network. */
		targetTags?: Array<string> | null;
	}

	export interface FirewallAllowed {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol?: string | null;

		/**
		 * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.
		 * Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
		 */
		ports?: Array<string> | null;
	}

	export interface FirewallDenied {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol?: string | null;

		/**
		 * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.
		 * Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
		 */
		ports?: Array<string> | null;
	}

	export enum FirewallDirection { EGRESS = 0, INGRESS = 1 }


	/** The available logging options for a firewall rule. */
	export interface FirewallLogConfig {

		/** This field denotes whether to enable logging for a particular firewall rule. */
		enable?: boolean | null;
	}


	/** Contains a list of firewalls. */
	export interface FirewallList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Firewall resources. */
		items?: Array<Firewall> | null;

		/** [Output Only] Type of resource. Always compute#firewallList for lists of firewalls. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: FirewallListWarning | null;
	}

	export interface FirewallListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		FirewallListWarningData?: Array<FirewallListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface FirewallListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Encapsulates numeric value that can be either absolute or relative. */
	export interface FixedOrPercent {

		/**
		 * [Output Only] Absolute value of VM instances calculated based on the specific mode.
		 * - If the value is fixed, then the calculated value is equal to the fixed value.
		 * - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded up.
		 */
		calculated?: number | null;

		/** Specifies a fixed number of VM instances. This must be a positive integer. */
		fixed?: number | null;

		/** Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. */
		percent?: number | null;
	}


	/**
	 * Represents a Forwarding Rule resource.
	 * Forwarding rule resources in GCP can be either regional or global in scope:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/globalForwardingRules) * [Regional](/compute/docs/reference/rest/{$api_version}/forwardingRules)
	 * A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud Platform load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway).
	 * For more information, read Forwarding rule concepts and Using protocol forwarding.
	 * (== resource_for {$api_version}.forwardingRules ==) (== resource_for {$api_version}.globalForwardingRules ==) (== resource_for {$api_version}.regionForwardingRules ==)
	 */
	export interface ForwardingRule {

		/**
		 * IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule.
		 * If you don't specify a reserved IP address, an ephemeral IP address is assigned. Methods for specifying an IP address:
		 * * IPv4 dotted decimal, as in `100.1.2.3` * Full URL, as in https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name * Partial URL or by name, as in: * projects/project_id/regions/region/addresses/address-name * regions/region/addresses/address-name * global/addresses/address-name * address-name
		 * The loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
		 */
		IPAddress?: string | null;

		/**
		 * The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP or ICMP.
		 * For Internal TCP/UDP Load Balancing, the load balancing scheme is INTERNAL, and one of TCP or UDP are valid. For Traffic Director, the load balancing scheme is INTERNAL_SELF_MANAGED, and only TCPis valid. For Internal HTTP(S) Load Balancing, the load balancing scheme is INTERNAL_MANAGED, and only TCP is valid. For HTTP(S), SSL Proxy, and TCP Proxy Load Balancing, the load balancing scheme is EXTERNAL and only TCP is valid. For Network TCP/UDP Load Balancing, the load balancing scheme is EXTERNAL, and one of TCP or UDP is valid.
		 */
		IPProtocol?: ForwardingRuleIPProtocol | null;

		/**
		 * This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. This field cannot be used with port or portRange fields.
		 * When the load balancing scheme is INTERNAL and protocol is TCP/UDP, specify this field to allow packets addressed to any ports will be forwarded to the backends configured with this forwarding rule.
		 */
		allPorts?: boolean | null;

		/** This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer. */
		allowGlobalAccess?: boolean | null;

		/**
		 * This field is only used for INTERNAL load balancing.
		 * For internal load balancing, this field identifies the BackendService resource to receive the matched traffic.
		 */
		backendService?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request.
		 * To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
		 */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule. */
		ipVersion?: AddressIpVersion | null;

		/** Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL. */
		isMirroringCollector?: boolean | null;

		/** [Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources. */
		kind?: string | null;

		/**
		 * Specifies the forwarding rule type.
		 * - EXTERNAL is used for:
		 * - Classic Cloud VPN gateways
		 * - Protocol forwarding to VMs from an external IP address
		 * - The following load balancers: HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP
		 * - INTERNAL is used for:
		 * - Protocol forwarding to VMs from an internal IP address
		 * - Internal TCP/UDP load balancers
		 * - INTERNAL_MANAGED is used for:
		 * - Internal HTTP(S) load balancers
		 * - INTERNAL_SELF_MANAGED is used for:
		 * - Traffic Director
		 * For more information about forwarding rules, refer to Forwarding rule concepts.
		 */
		loadBalancingScheme?: ForwardingRuleLoadBalancingScheme | null;

		/**
		 * Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the ForwardingRule will not be visible to those proxies.
		 * For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata.
		 * metadataFilters specified here will be applifed before those specified in the UrlMap that this ForwardingRule references.
		 * metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
		 */
		metadataFilters?: Array<MetadataFilter> | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * This field is not used for external load balancing.
		 * For INTERNAL and INTERNAL_SELF_MANAGED load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used.
		 */
		network?: string | null;

		/**
		 * This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.
		 * For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.
		 * If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
		 */
		networkTier?: AccessConfigNetworkTier | null;

		/**
		 * When the load balancing scheme is EXTERNAL, INTERNAL_SELF_MANAGED and INTERNAL_MANAGED, you can specify a port_range. Use with a forwarding rule that points to a target proxy or a target pool. Do not use with a forwarding rule that points to a backend service. This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.
		 * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.
		 * Some types of forwarding target have constraints on the acceptable ports:
		 * - TargetHttpProxy: 80, 8080
		 * - TargetHttpsProxy: 443
		 * - TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222
		 * - TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222
		 * - TargetVpnGateway: 500, 4500
		 */
		portRange?: string | null;

		/**
		 * This field is used along with the backend_service field for internal load balancing.
		 * When the load balancing scheme is INTERNAL, a list of ports can be configured, for example, ['80'], ['8000','9000']. Only packets addressed to these ports are forwarded to the backends configured with the forwarding rule.
		 * If the forwarding rule's loadBalancingScheme is INTERNAL, you can specify ports in one of the following ways:
		 * * A list of up to five ports, which can be non-contiguous * Keyword ALL, which causes the forwarding rule to forward traffic on any port of the forwarding rule's protocol.
		 */
		ports?: Array<string> | null;

		/** [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name.
		 * The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * This field is only used for internal load balancing.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		serviceLabel?: string | null;

		/**
		 * [Output Only] The internal fully qualified service name for this Forwarding Rule.
		 * This field is only used for internal load balancing.
		 */
		serviceName?: string | null;

		/**
		 * This field is only used for INTERNAL load balancing.
		 * For internal load balancing, this field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule.
		 * If the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified.
		 */
		subnetwork?: string | null;

		/** The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must live in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED load balancing, only targetHttpProxy is valid, not targetHttpsProxy. */
		target?: string | null;
	}

	export enum ForwardingRuleIPProtocol { AH = 0, ESP = 1, ICMP = 2, SCTP = 3, TCP = 4, UDP = 5 }

	export enum ForwardingRuleLoadBalancingScheme { EXTERNAL = 0, INTERNAL = 1, INTERNAL_MANAGED = 2, INTERNAL_SELF_MANAGED = 3, INVALID = 4 }


	/**
	 * Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies.
	 * For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata.
	 * An example for using metadataFilters would be: if loadbalancing involves  Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in <a href="https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/base.proto#envoy-api-msg-core-node" Node metadata of their XDS requests to loadbalancers.
	 */
	export interface MetadataFilter {

		/**
		 * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria
		 * This list must not be empty and can have at the most 64 entries.
		 */
		filterLabels?: Array<MetadataFilterLabelMatch> | null;

		/**
		 * Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.
		 * Supported values are:
		 * - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata.
		 * - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
		 */
		filterMatchCriteria?: MetadataFilterFilterMatchCriteria | null;
	}


	/** MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer. */
	export interface MetadataFilterLabelMatch {

		/**
		 * Name of metadata label.
		 * The name can have a maximum length of 1024 characters and must be at least 1 character long.
		 */
		name?: string | null;

		/**
		 * The value of the label must match the specified value.
		 * value can have a maximum length of 1024 characters.
		 */
		value?: string | null;
	}

	export enum MetadataFilterFilterMatchCriteria { MATCH_ALL = 0, MATCH_ANY = 1, NOT_SET = 2 }

	export interface ForwardingRuleAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ForwardingRulesScopedList resources. */
		items?: {[id: string]: ForwardingRulesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ForwardingRuleAggregatedListWarning | null;
	}

	export interface ForwardingRulesScopedList {

		/** A list of forwarding rules contained in this scope. */
		forwardingRules?: Array<ForwardingRule> | null;

		/** Informational warning which replaces the list of forwarding rules when the list is empty. */
		warning?: ForwardingRulesScopedListWarning | null;
	}

	export interface ForwardingRulesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ForwardingRulesScopedListWarningData?: Array<ForwardingRulesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ForwardingRulesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ForwardingRuleAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ForwardingRuleAggregatedListWarningData?: Array<ForwardingRuleAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ForwardingRuleAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of ForwardingRule resources. */
	export interface ForwardingRuleList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ForwardingRule resources. */
		items?: Array<ForwardingRule> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ForwardingRuleListWarning | null;
	}

	export interface ForwardingRuleListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ForwardingRuleListWarningData?: Array<ForwardingRuleListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ForwardingRuleListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ForwardingRuleReference {
		forwardingRule?: string | null;
	}

	export interface GlobalNetworkEndpointGroupsAttachEndpointsRequest {

		/** The list of network endpoints to be attached. */
		networkEndpoints?: Array<NetworkEndpoint> | null;
	}


	/** The network endpoint. Next ID: 7 */
	export interface NetworkEndpoint {

		/** Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT. */
		fqdn?: string | null;

		/**
		 * The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group.
		 * The name must be 1-63 characters long, and comply with RFC1035.
		 */
		instance?: string | null;

		/** Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used. */
		ipAddress?: string | null;

		/** Optional port number of network endpoint. If not specified and the NetworkEndpointGroup.network_endpoint_type is GCE_IP_PORT, the defaultPort for the network endpoint group will be used. */
		port?: number | null;
	}

	export interface GlobalNetworkEndpointGroupsDetachEndpointsRequest {

		/** The list of network endpoints to be detached. */
		networkEndpoints?: Array<NetworkEndpoint> | null;
	}

	export interface GlobalSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** A list of labels to apply for this resource. Each label key & value must comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For example, "webserver-frontend": "images". A label value can also be empty (e.g. "my-label": ""). */
		labels?: {[id: string]: string } | null;
	}

	export interface GlobalSetPolicyRequest {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding> | null;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/**
		 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.
		 * A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.
		 * Optionally, a `binding` can specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both.
		 * **JSON example:**
		 * { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": ["user:eve@example.com"], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 }
		 * **YAML example:**
		 * bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3
		 * For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		 */
		policy?: Policy | null;
	}


	/**
	 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.
	 * A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.
	 * Optionally, a `binding` can specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both.
	 * **JSON example:**
	 * { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": ["user:eve@example.com"], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 }
	 * **YAML example:**
	 * bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3
	 * For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	 */
	export interface Policy {

		/** Specifies cloud audit logging configuration for this policy. */
		auditConfigs?: Array<AuditConfig> | null;

		/** Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member. */
		bindings?: Array<Binding> | null;

		/**
		 * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.
		 * **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		 */
		etag?: string | null;
		iamOwned?: boolean | null;

		/** If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied. */
		rules?: Array<Rule> | null;

		/**
		 * Specifies the format of the policy.
		 * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected.
		 * Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations:
		 * * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions
		 * **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		 * If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.
		 */
		version?: number | null;
	}


	/** A rule to be applied in a Policy. */
	export interface Rule {

		/** Required */
		action?: RuleAction | null;

		/** Additional restrictions that must be met. All conditions must pass for the rule to match. */
		conditions?: Array<Condition> | null;

		/** Human-readable description of the rule. */
		description?: string | null;

		/** If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries. */
		ins?: Array<string> | null;

		/** The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action. */
		logConfigs?: Array<LogConfig> | null;

		/** If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. */
		notIns?: Array<string> | null;

		/** A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs. */
		permissions?: Array<string> | null;
	}

	export enum RuleAction { ALLOW = 0, ALLOW_WITH_LOG = 1, DENY = 2, DENY_WITH_LOG = 3, LOG = 4, NO_ACTION = 5 }


	/** Specifies what kind of log the caller must write */
	export interface LogConfig {

		/** Write a Cloud Audit log */
		cloudAudit?: LogConfigCloudAuditOptions | null;

		/**
		 * Increment a streamz counter with the specified metric and field names.
		 * Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended.
		 * Field names correspond to IAM request parameters and field values are their respective values.
		 * Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields.
		 * Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
		 */
		counter?: LogConfigCounterOptions | null;

		/** Write a Data Access (Gin) log */
		dataAccess?: LogConfigDataAccessOptions | null;
	}


	/** Write a Cloud Audit log */
	export interface LogConfigCloudAuditOptions {

		/** Authorization-related information used by Cloud Audit Logging. */
		authorizationLoggingOptions?: AuthorizationLoggingOptions | null;

		/** The log_name to populate in the Cloud Audit Record. */
		logName?: LogConfigCloudAuditOptionsLogName | null;
	}

	export enum LogConfigCloudAuditOptionsLogName { ADMIN_ACTIVITY = 0, DATA_ACCESS = 1, UNSPECIFIED_LOG_NAME = 2 }


	/**
	 * Increment a streamz counter with the specified metric and field names.
	 * Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended.
	 * Field names correspond to IAM request parameters and field values are their respective values.
	 * Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields.
	 * Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
	 */
	export interface LogConfigCounterOptions {

		/** Custom fields. */
		customFields?: Array<LogConfigCounterOptionsCustomField> | null;

		/** The field value to attribute. */
		field?: string | null;

		/** The metric to update. */
		metric?: string | null;
	}


	/** Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields. */
	export interface LogConfigCounterOptionsCustomField {

		/** Name is the field name. */
		name?: string | null;

		/** Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext. */
		value?: string | null;
	}


	/** Write a Data Access (Gin) log */
	export interface LogConfigDataAccessOptions {

		/** Whether Gin logging should happen in a fail-closed manner at the caller. This is currently supported in the LocalIAM implementation, Stubby C++, and Stubby Java. For Apps Framework, see go/af-audit-logging#failclosed. TODO(b/77591626): Add support for Stubby Go. TODO(b/129671387): Add support for Scaffolding. */
		logMode?: LogConfigDataAccessOptionsLogMode | null;
	}

	export enum LogConfigDataAccessOptionsLogMode { LOG_FAIL_CLOSED = 0, LOG_MODE_UNSPECIFIED = 1 }


	/** A guest attributes entry. */
	export interface GuestAttributes {

		/** [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry. */
		kind?: string | null;

		/** The path to be queried. This can be the default namespace ('/') or a nested namespace ('/\/') or a specified key ('/\/\') */
		queryPath?: string | null;

		/** Array of guest attribute namespace/key/value tuples. */
		queryValue?: GuestAttributesValue | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** The key to search for. */
		variableKey?: string | null;

		/** [Output Only] The value found for the requested key. */
		variableValue?: string | null;
	}


	/** Array of guest attribute namespace/key/value tuples. */
	export interface GuestAttributesValue {
		items?: Array<GuestAttributesEntry> | null;
	}


	/** A guest attributes namespace/key/value entry. */
	export interface GuestAttributesEntry {

		/** Key for the guest attribute entry. */
		key?: string | null;

		/** Namespace for the guest attribute entry. */
		namespace?: string | null;

		/** Value for the guest attribute entry. */
		value?: string | null;
	}

	export interface HTTP2HealthCheck {

		/** The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535. */
		port?: number | null;

		/** Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. */
		portName?: string | null;

		/**
		 * Specifies how port is selected for health checking, can be one of following values:
		 * USE_FIXED_PORT: The port number in port is used for health checking.
		 * USE_NAMED_PORT: The portName is used for health checking.
		 * USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
		 * If not specified, HTTP2 health check follows behavior specified in port and portName fields.
		 */
		portSpecification?: HTTP2HealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTP/2 health check request. The default value is /. */
		requestPath?: string | null;

		/** The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII. */
		response?: string | null;
	}

	export enum HTTP2HealthCheckPortSpecification { USE_FIXED_PORT = 0, USE_NAMED_PORT = 1, USE_SERVING_PORT = 2 }

	export enum HTTP2HealthCheckProxyHeader { NONE = 0, PROXY_V1 = 1 }

	export interface HTTPHealthCheck {

		/** The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535. */
		port?: number | null;

		/** Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. */
		portName?: string | null;

		/**
		 * Specifies how port is selected for health checking, can be one of following values:
		 * USE_FIXED_PORT: The port number in port is used for health checking.
		 * USE_NAMED_PORT: The portName is used for health checking.
		 * USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
		 * If not specified, HTTP health check follows behavior specified in port and portName fields.
		 */
		portSpecification?: HTTP2HealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTP health check request. The default value is /. */
		requestPath?: string | null;

		/** The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII. */
		response?: string | null;
	}

	export interface HTTPSHealthCheck {

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535. */
		port?: number | null;

		/** Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. */
		portName?: string | null;

		/**
		 * Specifies how port is selected for health checking, can be one of following values:
		 * USE_FIXED_PORT: The port number in port is used for health checking.
		 * USE_NAMED_PORT: The portName is used for health checking.
		 * USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
		 * If not specified, HTTPS health check follows behavior specified in port and portName fields.
		 */
		portSpecification?: HTTP2HealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTPS health check request. The default value is /. */
		requestPath?: string | null;

		/** The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII. */
		response?: string | null;
	}


	/**
	 * Represents a Health Check resource.
	 * Google Compute Engine has two Health Check resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/healthChecks) * [Regional](/compute/docs/reference/rest/{$api_version}/regionHealthChecks)
	 * Internal HTTP(S) load balancers use regional health checks. All other types of GCP load balancers and managed instance group auto-healing use global health checks. For more information, read Health Check Concepts.
	 * To perform health checks on network load balancers, you must use either httpHealthChecks or httpsHealthChecks.
	 */
	export interface HealthCheck {

		/** How often (in seconds) to send a health check. The default value is 5 seconds. */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in 3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
		healthyThreshold?: number | null;
		http2HealthCheck?: HTTP2HealthCheck | null;
		httpHealthCheck?: HTTPHealthCheck | null;
		httpsHealthCheck?: HTTPSHealthCheck | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Region where the health check resides. Not applicable to global health checks. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		sslHealthCheck?: SSLHealthCheck | null;
		tcpHealthCheck?: TCPHealthCheck | null;

		/** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec. */
		timeoutSec?: number | null;

		/** Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field. */
		type?: HealthCheckType | null;

		/** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
		unhealthyThreshold?: number | null;
	}

	export interface SSLHealthCheck {

		/** The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535. */
		port?: number | null;

		/** Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. */
		portName?: string | null;

		/**
		 * Specifies how port is selected for health checking, can be one of following values:
		 * USE_FIXED_PORT: The port number in port is used for health checking.
		 * USE_NAMED_PORT: The portName is used for health checking.
		 * USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
		 * If not specified, SSL health check follows behavior specified in port and portName fields.
		 */
		portSpecification?: HTTP2HealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII. */
		request?: string | null;

		/** The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII. */
		response?: string | null;
	}

	export interface TCPHealthCheck {

		/** The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535. */
		port?: number | null;

		/** Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. */
		portName?: string | null;

		/**
		 * Specifies how port is selected for health checking, can be one of following values:
		 * USE_FIXED_PORT: The port number in port is used for health checking.
		 * USE_NAMED_PORT: The portName is used for health checking.
		 * USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
		 * If not specified, TCP health check follows behavior specified in port and portName fields.
		 */
		portSpecification?: HTTP2HealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII. */
		request?: string | null;

		/** The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII. */
		response?: string | null;
	}

	export enum HealthCheckType { HTTP = 0, HTTP2 = 1, HTTPS = 2, INVALID = 3, SSL = 4, TCP = 5 }


	/** Contains a list of HealthCheck resources. */
	export interface HealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HealthCheck resources. */
		items?: Array<HealthCheck> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HealthCheckListWarning | null;
	}

	export interface HealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		HealthCheckListWarningData?: Array<HealthCheckListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface HealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * A full or valid partial URL to a health check. For example, the following are valid URLs:  
	 * - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check 
	 * - projects/project-id/global/httpHealthChecks/health-check 
	 * - global/httpHealthChecks/health-check
	 */
	export interface HealthCheckReference {
		healthCheck?: string | null;
	}

	export interface HealthChecksAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HealthChecksScopedList resources. */
		items?: {[id: string]: HealthChecksScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HealthChecksAggregatedListWarning | null;
	}

	export interface HealthChecksScopedList {

		/** A list of HealthChecks contained in this scope. */
		healthChecks?: Array<HealthCheck> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: HealthChecksScopedListWarning | null;
	}

	export interface HealthChecksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		HealthChecksScopedListWarningData?: Array<HealthChecksScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface HealthChecksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface HealthChecksAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		HealthChecksAggregatedListWarningData?: Array<HealthChecksAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface HealthChecksAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface HealthStatusForNetworkEndpoint {
		backendService?: BackendServiceReference | null;
		forwardingRule?: ForwardingRuleReference | null;

		/**
		 * A full or valid partial URL to a health check. For example, the following are valid URLs:
		 * - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check
		 * - projects/project-id/global/httpHealthChecks/health-check
		 * - global/httpHealthChecks/health-check
		 */
		healthCheck?: HealthCheckReference | null;

		/** Health state of the network endpoint determined based on the health checks configured. */
		healthState?: HealthStatusForNetworkEndpointHealthState | null;
	}

	export enum HealthStatusForNetworkEndpointHealthState { DRAINING = 0, HEALTHY = 1, UNHEALTHY = 2, UNKNOWN = 3 }


	/** UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService. */
	export interface HostRule {

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. */
		hosts?: Array<string> | null;

		/** The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion. */
		pathMatcher?: string | null;
	}


	/** Specification for how requests are aborted as part of fault injection. */
	export interface HttpFaultAbort {

		/**
		 * The HTTP status code used to abort the request.
		 * The value must be between 200 and 599 inclusive.
		 */
		httpStatus?: string | null;

		/**
		 * The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
		 * The value must be between 0.0 and 100.0 inclusive.
		 */
		percentage?: number | null;
	}


	/** Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection. */
	export interface HttpFaultDelay {

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		fixedDelay?: Duration | null;

		/**
		 * The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection.
		 * The value must be between 0.0 and 100.0 inclusive.
		 */
		percentage?: number | null;
	}


	/** The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. */
	export interface HttpFaultInjection {

		/** Specification for how requests are aborted as part of fault injection. */
		abort?: HttpFaultAbort | null;

		/** Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection. */
		delay?: HttpFaultDelay | null;
	}


	/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
	export interface HttpHeaderAction {

		/** Headers to add to a matching request prior to forwarding the request to the backendService. */
		requestHeadersToAdd?: Array<HttpHeaderOption> | null;

		/** A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService. */
		requestHeadersToRemove?: Array<string> | null;

		/** Headers to add the response prior to sending the response back to the client. */
		responseHeadersToAdd?: Array<HttpHeaderOption> | null;

		/** A list of header names for headers that need to be removed from the response prior to sending the response back to the client. */
		responseHeadersToRemove?: Array<string> | null;
	}


	/** Specification determining how headers are added to requests or responses. */
	export interface HttpHeaderOption {

		/** The name of the header. */
		headerName?: string | null;

		/** The value of the header to add. */
		headerValue?: string | null;

		/**
		 * If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.
		 * The default value is false.
		 */
		replace?: boolean | null;
	}


	/** matchRule criteria for request header matches. */
	export interface HttpHeaderMatch {

		/**
		 * The value should exactly match contents of exactMatch.
		 * Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
		 */
		exactMatch?: string | null;

		/**
		 * The name of the HTTP header to match.
		 * For matching against the HTTP request's authority, use a headerMatch with the header name ":authority".
		 * For matching a request's method, use the headerName ":method".
		 */
		headerName?: string | null;

		/**
		 * If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
		 * The default setting is false.
		 */
		invertMatch?: boolean | null;

		/**
		 * The value of the header must start with the contents of prefixMatch.
		 * Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
		 */
		prefixMatch?: string | null;

		/**
		 * A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.
		 * Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
		 */
		presentMatch?: boolean | null;

		/** HttpRouteRuleMatch criteria for field values that must stay within the specified integer range. */
		rangeMatch?: Int64RangeMatch | null;

		/**
		 * The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see:  en.cppreference.com/w/cpp/regex/ecmascript
		 * For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier.
		 * Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
		 * Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
		 */
		regexMatch?: string | null;

		/**
		 * The value of the header must end with the contents of suffixMatch.
		 * Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
		 */
		suffixMatch?: string | null;
	}


	/** HttpRouteRuleMatch criteria for field values that must stay within the specified integer range. */
	export interface Int64RangeMatch {

		/** The end of the range (exclusive) in signed long integer format. */
		rangeEnd?: string | null;

		/** The start of the range (inclusive) in signed long integer format. */
		rangeStart?: string | null;
	}


	/**
	 * Represents a legacy HTTP Health Check resource.
	 * Legacy health checks are required by network load balancers. For more information, read Health Check Concepts.
	 */
	export interface HttpHealthCheck {

		/** How often (in seconds) to send a health check. The default value is 5 seconds. */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
		healthyThreshold?: number | null;

		/** The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The TCP port number for the HTTP health check request. The default value is 80. */
		port?: number | null;

		/** The request path of the HTTP health check request. The default value is /. This field does not support query parameters. */
		requestPath?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec. */
		timeoutSec?: number | null;

		/** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
		unhealthyThreshold?: number | null;
	}


	/** Contains a list of HttpHealthCheck resources. */
	export interface HttpHealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HttpHealthCheck resources. */
		items?: Array<HttpHealthCheck> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HttpHealthCheckListWarning | null;
	}

	export interface HttpHealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		HttpHealthCheckListWarningData?: Array<HttpHealthCheckListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface HttpHealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** HttpRouteRuleMatch criteria for a request's query parameter. */
	export interface HttpQueryParameterMatch {

		/**
		 * The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
		 * Only one of presentMatch, exactMatch or regexMatch must be set.
		 */
		exactMatch?: string | null;

		/** The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails. */
		name?: string | null;

		/**
		 * Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
		 * Only one of presentMatch, exactMatch or regexMatch must be set.
		 */
		presentMatch?: boolean | null;

		/**
		 * The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see en.cppreference.com/w/cpp/regex/ecmascript
		 * Only one of presentMatch, exactMatch or regexMatch must be set.
		 * Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
		 */
		regexMatch?: string | null;
	}


	/** Specifies settings for an HTTP redirect. */
	export interface HttpRedirectAction {

		/**
		 * The host that will be used in the redirect response instead of the one that was supplied in the request.
		 * The value must be between 1 and 255 characters.
		 */
		hostRedirect?: string | null;

		/**
		 * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
		 * This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted.
		 * The default is set to false.
		 */
		httpsRedirect?: boolean | null;

		/**
		 * The path that will be used in the redirect response instead of the one that was supplied in the request.
		 * pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
		 * The value must be between 1 and 1024 characters.
		 */
		pathRedirect?: string | null;

		/**
		 * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request.
		 * prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
		 * The value must be between 1 and 1024 characters.
		 */
		prefixRedirect?: string | null;

		/**
		 * The HTTP Status code to use for this RedirectAction.
		 * Supported values are:
		 * - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
		 * - FOUND, which corresponds to 302.
		 * - SEE_OTHER which corresponds to 303.
		 * - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.
		 * - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
		 */
		redirectResponseCode?: HttpRedirectActionRedirectResponseCode | null;

		/**
		 * If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
		 * The default is set to false.
		 */
		stripQuery?: boolean | null;
	}

	export enum HttpRedirectActionRedirectResponseCode { FOUND = 0, MOVED_PERMANENTLY_DEFAULT = 1, PERMANENT_REDIRECT = 2, SEE_OTHER = 3, TEMPORARY_REDIRECT = 4 }


	/** The retry policy associates with HttpRouteRule */
	export interface HttpRetryPolicy {

		/** Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1. */
		numRetries?: string | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		perTryTimeout?: Duration | null;

		/**
		 * Specfies one or more conditions when this retry rule applies. Valid values are:
		 * - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
		 * - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504.
		 * -
		 * - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.
		 * - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.
		 * - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
		 * - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled
		 * - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded
		 * - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted
		 * - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
		 */
		retryConditions?: Array<string> | null;
	}

	export interface HttpRouteAction {

		/** The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing */
		corsPolicy?: CorsPolicy | null;

		/** The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. */
		faultInjectionPolicy?: HttpFaultInjection | null;

		/** A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. */
		requestMirrorPolicy?: RequestMirrorPolicy | null;

		/** The retry policy associates with HttpRouteRule */
		retryPolicy?: HttpRetryPolicy | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		timeout?: Duration | null;

		/** The spec for modifying the path before sending the request to the matched backend service. */
		urlRewrite?: UrlRewrite | null;

		/**
		 * A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number.
		 * Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
		 */
		weightedBackendServices?: Array<WeightedBackendService> | null;
	}


	/** A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. */
	export interface RequestMirrorPolicy {

		/** The full or partial URL to the BackendService resource being mirrored to. */
		backendService?: string | null;
	}


	/** The spec for modifying the path before sending the request to the matched backend service. */
	export interface UrlRewrite {

		/**
		 * Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite.
		 * The value must be between 1 and 255 characters.
		 */
		hostRewrite?: string | null;

		/**
		 * Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite.
		 * The value must be between 1 and 1024 characters.
		 */
		pathPrefixRewrite?: string | null;
	}


	/** In contrast to a single BackendService in  HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService */
	export interface WeightedBackendService {

		/** The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight. */
		backendService?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction | null;

		/**
		 * Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) .
		 * The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy.
		 * The value must be between 0 and 1000
		 */
		weight?: string | null;
	}


	/** An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform. */
	export interface HttpRouteRule {

		/**
		 * The short description conveying the intent of this routeRule.
		 * The description can have a maximum length of 1024 characters.
		 */
		description?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction | null;
		matchRules?: Array<HttpRouteRuleMatch> | null;

		/**
		 * For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied.
		 * You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive.
		 * Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
		 */
		priority?: number | null;
		routeAction?: HttpRouteAction | null;

		/**
		 * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified.
		 * Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
		 */
		service?: string | null;

		/** Specifies settings for an HTTP redirect. */
		urlRedirect?: HttpRedirectAction | null;
	}


	/** HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur. */
	export interface HttpRouteRuleMatch {

		/**
		 * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
		 * fullPathMatch must be between 1 and 1024 characters.
		 * Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
		 */
		fullPathMatch?: string | null;

		/** Specifies a list of header match criteria, all of which must match corresponding headers in the request. */
		headerMatches?: Array<HttpHeaderMatch> | null;

		/**
		 * Specifies that prefixMatch and fullPathMatch matches are case sensitive.
		 * The default value is false.
		 * ignoreCase must not be used with regexMatch.
		 */
		ignoreCase?: boolean | null;

		/**
		 * Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies.
		 * For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata.
		 * metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to.
		 * metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
		 */
		metadataFilters?: Array<MetadataFilter> | null;

		/**
		 * For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.
		 * The value must be between 1 and 1024 characters.
		 * Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
		 */
		prefixMatch?: string | null;

		/** Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. */
		queryParameterMatches?: Array<HttpQueryParameterMatch> | null;

		/**
		 * For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
		 * Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
		 * Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
		 */
		regexMatch?: string | null;
	}


	/**
	 * Represents a legacy HTTPS Health Check resource.
	 * Legacy health checks are required by network load balancers. For more information, read Health Check Concepts.
	 */
	export interface HttpsHealthCheck {

		/** How often (in seconds) to send a health check. The default value is 5 seconds. */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
		healthyThreshold?: number | null;

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The TCP port number for the HTTPS health check request. The default value is 443. */
		port?: number | null;

		/** The request path of the HTTPS health check request. The default value is "/". */
		requestPath?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec. */
		timeoutSec?: number | null;

		/** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
		unhealthyThreshold?: number | null;
	}


	/** Contains a list of HttpsHealthCheck resources. */
	export interface HttpsHealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HttpsHealthCheck resources. */
		items?: Array<HttpsHealthCheck> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HttpsHealthCheckListWarning | null;
	}

	export interface HttpsHealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		HttpsHealthCheckListWarningData?: Array<HttpsHealthCheckListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface HttpsHealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an Image resource.
	 * You can use images to create boot disks for your VM instances. For more information, read Images. (== resource_for {$api_version}.images ==)
	 */
	export interface Image {

		/** Size of the image tar.gz archive stored in Google Cloud Storage (in bytes). */
		archiveSizeBytes?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Size of the image when restored onto a persistent disk (in GB). */
		diskSizeGb?: string | null;

		/** The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035. */
		family?: string | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Represents a customer-supplied encryption key */
		imageEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] Type of the resource. Always compute#image for images. */
		kind?: string | null;

		/**
		 * A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve an image.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this image. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string } | null;

		/** Integer license codes indicating which licenses are attached to this image. */
		licenseCodes?: Array<string> | null;

		/** Any applicable license URI. */
		licenses?: Array<string> | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The parameters of the raw disk image. */
		rawDisk?: ImageRawDisk | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Initial State for shielded instance, these are public keys which are safe to store in public */
		shieldedInstanceInitialState?: InitialStateConfig | null;

		/**
		 * URL of the source disk used to create this image. This can be a full or valid partial URL. You must provide either this property or the rawDisk.source property but not both to create an image. For example, the following are valid values:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
		 * - projects/project/zones/zone/disks/disk
		 * - zones/zone/disks/disk
		 */
		sourceDisk?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceDiskEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name. */
		sourceDiskId?: string | null;

		/**
		 * URL of the source image used to create this image. This can be a full or valid partial URL. You must provide exactly one of:
		 * - this property, or
		 * - the rawDisk.source property, or
		 * - the sourceDisk property   in order to create an image.
		 */
		sourceImage?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceImageEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name. */
		sourceImageId?: string | null;

		/**
		 * URL of the source snapshot used to create this image. This can be a full or valid partial URL. You must provide exactly one of:
		 * - this property, or
		 * - the sourceImage property, or
		 * - the rawDisk.source property, or
		 * - the sourceDisk property   in order to create an image.
		 */
		sourceSnapshot?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name. */
		sourceSnapshotId?: string | null;

		/** The type of the image used to create this disk. The default and only value is RAW */
		sourceType?: ImageSourceType | null;

		/** [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY. */
		status?: ImageStatus | null;

		/** Cloud Storage bucket storage location of the image (regional or multi-regional). */
		storageLocations?: Array<string> | null;
	}

	export interface ImageRawDisk {

		/** The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created. */
		containerType?: ImageRawDiskContainerType | null;

		/**
		 * [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
		 * Pattern: [a-f0-9]{40}
		 */
		sha1Checksum?: string | null;

		/** The full Google Cloud Storage URL where the disk image is stored. You must provide either this property or the sourceDisk property but not both. */
		source?: string | null;
	}

	export enum ImageRawDiskContainerType { TAR = 0 }

	export enum ImageSourceType { RAW = 0 }

	export enum ImageStatus { DELETING = 0, FAILED = 1, PENDING = 2, READY = 3 }


	/** Contains a list of images. */
	export interface ImageList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Image resources. */
		items?: Array<Image> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ImageListWarning | null;
	}

	export interface ImageListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ImageListWarningData?: Array<ImageListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ImageListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an Instance resource.
	 * An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances. (== resource_for {$api_version}.instances ==)
	 */
	export interface Instance {

		/** Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding. */
		canIpForward?: boolean | null;

		/** [Output Only] The CPU platform used by this instance. */
		cpuPlatform?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Whether the resource should be protected against deletion. */
		deletionProtection?: boolean | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Array of disks associated with this instance. Persistent disks must be created before you can assign them. */
		disks?: Array<AttachedDisk> | null;

		/** A set of Display Device options */
		displayDevice?: DisplayDevice | null;

		/**
		 * Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance.
		 * To see the latest fingerprint, make get() request to the instance.
		 */
		fingerprint?: string | null;

		/** A list of the type and count of accelerator cards attached to the instance. */
		guestAccelerators?: Array<AcceleratorConfig> | null;

		/** Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS. */
		hostname?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#instance for instances. */
		kind?: string | null;

		/**
		 * A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.
		 * To see the latest fingerprint, make get() request to the instance.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this instance. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string } | null;

		/**
		 * Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type:
		 * zones/us-central1-f/machineTypes/n1-standard-1
		 * To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB):
		 * zones/zone/machineTypes/custom-CPUS-MEMORY
		 * For example: zones/us-central1-f/machineTypes/custom-4-5120
		 * For a full list of restrictions, read the Specifications for custom machine types.
		 */
		machineType?: string | null;

		/** A metadata key/value entry. */
		metadata?: Metadata | null;

		/** Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". */
		minCpuPlatform?: string | null;

		/**
		 * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance. */
		networkInterfaces?: Array<NetworkInterface> | null;

		/** Specifies the reservations that this instance can consume from. */
		reservationAffinity?: ReservationAffinity | null;

		/** Resource policies applied to this instance. */
		resourcePolicies?: Array<string> | null;

		/** Sets the scheduling options for an Instance. NextID: 10 */
		scheduling?: Scheduling | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/**
		 * A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported.
		 * Service accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.
		 */
		serviceAccounts?: Array<ServiceAccount> | null;

		/** A set of Shielded Instance options. */
		shieldedInstanceConfig?: ShieldedInstanceConfig | null;

		/** The policy describes the baseline against which Instance boot integrity is measured. */
		shieldedInstanceIntegrityPolicy?: ShieldedInstanceIntegrityPolicy | null;

		/** [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity. */
		startRestricted?: boolean | null;

		/** [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, STOPPED, SUSPENDING, SUSPENDED, and TERMINATED. */
		status?: InstanceStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;

		/** A set of instance tags. */
		tags?: Tags | null;

		/** [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}


	/** A metadata key/value entry. */
	export interface Metadata {

		/**
		 * Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve the resource.
		 */
		fingerprint?: string | null;

		/** Array of key/value pairs. The total size of all keys and values must be less than 512 KB. */
		MetadataItems?: Array<MetadataItems> | null;

		/** [Output Only] Type of the resource. Always compute#metadata for metadata. */
		kind?: string | null;
	}

	export interface MetadataItems {

		/**
		 * Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
		 * Pattern: [a-zA-Z0-9-_]{1,128}
		 */
		key?: string | null;

		/** Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB). */
		value?: string | null;
	}


	/** A network interface resource attached to an instance. */
	export interface NetworkInterface {

		/** An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access. */
		accessConfigs?: Array<AccessConfig> | null;

		/** An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks. */
		aliasIpRanges?: Array<AliasIpRange> | null;

		/** Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface, otherwise the request will fail with error 412 conditionNotMet. */
		fingerprint?: string | null;

		/** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
		kind?: string | null;

		/** [Output Only] The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc. */
		name?: string | null;

		/**
		 * URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.
		 * If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/project/global/networks/network
		 * - projects/project/global/networks/network
		 * - global/networks/default
		 */
		network?: string | null;

		/** An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system. */
		networkIP?: string | null;

		/**
		 * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork
		 * - regions/region/subnetworks/subnetwork
		 */
		subnetwork?: string | null;
	}


	/** Specifies the reservations that this instance can consume from. */
	export interface ReservationAffinity {

		/** Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples. */
		consumeReservationType?: ReservationAffinityConsumeReservationType | null;

		/** Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value. */
		key?: string | null;

		/** Corresponds to the label values of a reservation resource. */
		values?: Array<string> | null;
	}

	export enum ReservationAffinityConsumeReservationType { ANY_RESERVATION = 0, NO_RESERVATION = 1, SPECIFIC_RESERVATION = 2, UNSPECIFIED = 3 }


	/** Sets the scheduling options for an Instance. NextID: 10 */
	export interface Scheduling {

		/**
		 * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted.
		 * By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
		 */
		automaticRestart?: boolean | null;

		/** A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity. */
		nodeAffinities?: Array<SchedulingNodeAffinity> | null;

		/** Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options. */
		onHostMaintenance?: SchedulingOnHostMaintenance | null;

		/** Defines whether the instance is preemptible. This can only be set during instance creation, it cannot be set or changed after the instance has been created. */
		preemptible?: boolean | null;
	}


	/** Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. */
	export interface SchedulingNodeAffinity {

		/** Corresponds to the label key of Node resource. */
		key?: string | null;

		/** Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity. */
		operator?: SchedulingNodeAffinityOperator | null;

		/** Corresponds to the label values of Node resource. */
		values?: Array<string> | null;
	}

	export enum SchedulingNodeAffinityOperator { IN = 0, NOT_IN = 1, OPERATOR_UNSPECIFIED = 2 }

	export enum SchedulingOnHostMaintenance { MIGRATE = 0, TERMINATE = 1 }


	/** A service account. */
	export interface ServiceAccount {

		/** Email address of the service account. */
		email?: string | null;

		/** The list of scopes to be made available for this service account. */
		scopes?: Array<string> | null;
	}


	/** A set of Shielded Instance options. */
	export interface ShieldedInstanceConfig {

		/** Defines whether the instance has integrity monitoring enabled. */
		enableIntegrityMonitoring?: boolean | null;

		/** Defines whether the instance has Secure Boot enabled. */
		enableSecureBoot?: boolean | null;

		/** Defines whether the instance has the vTPM enabled. */
		enableVtpm?: boolean | null;
	}


	/** The policy describes the baseline against which Instance boot integrity is measured. */
	export interface ShieldedInstanceIntegrityPolicy {

		/** Updates the integrity policy baseline using the measurements from the VM instance's most recent boot. */
		updateAutoLearnPolicy?: boolean | null;
	}

	export enum InstanceStatus { DEPROVISIONING = 0, PROVISIONING = 1, REPAIRING = 2, RUNNING = 3, STAGING = 4, STOPPED = 5, STOPPING = 6, SUSPENDED = 7, SUSPENDING = 8, TERMINATED = 9 }


	/** A set of instance tags. */
	export interface Tags {

		/**
		 * Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags.
		 * To see the latest fingerprint, make get() request to the instance.
		 */
		fingerprint?: string | null;

		/** An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035. */
		items?: Array<string> | null;
	}

	export interface InstanceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** An object that contains a list of instances scoped by zone. */
		items?: {[id: string]: InstancesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceAggregatedListWarning | null;
	}

	export interface InstancesScopedList {

		/** [Output Only] A list of instances contained in this scope. */
		instances?: Array<Instance> | null;

		/** [Output Only] Informational warning which replaces the list of instances when the list is empty. */
		warning?: InstancesScopedListWarning | null;
	}

	export interface InstancesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstancesScopedListWarningData?: Array<InstancesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstancesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceAggregatedListWarningData?: Array<InstanceAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an Instance Group resource.
	 * Instance Groups can be used to configure a target for load balancing.
	 * Instance groups can either be managed or unmanaged.
	 * To create  managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead.
	 * Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups.
	 * For more information, read Instance groups.
	 * (== resource_for {$api_version}.instanceGroups ==) (== resource_for {$api_version}.regionInstanceGroups ==)
	 */
	export interface InstanceGroup {

		/** [Output Only] The creation timestamp for this instance group in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently. */
		fingerprint?: string | null;

		/** [Output Only] A unique identifier for this instance group, generated by the server. */
		id?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceGroup for instance groups. */
		kind?: string | null;

		/**
		 * The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * Assigns a name to a port number. For example: {name: "http", port: 80}
		 * This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: "http", port: 80},{name: "http", port: 8080}]
		 * Named ports apply to all instances in this instance group.
		 */
		namedPorts?: Array<NamedPort> | null;

		/** The URL of the network to which all instances in the instance group belong. */
		network?: string | null;

		/** [Output Only] The URL of the region where the instance group is located (for regional resources). */
		region?: string | null;

		/** [Output Only] The URL for this instance group. The server generates this URL. */
		selfLink?: string | null;

		/** [Output Only] The total number of instances in the instance group. */
		size?: number | null;

		/** [Output Only] The URL of the subnetwork to which all instances in the instance group belong. */
		subnetwork?: string | null;

		/** [Output Only] The URL of the zone where the instance group is located (for zonal resources). */
		zone?: string | null;
	}


	/** The named port. For example: . */
	export interface NamedPort {

		/** The name for this named port. The name must be 1-63 characters long, and comply with RFC1035. */
		name?: string | null;

		/** The port number, which can be a value between 1 and 65535. */
		port?: number | null;
	}

	export interface InstanceGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupsScopedList resources. */
		items?: {[id: string]: InstanceGroupsScopedList } | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupAggregatedListWarning | null;
	}

	export interface InstanceGroupsScopedList {

		/** [Output Only] The list of instance groups that are contained in this scope. */
		instanceGroups?: Array<InstanceGroup> | null;

		/** [Output Only] An informational warning that replaces the list of instance groups when the list is empty. */
		warning?: InstanceGroupsScopedListWarning | null;
	}

	export interface InstanceGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupsScopedListWarningData?: Array<InstanceGroupsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupAggregatedListWarningData?: Array<InstanceGroupAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** A list of InstanceGroup resources. */
	export interface InstanceGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroup resources. */
		items?: Array<InstanceGroup> | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupListWarning | null;
	}

	export interface InstanceGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupListWarningData?: Array<InstanceGroupListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Managed Instance Group resource.
	 * An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups.
	 * For zonal Managed Instance Group, use the instanceGroupManagers resource.
	 * For regional Managed Instance Group, use the regionInstanceGroupManagers resource. (== resource_for {$api_version}.instanceGroupManagers ==) (== resource_for {$api_version}.regionInstanceGroupManagers ==)
	 */
	export interface InstanceGroupManager {

		/** The autohealing policy for this managed instance group. You can specify only one value. */
		autoHealingPolicies?: Array<InstanceGroupManagerAutoHealingPolicy> | null;

		/**
		 * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
		 * Pattern: [a-z][-a-z0-9]{0,57}
		 */
		baseInstanceName?: string | null;

		/** [Output Only] The creation timestamp for this managed instance group in RFC3339 text format. */
		creationTimestamp?: string | null;
		currentActions?: InstanceGroupManagerActionsSummary | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		distributionPolicy?: DistributionPolicy | null;

		/**
		 * Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
		 */
		fingerprint?: string | null;

		/** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] The URL of the Instance Group resource. */
		instanceGroup?: string | null;

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. */
		instanceTemplate?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups. */
		kind?: string | null;

		/**
		 * The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Named ports configured for the Instance Groups complementary to this Instance Group Manager. */
		namedPorts?: Array<NamedPort> | null;

		/** [Output Only] The URL of the region where the managed instance group resides (for regional resources). */
		region?: string | null;

		/** [Output Only] The URL for this managed instance group. The server defines this URL. */
		selfLink?: string | null;
		status?: InstanceGroupManagerStatus | null;

		/** The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group. */
		targetPools?: Array<string> | null;

		/** The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number. */
		targetSize?: number | null;
		updatePolicy?: InstanceGroupManagerUpdatePolicy | null;

		/**
		 * Specifies the instance templates used by this managed instance group to create instances.
		 * Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
		 */
		versions?: Array<InstanceGroupManagerVersion> | null;

		/** [Output Only] The URL of the zone where the managed instance group is located (for zonal resources). */
		zone?: string | null;
	}

	export interface InstanceGroupManagerAutoHealingPolicy {

		/** The URL for the health check that signals autohealing. */
		healthCheck?: string | null;

		/** The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600]. */
		initialDelaySec?: number | null;
	}

	export interface InstanceGroupManagerActionsSummary {

		/** [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it. */
		abandoning?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully.
		 * If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
		 */
		creating?: number | null;

		/** [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly. */
		creatingWithoutRetries?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted. */
		deleting?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions. */
		none?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template. */
		recreating?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance. */
		refreshing?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted. */
		restarting?: number | null;

		/** [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation. */
		verifying?: number | null;
	}

	export interface InstanceGroupManagerStatus {

		/** [Output Only] The URL of the Autoscaler that targets this instance group manager. */
		autoscaler?: string | null;

		/** [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified. */
		isStable?: boolean | null;
		versionTarget?: InstanceGroupManagerStatusVersionTarget | null;
	}

	export interface InstanceGroupManagerStatusVersionTarget {

		/** [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager. */
		isReached?: boolean | null;
	}

	export interface InstanceGroupManagerUpdatePolicy {

		/**
		 * The  instance redistribution policy for regional managed instance groups. Valid values are:
		 * - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region.
		 * - NONE: For non-autoscaled groups, proactive redistribution is disabled.
		 */
		instanceRedistributionType?: InstanceGroupManagerUpdatePolicyInstanceRedistributionType | null;

		/** Encapsulates numeric value that can be either absolute or relative. */
		maxSurge?: FixedOrPercent | null;

		/** Encapsulates numeric value that can be either absolute or relative. */
		maxUnavailable?: FixedOrPercent | null;

		/** Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action. */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/** What action should be used to replace instances. See minimal_action.REPLACE */
		replacementMethod?: InstanceGroupManagerUpdatePolicyReplacementMethod | null;

		/** The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls). */
		type?: InstanceGroupManagerUpdatePolicyType | null;
	}

	export enum InstanceGroupManagerUpdatePolicyInstanceRedistributionType { NONE = 0, PROACTIVE = 1 }

	export enum InstanceGroupManagerUpdatePolicyMinimalAction { NONE = 0, REFRESH = 1, REPLACE = 2, RESTART = 3 }

	export enum InstanceGroupManagerUpdatePolicyReplacementMethod { RECREATE = 0, SUBSTITUTE = 1 }

	export enum InstanceGroupManagerUpdatePolicyType { OPPORTUNISTIC = 0, PROACTIVE = 1 }

	export interface InstanceGroupManagerVersion {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. */
		instanceTemplate?: string | null;

		/** Name of the version. Unique among all versions in the scope of this managed instance group. */
		name?: string | null;

		/** Encapsulates numeric value that can be either absolute or relative. */
		targetSize?: FixedOrPercent | null;
	}

	export interface InstanceGroupManagerAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManagersScopedList resources. */
		items?: {[id: string]: InstanceGroupManagersScopedList } | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupManagerAggregatedListWarning | null;
	}

	export interface InstanceGroupManagersScopedList {

		/** [Output Only] The list of managed instance groups that are contained in the specified project and zone. */
		instanceGroupManagers?: Array<InstanceGroupManager> | null;

		/** [Output Only] The warning that replaces the list of managed instance groups when the list is empty. */
		warning?: InstanceGroupManagersScopedListWarning | null;
	}

	export interface InstanceGroupManagersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupManagersScopedListWarningData?: Array<InstanceGroupManagersScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupManagersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceGroupManagerAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupManagerAggregatedListWarningData?: Array<InstanceGroupManagerAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupManagerAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** [Output Only] A list of managed instance groups. */
	export interface InstanceGroupManagerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManager resources. */
		items?: Array<InstanceGroupManager> | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupManagerListWarning | null;
	}

	export interface InstanceGroupManagerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupManagerListWarningData?: Array<InstanceGroupManagerListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupManagerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceGroupManagersAbandonInstancesRequest {

		/** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}


	/** InstanceGroupManagers.applyUpdatesToInstances */
	export interface InstanceGroupManagersApplyUpdatesRequest {

		/** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;

		/**
		 * The minimal action that you want to perform on each instance during the update:
		 * - REPLACE: At minimum, delete the instance and create it again.
		 * - RESTART: Stop the instance and start it again.
		 * - REFRESH: Do not stop the instance.
		 * - NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
		 */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/**
		 * The most disruptive action that you want to perform on each instance during the update:
		 * - REPLACE: Delete the instance and create it again.
		 * - RESTART: Stop the instance and start it again.
		 * - REFRESH: Do not stop the instance.
		 * - NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
		 */
		mostDisruptiveAllowedAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;
	}


	/** InstanceGroupManagers.createInstances */
	export interface InstanceGroupManagersCreateInstancesRequest {

		/** [Required] List of specifications of per-instance configs. */
		instances?: Array<PerInstanceConfig> | null;
	}

	export interface PerInstanceConfig {

		/** Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance config or the field needs to be unset. */
		fingerprint?: string | null;

		/** The name of a per-instance config and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance config with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance config for a VM instance that either doesn't exist or is not part of the group will result in an error. */
		name?: string | null;
	}

	export interface InstanceGroupManagersDeleteInstancesRequest {

		/** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}

	export interface InstanceGroupManagersListErrorsResponse {

		/** [Output Only] The list of errors of the managed instance group. */
		items?: Array<InstanceManagedByIgmError> | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}

	export interface InstanceManagedByIgmError {
		error?: InstanceManagedByIgmErrorManagedInstanceError | null;
		instanceActionDetails?: InstanceManagedByIgmErrorInstanceActionDetails | null;

		/** [Output Only] The time that this error occurred. This value is in RFC3339 text format. */
		timestamp?: string | null;
	}

	export interface InstanceManagedByIgmErrorManagedInstanceError {

		/** [Output Only] Error code. */
		code?: string | null;

		/** [Output Only] Error message. */
		message?: string | null;
	}

	export interface InstanceManagedByIgmErrorInstanceActionDetails {

		/** [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values: */
		action?: InstanceManagedByIgmErrorInstanceActionDetailsAction | null;

		/** [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created. */
		instance?: string | null;
		version?: ManagedInstanceVersion | null;
	}

	export enum InstanceManagedByIgmErrorInstanceActionDetailsAction { ABANDONING = 0, CREATING = 1, CREATING_WITHOUT_RETRIES = 2, DELETING = 3, NONE = 4, RECREATING = 5, REFRESHING = 6, RESTARTING = 7, VERIFYING = 8 }

	export interface ManagedInstanceVersion {

		/** [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }. */
		instanceTemplate?: string | null;

		/** [Output Only] Name of the version. */
		name?: string | null;
	}

	export interface InstanceGroupManagersListManagedInstancesResponse {

		/** [Output Only] The list of instances in the managed instance group. */
		managedInstances?: Array<ManagedInstance> | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}


	/** A Managed Instance resource. */
	export interface ManagedInstance {

		/**
		 * [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values:
		 * - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance.
		 * - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful.
		 * - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead.
		 * - RECREATING The managed instance group is recreating this instance.
		 * - DELETING The managed instance group is permanently deleting this instance.
		 * - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group.
		 * - RESTARTING The managed instance group is restarting the instance.
		 * - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance.
		 * - VERIFYING The managed instance group has created the instance and it is in the process of being verified.
		 */
		currentAction?: InstanceManagedByIgmErrorInstanceActionDetailsAction | null;

		/** [Output only] The unique identifier for this resource. This field is empty when instance does not exist. */
		id?: string | null;

		/** [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created. */
		instance?: string | null;

		/** [Output Only] Health state of the instance per health-check. */
		instanceHealth?: Array<ManagedInstanceInstanceHealth> | null;

		/** [Output Only] The status of the instance. This field is empty when the instance does not exist. */
		instanceStatus?: InstanceStatus | null;
		lastAttempt?: ManagedInstanceLastAttempt | null;
		version?: ManagedInstanceVersion | null;
	}

	export interface ManagedInstanceInstanceHealth {

		/** [Output Only] The current detailed instance health state. */
		detailedHealthState?: ManagedInstanceInstanceHealthDetailedHealthState | null;

		/** [Output Only] The URL for the health check that verifies whether the instance is healthy. */
		healthCheck?: string | null;
	}

	export enum ManagedInstanceInstanceHealthDetailedHealthState { DRAINING = 0, HEALTHY = 1, TIMEOUT = 2, UNHEALTHY = 3, UNKNOWN = 4 }

	export interface ManagedInstanceLastAttempt {

		/** [Output Only] Encountered errors during the last attempt to create or delete the instance. */
		errors?: ManagedInstanceLastAttemptErrors | null;
	}

	export interface ManagedInstanceLastAttemptErrors {

		/** [Output Only] The array of errors encountered while processing this operation. */
		ManagedInstanceLastAttemptErrorsErrors?: Array<ManagedInstanceLastAttemptErrorsErrors> | null;
	}

	export interface ManagedInstanceLastAttemptErrorsErrors {

		/** [Output Only] The error type identifier for this error. */
		code?: string | null;

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location?: string | null;

		/** [Output Only] An optional, human-readable error message. */
		message?: string | null;
	}

	export interface InstanceGroupManagersRecreateInstancesRequest {

		/** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}

	export interface InstanceGroupManagersSetInstanceTemplateRequest {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. */
		instanceTemplate?: string | null;
	}

	export interface InstanceGroupManagersSetTargetPoolsRequest {

		/** The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint?: string | null;

		/** The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings. */
		targetPools?: Array<string> | null;
	}

	export interface InstanceGroupsAddInstancesRequest {

		/** The list of instances to add to the instance group. */
		instances?: Array<InstanceReference> | null;
	}

	export interface InstanceReference {

		/** The URL for a specific instance. */
		instance?: string | null;
	}

	export interface InstanceGroupsListInstances {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceWithNamedPorts resources. */
		items?: Array<InstanceWithNamedPorts> | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupsListInstancesWarning | null;
	}

	export interface InstanceWithNamedPorts {

		/** [Output Only] The URL of the instance. */
		instance?: string | null;

		/** [Output Only] The named ports that belong to this instance group. */
		namedPorts?: Array<NamedPort> | null;

		/** [Output Only] The status of the instance. */
		status?: InstanceStatus | null;
	}

	export interface InstanceGroupsListInstancesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceGroupsListInstancesWarningData?: Array<InstanceGroupsListInstancesWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceGroupsListInstancesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceGroupsListInstancesRequest {

		/** A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state. */
		instanceState?: InstanceGroupsListInstancesRequestInstanceState | null;
	}

	export enum InstanceGroupsListInstancesRequestInstanceState { ALL = 0, RUNNING = 1 }

	export interface InstanceGroupsRemoveInstancesRequest {

		/** The list of instances to remove from the instance group. */
		instances?: Array<InstanceReference> | null;
	}

	export interface InstanceGroupsSetNamedPortsRequest {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet. */
		fingerprint?: string | null;

		/** The list of named ports to set for this instance group. */
		namedPorts?: Array<NamedPort> | null;
	}


	/** Contains a list of instances. */
	export interface InstanceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Instance resources. */
		items?: Array<Instance> | null;

		/** [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceListWarning | null;
	}

	export interface InstanceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceListWarningData?: Array<InstanceListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of instance referrers. */
	export interface InstanceListReferrers {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Reference resources. */
		items?: Array<Reference> | null;

		/** [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceListReferrersWarning | null;
	}


	/** Represents a reference to a resource. */
	export interface Reference {

		/** [Output Only] Type of the resource. Always compute#reference for references. */
		kind?: string | null;

		/**
		 * A description of the reference type with no implied semantics. Possible values include:
		 * - MEMBER_OF
		 */
		referenceType?: string | null;

		/** URL of the resource which refers to the target. */
		referrer?: string | null;

		/** URL of the resource to which this reference points. */
		target?: string | null;
	}

	export interface InstanceListReferrersWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceListReferrersWarningData?: Array<InstanceListReferrersWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceListReferrersWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstanceMoveRequest {

		/**
		 * The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone
		 * - projects/project/zones/zone
		 * - zones/zone
		 */
		destinationZone?: string | null;

		/**
		 * The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance
		 * - projects/project/zones/zone/instances/instance
		 * - zones/zone/instances/instance
		 */
		targetInstance?: string | null;
	}

	export interface InstanceProperties {

		/** Enables instances created based on this template to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information. */
		canIpForward?: boolean | null;

		/** An optional text description for the instances that are created from this instance template. */
		description?: string | null;

		/** An array of disks that are associated with the instances that are created from this template. */
		disks?: Array<AttachedDisk> | null;

		/** A list of guest accelerator cards' type and count to use for instances created from the instance template. */
		guestAccelerators?: Array<AcceleratorConfig> | null;

		/** Labels to apply to instances that are created from this template. */
		labels?: {[id: string]: string } | null;

		/** The machine type to use for instances that are created from this template. */
		machineType?: string | null;

		/** A metadata key/value entry. */
		metadata?: Metadata | null;

		/** Minimum cpu/platform to be used by this instance. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform. */
		minCpuPlatform?: string | null;

		/** An array of network access configurations for this interface. */
		networkInterfaces?: Array<NetworkInterface> | null;

		/** Specifies the reservations that this instance can consume from. */
		reservationAffinity?: ReservationAffinity | null;

		/** Resource policies (names, not ULRs) applied to instances created from this template. */
		resourcePolicies?: Array<string> | null;

		/** Sets the scheduling options for an Instance. NextID: 10 */
		scheduling?: Scheduling | null;

		/** A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this template. Use metadata queries to obtain the access tokens for these instances. */
		serviceAccounts?: Array<ServiceAccount> | null;

		/** A set of Shielded Instance options. */
		shieldedInstanceConfig?: ShieldedInstanceConfig | null;

		/** A set of instance tags. */
		tags?: Tags | null;
	}


	/**
	 * Represents an Instance Template resource.
	 * You can use instance templates to create VM instances and managed instance groups. For more information, read Instance Templates. (== resource_for {$api_version}.instanceTemplates ==)
	 */
	export interface InstanceTemplate {

		/** [Output Only] The creation timestamp for this instance template in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A unique identifier for this instance template. The server defines this identifier. */
		id?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceTemplate for instance templates. */
		kind?: string | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;
		properties?: InstanceProperties | null;

		/** [Output Only] The URL for this instance template. The server defines this URL. */
		selfLink?: string | null;

		/**
		 * The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance
		 * - projects/project/zones/zone/instances/instance
		 */
		sourceInstance?: string | null;

		/** A specification of the parameters to use when creating the instance template from a source instance. */
		sourceInstanceParams?: SourceInstanceParams | null;
	}


	/** A specification of the parameters to use when creating the instance template from a source instance. */
	export interface SourceInstanceParams {

		/** Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes. */
		diskConfigs?: Array<DiskInstantiationConfig> | null;
	}


	/** A list of instance templates. */
	export interface InstanceTemplateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceTemplate resources. */
		items?: Array<InstanceTemplate> | null;

		/** [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceTemplateListWarning | null;
	}

	export interface InstanceTemplateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InstanceTemplateListWarningData?: Array<InstanceTemplateListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InstanceTemplateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InstancesAddResourcePoliciesRequest {

		/** Resource policies to be added to this instance. */
		resourcePolicies?: Array<string> | null;
	}

	export interface InstancesRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this instance. */
		resourcePolicies?: Array<string> | null;
	}

	export interface InstancesSetLabelsRequest {

		/** Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels. */
		labelFingerprint?: string | null;
		labels?: {[id: string]: string } | null;
	}

	export interface InstancesSetMachineResourcesRequest {

		/** A list of the type and count of accelerator cards attached to the instance. */
		guestAccelerators?: Array<AcceleratorConfig> | null;
	}

	export interface InstancesSetMachineTypeRequest {

		/** Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1 */
		machineType?: string | null;
	}

	export interface InstancesSetMinCpuPlatformRequest {

		/** Minimum cpu/platform this instance should be started at. */
		minCpuPlatform?: string | null;
	}

	export interface InstancesSetServiceAccountRequest {

		/** Email address of the service account. */
		email?: string | null;

		/** The list of scopes to be made available for this service account. */
		scopes?: Array<string> | null;
	}

	export interface InstancesStartWithEncryptionKeyRequest {

		/**
		 * Array of disks associated with this instance that are protected with a customer-supplied encryption key.
		 * In order to start the instance, the disk url and its corresponding key must be provided.
		 * If the disk is not protected with a customer-supplied encryption key it should not be specified.
		 */
		disks?: Array<CustomerEncryptionKeyProtectedDisk> | null;
	}


	/**
	 * Represents an Interconnect resource.
	 * An Interconnect resource is a dedicated connection between the GCP network and your on-premises network. For more information, read the  Dedicated Interconnect Overview. (== resource_for {$api_version}.interconnects ==)
	 */
	export interface Interconnect {

		/** Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true. */
		adminEnabled?: boolean | null;

		/** [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG. */
		circuitInfos?: Array<InterconnectCircuitInfo> | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect. */
		customerName?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A list of outages expected for this Interconnect. */
		expectedOutages?: Array<InterconnectOutageNotification> | null;

		/** [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests. */
		googleIpAddress?: string | null;

		/** [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. */
		googleReferenceId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect. */
		interconnectAttachments?: Array<string> | null;

		/**
		 * Type of interconnect, which can take one of the following values:
		 * - PARTNER: A partner-managed interconnection shared between customers though a partner.
		 * - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
		 */
		interconnectType?: InterconnectInterconnectType | null;

		/** [Output Only] Type of the resource. Always compute#interconnect for interconnects. */
		kind?: string | null;

		/**
		 * Type of link requested, which can take one of the following values:
		 * - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics
		 * - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
		 */
		linkType?: InterconnectLinkType | null;

		/** URL of the InterconnectLocation object that represents where this connection is to be provisioned. */
		location?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Stackdriver logs alerting and Cloud Notifications. */
		nocContactEmail?: string | null;

		/**
		 * [Output Only] The current status of this Interconnect's functionality, which can take one of the following values:
		 * - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect.
		 * - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect.
		 * - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
		 */
		operationalStatus?: InterconnectOperationalStatus | null;

		/** [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests. */
		peerIpAddress?: string | null;

		/** [Output Only] Number of links actually provisioned in this interconnect. */
		provisionedLinkCount?: number | null;

		/** Target number of physical links in the link bundle, as requested by the customer. */
		requestedLinkCount?: number | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * [Output Only] The current state of Interconnect functionality, which can take one of the following values:
		 * - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect.
		 * - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect.
		 * - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
		 */
		state?: InterconnectState | null;
	}


	/** Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only. Next id: 4 */
	export interface InterconnectCircuitInfo {

		/** Customer-side demarc ID for this circuit. */
		customerDemarcId?: string | null;

		/** Google-assigned unique ID for this circuit. Assigned at circuit turn-up. */
		googleCircuitId?: string | null;

		/** Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA. */
		googleDemarcId?: string | null;
	}


	/** Description of a planned outage on this Interconnect. Next id: 9 */
	export interface InterconnectOutageNotification {

		/** If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected. */
		affectedCircuits?: Array<string> | null;

		/** A description about the purpose of the outage. */
		description?: string | null;

		/** Scheduled end time for the outage (milliseconds since Unix epoch). */
		endTime?: string | null;

		/**
		 * Form this outage is expected to take, which can take one of the following values:
		 * - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window.
		 * - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
		 */
		issueType?: InterconnectOutageNotificationIssueType | null;

		/** Unique identifier for this outage notification. */
		name?: string | null;

		/**
		 * The party that generated this notification, which can take the following value:
		 * - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
		 */
		source?: InterconnectOutageNotificationSource | null;

		/** Scheduled start time for the outage (milliseconds since Unix epoch). */
		startTime?: string | null;

		/**
		 * State of this notification, which can take one of the following values:
		 * - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling.
		 * - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
		 */
		state?: InterconnectOutageNotificationState | null;
	}

	export enum InterconnectOutageNotificationIssueType { IT_OUTAGE = 0, IT_PARTIAL_OUTAGE = 1, OUTAGE = 2, PARTIAL_OUTAGE = 3 }

	export enum InterconnectOutageNotificationSource { GOOGLE = 0, NSRC_GOOGLE = 1 }

	export enum InterconnectOutageNotificationState { ACTIVE = 0, CANCELLED = 1, COMPLETED = 2, NS_ACTIVE = 3, NS_CANCELED = 4 }

	export enum InterconnectInterconnectType { DEDICATED = 0, IT_PRIVATE = 1, PARTNER = 2 }

	export enum InterconnectLinkType { LINK_TYPE_ETHERNET_100G_LR = 0, LINK_TYPE_ETHERNET_10G_LR = 1 }

	export enum InterconnectOperationalStatus { OS_ACTIVE = 0, OS_UNPROVISIONED = 1 }

	export enum InterconnectState { ACTIVE = 0, UNPROVISIONED = 1 }


	/**
	 * Represents an Interconnect Attachment (VLAN) resource.
	 * You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read  Creating VLAN Attachments. (== resource_for {$api_version}.interconnectAttachments ==)
	 */
	export interface InterconnectAttachment {

		/** Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER. */
		adminEnabled?: boolean | null;

		/**
		 * Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values:
		 * - BPS_50M: 50 Mbit/s
		 * - BPS_100M: 100 Mbit/s
		 * - BPS_200M: 200 Mbit/s
		 * - BPS_300M: 300 Mbit/s
		 * - BPS_400M: 400 Mbit/s
		 * - BPS_500M: 500 Mbit/s
		 * - BPS_1G: 1 Gbit/s
		 * - BPS_2G: 2 Gbit/s
		 * - BPS_5G: 5 Gbit/s
		 * - BPS_10G: 10 Gbit/s
		 * - BPS_20G: 20 Gbit/s
		 * - BPS_50G: 50 Gbit/s
		 */
		bandwidth?: InterconnectAttachmentBandwidth | null;

		/** Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space. */
		candidateSubnets?: Array<string> | null;

		/** [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
		cloudRouterIpAddress?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
		customerRouterIpAddress?: string | null;

		/** An optional description of this resource. */
		description?: string | null;

		/**
		 * Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values:
		 * - AVAILABILITY_DOMAIN_ANY
		 * - AVAILABILITY_DOMAIN_1
		 * - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
		 */
		edgeAvailabilityDomain?: InterconnectAttachmentEdgeAvailabilityDomain | null;

		/** [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
		googleReferenceId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** URL of the underlying Interconnect object that this attachment's traffic will traverse through. */
		interconnect?: string | null;

		/** [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values:
		 * - OS_ACTIVE: The attachment has been turned up and is ready to use.
		 * - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
		 */
		operationalStatus?: InterconnectOperationalStatus | null;

		/** [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form "XXXXX/region/domain" */
		pairingKey?: string | null;

		/** Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED. */
		partnerAsn?: string | null;

		/** Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments. */
		partnerMetadata?: InterconnectAttachmentPartnerMetadata | null;

		/** Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED. */
		privateInterconnectInfo?: InterconnectAttachmentPrivateInfo | null;

		/** [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured. */
		router?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values:
		 * - ACTIVE: The attachment has been turned up and is ready to use.
		 * - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
		 * - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side.
		 * - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it.
		 * - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it.
		 * - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
		 */
		state?: InterconnectAttachmentState | null;

		/**
		 * The type of interconnect attachment this is, which can take one of the following values:
		 * - DEDICATED: an attachment to a Dedicated Interconnect.
		 * - PARTNER: an attachment to a Partner Interconnect, created by the customer.
		 * - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
		 */
		type?: InterconnectAttachmentType | null;

		/** The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time. */
		vlanTag8021q?: number | null;
	}

	export enum InterconnectAttachmentBandwidth { BPS_100M = 0, BPS_10G = 1, BPS_1G = 2, BPS_200M = 3, BPS_20G = 4, BPS_2G = 5, BPS_300M = 6, BPS_400M = 7, BPS_500M = 8, BPS_50G = 9, BPS_50M = 10, BPS_5G = 11 }

	export enum InterconnectAttachmentEdgeAvailabilityDomain { AVAILABILITY_DOMAIN_1 = 0, AVAILABILITY_DOMAIN_2 = 1, AVAILABILITY_DOMAIN_ANY = 2 }


	/** Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments. */
	export interface InterconnectAttachmentPartnerMetadata {

		/** Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values. */
		interconnectName?: string | null;

		/** Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values. */
		partnerName?: string | null;

		/** URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values. */
		portalUrl?: string | null;
	}


	/** Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED. */
	export interface InterconnectAttachmentPrivateInfo {

		/** [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region. */
		tag8021q?: string | null;
	}

	export enum InterconnectAttachmentState { ACTIVE = 0, DEFUNCT = 1, PARTNER_REQUEST_RECEIVED = 2, PENDING_CUSTOMER = 3, PENDING_PARTNER = 4, STATE_UNSPECIFIED = 5, UNPROVISIONED = 6 }

	export enum InterconnectAttachmentType { DEDICATED = 0, PARTNER = 1, PARTNER_PROVIDER = 2 }

	export interface InterconnectAttachmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectAttachmentsScopedList resources. */
		items?: {[id: string]: InterconnectAttachmentsScopedList } | null;

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectAttachmentAggregatedListWarning | null;
	}

	export interface InterconnectAttachmentsScopedList {

		/** A list of interconnect attachments contained in this scope. */
		interconnectAttachments?: Array<InterconnectAttachment> | null;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: InterconnectAttachmentsScopedListWarning | null;
	}

	export interface InterconnectAttachmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InterconnectAttachmentsScopedListWarningData?: Array<InterconnectAttachmentsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InterconnectAttachmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface InterconnectAttachmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InterconnectAttachmentAggregatedListWarningData?: Array<InterconnectAttachmentAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InterconnectAttachmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Response to the list request, and contains a list of interconnect attachments. */
	export interface InterconnectAttachmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectAttachment resources. */
		items?: Array<InterconnectAttachment> | null;

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectAttachmentListWarning | null;
	}

	export interface InterconnectAttachmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InterconnectAttachmentListWarningData?: Array<InterconnectAttachmentListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InterconnectAttachmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Diagnostics information about interconnect, contains detailed and current technical information about Google's side of the connection. */
	export interface InterconnectDiagnostics {

		/** A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled. */
		arpCaches?: Array<InterconnectDiagnosticsARPEntry> | null;

		/** A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect. */
		links?: Array<InterconnectDiagnosticsLinkStatus> | null;

		/** The MAC address of the Interconnect's bundle interface. */
		macAddress?: string | null;
	}


	/** Describing the ARP neighbor entries seen on this link */
	export interface InterconnectDiagnosticsARPEntry {

		/** The IP address of this ARP neighbor. */
		ipAddress?: string | null;

		/** The MAC address of this ARP neighbor. */
		macAddress?: string | null;
	}

	export interface InterconnectDiagnosticsLinkStatus {

		/** A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled */
		arpCaches?: Array<InterconnectDiagnosticsARPEntry> | null;

		/** The unique ID for this link assigned during turn up by Google. */
		circuitId?: string | null;

		/** The Demarc address assigned by Google and provided in the LoA. */
		googleDemarc?: string | null;
		lacpStatus?: InterconnectDiagnosticsLinkLACPStatus | null;
		receivingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower | null;
		transmittingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower | null;
	}

	export interface InterconnectDiagnosticsLinkLACPStatus {

		/** System ID of the port on Google's side of the LACP exchange. */
		googleSystemId?: string | null;

		/** System ID of the port on the neighbor's side of the LACP exchange. */
		neighborSystemId?: string | null;

		/**
		 * The state of a LACP link, which can take one of the following values:
		 * - ACTIVE: The link is configured and active within the bundle.
		 * - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty.
		 */
		state?: InterconnectDiagnosticsLinkLACPStatusState | null;
	}

	export enum InterconnectDiagnosticsLinkLACPStatusState { ACTIVE = 0, DETACHED = 1 }

	export interface InterconnectDiagnosticsLinkOpticalPower {

		/**
		 * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:
		 * - OK: The value has not crossed a warning threshold.
		 * - LOW_WARNING: The value has crossed below the low warning threshold.
		 * - HIGH_WARNING: The value has crossed above the high warning threshold.
		 * - LOW_ALARM: The value has crossed below the low alarm threshold.
		 * - HIGH_ALARM: The value has crossed above the high alarm threshold.
		 */
		state?: InterconnectDiagnosticsLinkOpticalPowerState | null;

		/** Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links. */
		value?: number | null;
	}

	export enum InterconnectDiagnosticsLinkOpticalPowerState { HIGH_ALARM = 0, HIGH_WARNING = 1, LOW_ALARM = 2, LOW_WARNING = 3, OK = 4 }


	/** Response to the list request, and contains a list of interconnects. */
	export interface InterconnectList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Interconnect resources. */
		items?: Array<Interconnect> | null;

		/** [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectListWarning | null;
	}

	export interface InterconnectListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InterconnectListWarningData?: Array<InterconnectListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InterconnectListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an Interconnect Attachment (VLAN) Location resource.
	 * You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read  Creating VLAN Attachments.
	 */
	export interface InterconnectLocation {

		/** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
		address?: string | null;

		/** [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: "zone1" or "zone2". */
		availabilityZone?: string | null;

		/** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
		city?: string | null;

		/**
		 * [Output Only] Continent for this location, which can take one of the following values:
		 * - AFRICA
		 * - ASIA_PAC
		 * - EUROPE
		 * - NORTH_AMERICA
		 * - SOUTH_AMERICA
		 */
		continent?: InterconnectLocationContinent | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] An optional description of the resource. */
		description?: string | null;

		/** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
		facilityProvider?: string | null;

		/** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
		facilityProviderFacilityId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
		peeringdbFacilityId?: string | null;

		/** [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions. */
		regionInfos?: Array<InterconnectLocationRegionInfo> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * [Output Only] The status of this InterconnectLocation, which can take one of the following values:
		 * - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects.
		 * - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects.
		 */
		status?: InterconnectLocationStatus | null;
	}

	export enum InterconnectLocationContinent { AFRICA = 0, ASIA_PAC = 1, C_AFRICA = 2, C_ASIA_PAC = 3, C_EUROPE = 4, C_NORTH_AMERICA = 5, C_SOUTH_AMERICA = 6, EUROPE = 7, NORTH_AMERICA = 8, SOUTH_AMERICA = 9 }


	/** Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region. */
	export interface InterconnectLocationRegionInfo {

		/** Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region. */
		expectedRttMs?: string | null;

		/** Identifies the network presence of this location. */
		locationPresence?: InterconnectLocationRegionInfoLocationPresence | null;

		/** URL for the region of this location. */
		region?: string | null;
	}

	export enum InterconnectLocationRegionInfoLocationPresence { GLOBAL = 0, LOCAL_REGION = 1, LP_GLOBAL = 2, LP_LOCAL_REGION = 3 }

	export enum InterconnectLocationStatus { AVAILABLE = 0, CLOSED = 1 }


	/** Response to the list request, and contains a list of interconnect locations. */
	export interface InterconnectLocationList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectLocation resources. */
		items?: Array<InterconnectLocation> | null;

		/** [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectLocationListWarning | null;
	}

	export interface InterconnectLocationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		InterconnectLocationListWarningData?: Array<InterconnectLocationListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface InterconnectLocationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Response for the InterconnectsGetDiagnosticsRequest. */
	export interface InterconnectsGetDiagnosticsResponse {

		/** Diagnostics information about interconnect, contains detailed and current technical information about Google's side of the connection. */
		result?: InterconnectDiagnostics | null;
	}


	/**
	 * Represents a License resource.
	 * A License represents billing and aggregate usage data for public and marketplace images.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. (== resource_for {$api_version}.licenses ==)
	 */
	export interface License {

		/** [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee. */
		chargesUseFee?: boolean | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#license for licenses. */
		kind?: string | null;

		/** [Output Only] The unique code used to attach this license to images, snapshots, and disks. */
		licenseCode?: string | null;

		/**
		 * Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;
		resourceRequirements?: LicenseResourceRequirements | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk. */
		transferable?: boolean | null;
	}

	export interface LicenseResourceRequirements {

		/** Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start. */
		minGuestCpuCount?: number | null;

		/** Minimum memory required to use the Instance. Enforced at Instance creation and Instance start. */
		minMemoryMb?: number | null;
	}


	/**
	 * Represents a License Code resource.
	 * A License Code is a unique identifier used to represent a license resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. (== resource_for {$api_version}.licenseCodes ==)
	 */
	export interface LicenseCode {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] Description of this License Code. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#licenseCode for licenses. */
		kind?: string | null;

		/** [Output Only] URL and description aliases of Licenses with the same License Code. */
		licenseAlias?: Array<LicenseCodeLicenseAlias> | null;

		/**
		 * [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer.
		 * Pattern: [0-9]{0,20}?
		 */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Current state of this License Code. */
		state?: LicenseCodeState | null;

		/** [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred. */
		transferable?: boolean | null;
	}

	export interface LicenseCodeLicenseAlias {

		/** [Output Only] Description of this License Code. */
		description?: string | null;

		/** [Output Only] URL of license corresponding to this License Code. */
		selfLink?: string | null;
	}

	export enum LicenseCodeState { DISABLED = 0, ENABLED = 1, RESTRICTED = 2, STATE_UNSPECIFIED = 3, TERMINATED = 4 }

	export interface LicensesListResponse {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of License resources. */
		items?: Array<License> | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: LicensesListResponseWarning | null;
	}

	export interface LicensesListResponseWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		LicensesListResponseWarningData?: Array<LicensesListResponseWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface LicensesListResponseWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Machine Type resource.
	 * You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types. (== resource_for {$api_version}.machineTypes ==)
	 */
	export interface MachineType {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/** [Output Only] The number of virtual CPUs that are available to the instance. */
		guestCpus?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Deprecated] This property is deprecated and will never be populated with any relevant values. */
		imageSpaceGb?: number | null;

		/** [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information. */
		isSharedCpu?: boolean | null;

		/** [Output Only] The type of the resource. Always compute#machineType for machine types. */
		kind?: string | null;

		/** [Output Only] Maximum persistent disks allowed. */
		maximumPersistentDisks?: number | null;

		/** [Output Only] Maximum total persistent disks size (GB) allowed. */
		maximumPersistentDisksSizeGb?: string | null;

		/** [Output Only] The amount of physical memory available to the instance, defined in MB. */
		memoryMb?: number | null;

		/**
		 * [Output Only] Name of the resource.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] A list of extended scratch disks assigned to the instance. */
		MachineTypeScratchDisks?: Array<MachineTypeScratchDisks> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the machine type resides, such as us-central1-a. */
		zone?: string | null;
	}

	export interface MachineTypeScratchDisks {

		/** Size of the scratch disk, defined in GB. */
		diskGb?: number | null;
	}

	export interface MachineTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of MachineTypesScopedList resources. */
		items?: {[id: string]: MachineTypesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: MachineTypeAggregatedListWarning | null;
	}

	export interface MachineTypesScopedList {

		/** [Output Only] A list of machine types contained in this scope. */
		machineTypes?: Array<MachineType> | null;

		/** [Output Only] An informational warning that appears when the machine types list is empty. */
		warning?: MachineTypesScopedListWarning | null;
	}

	export interface MachineTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		MachineTypesScopedListWarningData?: Array<MachineTypesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface MachineTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface MachineTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		MachineTypeAggregatedListWarningData?: Array<MachineTypeAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface MachineTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of machine types. */
	export interface MachineTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of MachineType resources. */
		items?: Array<MachineType> | null;

		/** [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: MachineTypeListWarning | null;
	}

	export interface MachineTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		MachineTypeListWarningData?: Array<MachineTypeListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface MachineTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a VPC Network resource.
	 * Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network. (== resource_for {$api_version}.networks ==)
	 */
	export interface Network {

		/**
		 * Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created.
		 * Pattern: [0-9]{1,3}(?:\.[0-9]{1,3}){3}/[0-9]{1,2}
		 */
		IPv4Range?: string | null;

		/**
		 * When set to true, the VPC network is created in "auto" mode. When set to false, the VPC network is created in "custom" mode.
		 * An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges.
		 */
		autoCreateSubnetworks?: boolean | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/**
		 * [Output Only] The gateway address for default routing out of the network, selected by GCP.
		 * Pattern: [0-9]{1,3}(?:\.[0-9]{1,3}){3}
		 */
		gatewayIPv4?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#network for networks. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] A list of network peerings for the resource. */
		peerings?: Array<NetworkPeering> | null;

		/** A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide. */
		routingConfig?: NetworkRoutingConfig | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network. */
		subnetworks?: Array<string> | null;
	}


	/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
	export interface NetworkPeering {

		/** This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes?: boolean | null;

		/** Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		exchangeSubnetRoutes?: boolean | null;

		/** Whether to export the custom routes to peer network. */
		exportCustomRoutes?: boolean | null;

		/** Whether to import the custom routes from peer network. */
		importCustomRoutes?: boolean | null;

		/** Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		network?: string | null;

		/** [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network. */
		state?: NetworkPeeringState | null;

		/** [Output Only] Details about the current state of the peering. */
		stateDetails?: string | null;
	}

	export enum NetworkPeeringState { ACTIVE = 0, INACTIVE = 1 }


	/** A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide. */
	export interface NetworkRoutingConfig {

		/** The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions. */
		routingMode?: NetworkRoutingConfigRoutingMode | null;
	}

	export enum NetworkRoutingConfigRoutingMode { GLOBAL = 0, REGIONAL = 1 }


	/**
	 * Represents a collection of network endpoints.
	 * For more information read Network endpoint groups overview. (== resource_for {$api_version}.networkEndpointGroups ==) Next ID: 21
	 */
	export interface NetworkEndpointGroup {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** The default port used if the port number is not specified in the network endpoint. */
		defaultPort?: number | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group. */
		kind?: string | null;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. */
		network?: string | null;

		/** Type of network endpoints in this network endpoint group. */
		networkEndpointType?: NetworkEndpointGroupNetworkEndpointType | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output only] Number of network endpoints in the network endpoint group. */
		size?: number | null;

		/** Optional URL of the subnetwork to which all network endpoints in the NEG belong. */
		subnetwork?: string | null;

		/** [Output Only] The URL of the zone where the network endpoint group is located. */
		zone?: string | null;
	}

	export enum NetworkEndpointGroupNetworkEndpointType { GCE_VM_IP_PORT = 0, INTERNET_FQDN_PORT = 1, INTERNET_IP_PORT = 2 }

	export interface NetworkEndpointGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointGroupsScopedList resources. */
		items?: {[id: string]: NetworkEndpointGroupsScopedList } | null;

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupAggregatedListWarning | null;
	}

	export interface NetworkEndpointGroupsScopedList {

		/** [Output Only] The list of network endpoint groups that are contained in this scope. */
		networkEndpointGroups?: Array<NetworkEndpointGroup> | null;

		/** [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty. */
		warning?: NetworkEndpointGroupsScopedListWarning | null;
	}

	export interface NetworkEndpointGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NetworkEndpointGroupsScopedListWarningData?: Array<NetworkEndpointGroupsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NetworkEndpointGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NetworkEndpointGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NetworkEndpointGroupAggregatedListWarningData?: Array<NetworkEndpointGroupAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NetworkEndpointGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NetworkEndpointGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointGroup resources. */
		items?: Array<NetworkEndpointGroup> | null;

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupListWarning | null;
	}

	export interface NetworkEndpointGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NetworkEndpointGroupListWarningData?: Array<NetworkEndpointGroupListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NetworkEndpointGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NetworkEndpointGroupsAttachEndpointsRequest {

		/** The list of network endpoints to be attached. */
		networkEndpoints?: Array<NetworkEndpoint> | null;
	}

	export interface NetworkEndpointGroupsDetachEndpointsRequest {

		/** The list of network endpoints to be detached. */
		networkEndpoints?: Array<NetworkEndpoint> | null;
	}

	export interface NetworkEndpointGroupsListEndpointsRequest {

		/** Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specifiy this parameter, the health status of network endpoints will not be provided. */
		healthStatus?: NetworkEndpointGroupsListEndpointsRequestHealthStatus | null;
	}

	export enum NetworkEndpointGroupsListEndpointsRequestHealthStatus { SHOW = 0, SKIP = 1 }

	export interface NetworkEndpointGroupsListNetworkEndpoints {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointWithHealthStatus resources. */
		items?: Array<NetworkEndpointWithHealthStatus> | null;

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupsListNetworkEndpointsWarning | null;
	}

	export interface NetworkEndpointWithHealthStatus {

		/** [Output only] The health status of network endpoint; */
		healths?: Array<HealthStatusForNetworkEndpoint> | null;

		/** The network endpoint. Next ID: 7 */
		networkEndpoint?: NetworkEndpoint | null;
	}

	export interface NetworkEndpointGroupsListNetworkEndpointsWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NetworkEndpointGroupsListNetworkEndpointsWarningData?: Array<NetworkEndpointGroupsListNetworkEndpointsWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NetworkEndpointGroupsListNetworkEndpointsWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of networks. */
	export interface NetworkList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Network resources. */
		items?: Array<Network> | null;

		/** [Output Only] Type of resource. Always compute#networkList for lists of networks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkListWarning | null;
	}

	export interface NetworkListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NetworkListWarningData?: Array<NetworkListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NetworkListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NetworksAddPeeringRequest {

		/** This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes?: boolean | null;

		/** Name of the peering, which should conform to RFC1035. */
		name?: string | null;

		/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
		networkPeering?: NetworkPeering | null;

		/** URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		peerNetwork?: string | null;
	}

	export interface NetworksRemovePeeringRequest {

		/** Name of the peering, which should conform to RFC1035. */
		name?: string | null;
	}

	export interface NetworksUpdatePeeringRequest {

		/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
		networkPeering?: NetworkPeering | null;
	}


	/**
	 * Represent a sole-tenant Node Group resource.
	 * A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes. (== resource_for {$api_version}.nodeGroups ==)
	 */
	export interface NodeGroup {
		autoscalingPolicy?: NodeGroupAutoscalingPolicy | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeGroup for node group. */
		kind?: string | null;

		/** Specifies how to handle instances when a node in the group undergoes maintenance. */
		maintenancePolicy?: NodeGroupMaintenancePolicy | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the node template to which this node group belongs. */
		nodeTemplate?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The total number of nodes in the node group. */
		size?: number | null;
		status?: NodeGroupStatus | null;

		/** [Output Only] The name of the zone where the node group resides, such as us-central1-a. */
		zone?: string | null;
	}

	export interface NodeGroupAutoscalingPolicy {

		/** The maximum number of nodes that the group should have. */
		maxNodes?: number | null;

		/** The minimum number of nodes that the group should have. */
		minNodes?: number | null;

		/** The autoscaling mode. */
		mode?: NodeGroupAutoscalingPolicyMode | null;
	}

	export enum NodeGroupAutoscalingPolicyMode { MODE_UNSPECIFIED = 0, OFF = 1, ON = 2, ONLY_SCALE_OUT = 3 }

	export enum NodeGroupMaintenancePolicy { DEFAULT = 0, MAINTENANCE_POLICY_UNSPECIFIED = 1, MIGRATE_WITHIN_NODE_GROUP = 2, RESTART_IN_PLACE = 3 }

	export enum NodeGroupStatus { CREATING = 0, DELETING = 1, INVALID = 2, READY = 3 }

	export interface NodeGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeGroupsScopedList resources. */
		items?: {[id: string]: NodeGroupsScopedList } | null;

		/** [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupAggregatedListWarning | null;
	}

	export interface NodeGroupsScopedList {

		/** [Output Only] A list of node groups contained in this scope. */
		nodeGroups?: Array<NodeGroup> | null;

		/** [Output Only] An informational warning that appears when the nodeGroup list is empty. */
		warning?: NodeGroupsScopedListWarning | null;
	}

	export interface NodeGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeGroupsScopedListWarningData?: Array<NodeGroupsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NodeGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeGroupAggregatedListWarningData?: Array<NodeGroupAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of nodeGroups. */
	export interface NodeGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeGroup resources. */
		items?: Array<NodeGroup> | null;

		/** [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupListWarning | null;
	}

	export interface NodeGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeGroupListWarningData?: Array<NodeGroupListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NodeGroupNode {

		/** Instances scheduled on this node. */
		instances?: Array<string> | null;

		/** The name of the node. */
		name?: string | null;

		/** The type of this node. */
		nodeType?: string | null;
		serverBinding?: ServerBinding | null;

		/** Server ID associated with this node. */
		serverId?: string | null;
		status?: NodeGroupNodeStatus | null;
	}

	export interface ServerBinding {
		type?: ServerBindingType | null;
	}

	export enum ServerBindingType { RESTART_NODE_ON_ANY_SERVER = 0, RESTART_NODE_ON_MINIMAL_SERVERS = 1, SERVER_BINDING_TYPE_UNSPECIFIED = 2 }

	export enum NodeGroupNodeStatus { CREATING = 0, DELETING = 1, INVALID = 2, READY = 3, REPAIRING = 4 }

	export interface NodeGroupsAddNodesRequest {

		/** Count of additional nodes to be added to the node group. */
		additionalNodeCount?: number | null;
	}

	export interface NodeGroupsDeleteNodesRequest {

		/** Names of the nodes to delete. */
		nodes?: Array<string> | null;
	}

	export interface NodeGroupsListNodes {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Node resources. */
		items?: Array<NodeGroupNode> | null;

		/** [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupsListNodesWarning | null;
	}

	export interface NodeGroupsListNodesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeGroupsListNodesWarningData?: Array<NodeGroupsListNodesWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeGroupsListNodesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NodeGroupsSetNodeTemplateRequest {

		/** Full or partial URL of the node template resource to be updated for this node group. */
		nodeTemplate?: string | null;
	}


	/**
	 * Represent a sole-tenant Node Template resource.
	 * You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances. (== resource_for {$api_version}.nodeTemplates ==) (== NextID: 19 ==)
	 */
	export interface NodeTemplate {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeTemplate for node templates. */
		kind?: string | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Labels to use for node affinity, which will be used in instance scheduling. */
		nodeAffinityLabels?: {[id: string]: string } | null;

		/** The node type to use for nodes group that are created from this template. */
		nodeType?: string | null;
		nodeTypeFlexibility?: NodeTemplateNodeTypeFlexibility | null;

		/** [Output Only] The name of the region where the node template resides, such as us-central1. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		serverBinding?: ServerBinding | null;

		/** [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING. */
		status?: NodeGroupStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;
	}

	export interface NodeTemplateNodeTypeFlexibility {
		cpus?: string | null;
		localSsd?: string | null;
		memory?: string | null;
	}

	export interface NodeTemplateAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTemplatesScopedList resources. */
		items?: {[id: string]: NodeTemplatesScopedList } | null;

		/** [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTemplateAggregatedListWarning | null;
	}

	export interface NodeTemplatesScopedList {

		/** [Output Only] A list of node templates contained in this scope. */
		nodeTemplates?: Array<NodeTemplate> | null;

		/** [Output Only] An informational warning that appears when the node templates list is empty. */
		warning?: NodeTemplatesScopedListWarning | null;
	}

	export interface NodeTemplatesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTemplatesScopedListWarningData?: Array<NodeTemplatesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTemplatesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NodeTemplateAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTemplateAggregatedListWarningData?: Array<NodeTemplateAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTemplateAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of node templates. */
	export interface NodeTemplateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTemplate resources. */
		items?: Array<NodeTemplate> | null;

		/** [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTemplateListWarning | null;
	}

	export interface NodeTemplateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTemplateListWarningData?: Array<NodeTemplateListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTemplateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represent a sole-tenant Node Type resource.
	 * Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types. (== resource_for {$api_version}.nodeTypes ==)
	 */
	export interface NodeType {

		/** [Output Only] The CPU platform used by this node type. */
		cpuPlatform?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/** [Output Only] The number of virtual CPUs that are available to the node type. */
		guestCpus?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeType for node types. */
		kind?: string | null;

		/** [Output Only] Local SSD available to the node type, defined in GB. */
		localSsdGb?: number | null;

		/** [Output Only] The amount of physical memory available to the node type, defined in MB. */
		memoryMb?: number | null;

		/**
		 * [Output Only] Name of the resource.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the node type resides, such as us-central1-a. */
		zone?: string | null;
	}

	export interface NodeTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTypesScopedList resources. */
		items?: {[id: string]: NodeTypesScopedList } | null;

		/** [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTypeAggregatedListWarning | null;
	}

	export interface NodeTypesScopedList {

		/** [Output Only] A list of node types contained in this scope. */
		nodeTypes?: Array<NodeType> | null;

		/** [Output Only] An informational warning that appears when the node types list is empty. */
		warning?: NodeTypesScopedListWarning | null;
	}

	export interface NodeTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTypesScopedListWarningData?: Array<NodeTypesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface NodeTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTypeAggregatedListWarningData?: Array<NodeTypeAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of node types. */
	export interface NodeTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeType resources. */
		items?: Array<NodeType> | null;

		/** [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTypeListWarning | null;
	}

	export interface NodeTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		NodeTypeListWarningData?: Array<NodeTypeListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface NodeTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an Operation resource.
	 * Google Compute Engine has three Operation resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations)
	 * You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses.
	 * Operations can be global, regional or zonal.  
	 * - For global operations, use the `globalOperations` resource. 
	 * - For regional operations, use the `regionOperations` resource. 
	 * - For zonal operations, use the `zonalOperations` resource.  
	 * For more information, read  Global, Regional, and Zonal Resources. (== resource_for {$api_version}.globalOperations ==) (== resource_for {$api_version}.regionOperations ==) (== resource_for {$api_version}.zoneOperations ==)
	 */
	export interface Operation {

		/** [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise. */
		clientOperationId?: string | null;

		/** [Deprecated] This field is deprecated. */
		creationTimestamp?: string | null;

		/** [Output Only] A textual description of the operation, which is set when the operation is created. */
		description?: string | null;

		/** [Output Only] The time that this operation was completed. This value is in RFC3339 text format. */
		endTime?: string | null;

		/** [Output Only] If errors are generated during processing of the operation, this field will be populated. */
		error?: OperationError | null;

		/** [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`. */
		httpErrorMessage?: string | null;

		/** [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found. */
		httpErrorStatusCode?: number | null;

		/** [Output Only] The unique identifier for the operation. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The time that this operation was requested. This value is in RFC3339 text format. */
		insertTime?: string | null;

		/** [Output Only] Type of the resource. Always `compute#operation` for Operation resources. */
		kind?: string | null;

		/** [Output Only] Name of the operation. */
		name?: string | null;

		/** [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on. */
		operationType?: string | null;

		/** [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses. */
		progress?: number | null;

		/** [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format. */
		startTime?: string | null;

		/** [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`. */
		status?: OperationStatus | null;

		/** [Output Only] An optional textual description of the current status of the operation. */
		statusMessage?: string | null;

		/** [Output Only] The unique target ID, which identifies a specific incarnation of the target resource. */
		targetId?: string | null;

		/** [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from. */
		targetLink?: string | null;

		/** [Output Only] User who requested the operation, for example: `user@example.com`. */
		user?: string | null;

		/** [Output Only] If warning messages are generated during processing of the operation, this field will be populated. */
		OperationWarnings?: Array<OperationWarnings> | null;

		/** [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations. */
		zone?: string | null;
	}

	export interface OperationError {

		/** [Output Only] The array of errors encountered while processing this operation. */
		OperationErrorErrors?: Array<OperationErrorErrors> | null;
	}

	export interface OperationErrorErrors {

		/** [Output Only] The error type identifier for this error. */
		code?: string | null;

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location?: string | null;

		/** [Output Only] An optional, human-readable error message. */
		message?: string | null;
	}

	export enum OperationStatus { DONE = 0, PENDING = 1, RUNNING = 2 }

	export interface OperationWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		OperationWarningsData?: Array<OperationWarningsData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface OperationWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface OperationAggregatedList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A map of scoped operation lists. */
		items?: {[id: string]: OperationsScopedList } | null;

		/** [Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: OperationAggregatedListWarning | null;
	}

	export interface OperationsScopedList {

		/** [Output Only] A list of operations contained in this scope. */
		operations?: Array<Operation> | null;

		/** [Output Only] Informational warning which replaces the list of operations when the list is empty. */
		warning?: OperationsScopedListWarning | null;
	}

	export interface OperationsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		OperationsScopedListWarningData?: Array<OperationsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface OperationsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface OperationAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		OperationAggregatedListWarningData?: Array<OperationAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface OperationAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Operation resources. */
	export interface OperationList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of Operation resources. */
		items?: Array<Operation> | null;

		/** [Output Only] Type of resource. Always `compute#operations` for Operations resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: OperationListWarning | null;
	}

	export interface OperationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		OperationListWarningData?: Array<OperationListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface OperationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Represents a PacketMirroring resource. */
	export interface PacketMirroring {
		collectorIlb?: PacketMirroringForwardingRuleInfo | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.
		 * The default is TRUE.
		 */
		enable?: PacketMirroringEnable | null;
		filter?: PacketMirroringFilter | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings. */
		kind?: string | null;
		mirroredResources?: PacketMirroringMirroredResourceInfo | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;
		network?: PacketMirroringNetworkInfo | null;

		/**
		 * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins.
		 * Default value is 1000. Valid range is 0 through 65535.
		 */
		priority?: string | null;

		/** [Output Only] URI of the region where the packetMirroring resides. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	export interface PacketMirroringForwardingRuleInfo {

		/** [Output Only] Unique identifier for the forwarding rule; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic. */
		url?: string | null;
	}

	export enum PacketMirroringEnable { FALSE = 0, TRUE = 1 }

	export interface PacketMirroringFilter {

		/** Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored. */
		IPProtocols?: Array<string> | null;

		/** IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored. */
		cidrRanges?: Array<string> | null;
	}

	export interface PacketMirroringMirroredResourceInfo {

		/**
		 * A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring.
		 * Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring.
		 * You may specify a maximum of 50 Instances.
		 */
		instances?: Array<PacketMirroringMirroredResourceInfoInstanceInfo> | null;

		/**
		 * A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring.
		 * You may specify a maximum of 5 subnetworks.
		 */
		subnetworks?: Array<PacketMirroringMirroredResourceInfoSubnetInfo> | null;

		/** A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored. */
		tags?: Array<string> | null;
	}

	export interface PacketMirroringMirroredResourceInfoInstanceInfo {

		/** [Output Only] Unique identifier for the instance; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the virtual machine instance which is being mirrored. */
		url?: string | null;
	}

	export interface PacketMirroringMirroredResourceInfoSubnetInfo {

		/** [Output Only] Unique identifier for the subnetwork; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored. */
		url?: string | null;
	}

	export interface PacketMirroringNetworkInfo {

		/** [Output Only] Unique identifier for the network; defined by the server. */
		canonicalUrl?: string | null;

		/** URL of the network resource. */
		url?: string | null;
	}


	/** Contains a list of packetMirrorings. */
	export interface PacketMirroringAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PacketMirroring resources. */
		items?: {[id: string]: PacketMirroringsScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: PacketMirroringAggregatedListWarning | null;
	}

	export interface PacketMirroringsScopedList {

		/** A list of packetMirrorings contained in this scope. */
		packetMirrorings?: Array<PacketMirroring> | null;

		/** Informational warning which replaces the list of packetMirrorings when the list is empty. */
		warning?: PacketMirroringsScopedListWarning | null;
	}

	export interface PacketMirroringsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		PacketMirroringsScopedListWarningData?: Array<PacketMirroringsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface PacketMirroringsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface PacketMirroringAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		PacketMirroringAggregatedListWarningData?: Array<PacketMirroringAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface PacketMirroringAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of PacketMirroring resources. */
	export interface PacketMirroringList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PacketMirroring resources. */
		items?: Array<PacketMirroring> | null;

		/** [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: PacketMirroringListWarning | null;
	}

	export interface PacketMirroringListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		PacketMirroringListWarningData?: Array<PacketMirroringListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface PacketMirroringListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used. */
	export interface PathMatcher {
		defaultRouteAction?: HttpRouteAction | null;

		/**
		 * The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource:
		 * - https://www.googleapis.com/compute/v1/projects/project/global/backendServices/backendService
		 * - compute/v1/projects/project/global/backendServices/backendService
		 * - global/backendServices/backendService  If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified.
		 * Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set.
		 * Authorization requires one or more of the following Google IAM permissions on the specified resource default_service:
		 * - compute.backendBuckets.use
		 * - compute.backendServices.use
		 */
		defaultService?: string | null;

		/** Specifies settings for an HTTP redirect. */
		defaultUrlRedirect?: HttpRedirectAction | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction | null;

		/** The name to which this PathMatcher is referred by the HostRule. */
		name?: string | null;

		/**
		 * The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis.
		 * For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list.
		 * Within a given pathMatcher, only one of pathRules or routeRules must be set.
		 */
		pathRules?: Array<PathRule> | null;

		/**
		 * The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number.
		 * Within a given pathMatcher, you can set only one of pathRules or routeRules.
		 */
		routeRules?: Array<HttpRouteRule> | null;
	}


	/** A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL. */
	export interface PathRule {

		/** The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here. */
		paths?: Array<string> | null;
		routeAction?: HttpRouteAction | null;

		/**
		 * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified.
		 * Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
		 */
		service?: string | null;

		/** Specifies settings for an HTTP redirect. */
		urlRedirect?: HttpRedirectAction | null;
	}

	export interface PreconfiguredWafSet {

		/** List of entities that are currently supported for WAF rules. */
		expressionSets?: Array<WafExpressionSet> | null;
	}

	export interface WafExpressionSet {

		/** A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like "stable" is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can't be used for more than one entity set. */
		aliases?: Array<string> | null;

		/** List of available expressions. */
		expressions?: Array<WafExpressionSetExpression> | null;

		/** Google specified expression set ID. The format should be: - E.g. XSS-20170329 */
		id?: string | null;
	}

	export interface WafExpressionSetExpression {

		/** Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. */
		id?: string | null;
	}


	/**
	 * Represents a Project resource.
	 * A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the  Resource Hierarchy. (== resource_for {$api_version}.projects ==)
	 */
	export interface Project {

		/** A metadata key/value entry. */
		commonInstanceMetadata?: Metadata | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM. */
		defaultNetworkTier?: AccessConfigNetworkTier | null;

		/** [Output Only] Default service account used by VMs running in this project. */
		defaultServiceAccount?: string | null;

		/** An optional textual description of the resource. */
		description?: string | null;

		/** Restricted features enabled for use on this project. */
		enabledFeatures?: Array<string> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is not the project ID, and is just a unique ID used by Compute Engine to identify resources. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#project for projects. */
		kind?: string | null;

		/** The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine. */
		name?: string | null;

		/** [Output Only] Quotas assigned to this project. */
		quotas?: Array<Quota> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix. */
		usageExportLocation?: UsageExportLocation | null;

		/** [Output Only] The role this project has in a shared VPC configuration. Currently only HOST projects are differentiated. */
		xpnProjectStatus?: ProjectXpnProjectStatus | null;
	}


	/** A quotas entry. */
	export interface Quota {

		/** [Output Only] Quota limit for this metric. */
		limit?: number | null;

		/** [Output Only] Name of the quota metric. */
		metric?: QuotaMetric | null;

		/** [Output Only] Owning resource. This is the resource on which this quota is applied. */
		owner?: string | null;

		/** [Output Only] Current usage of this metric. */
		usage?: number | null;
	}

	export enum QuotaMetric { AFFINITY_GROUPS = 0, AUTOSCALERS = 1, BACKEND_BUCKETS = 2, BACKEND_SERVICES = 3, C2_CPUS = 4, COMMITMENTS = 5, COMMITTED_C2_CPUS = 6, COMMITTED_CPUS = 7, COMMITTED_LICENSES = 8, COMMITTED_LOCAL_SSD_TOTAL_GB = 9, COMMITTED_N2D_CPUS = 10, COMMITTED_N2_CPUS = 11, COMMITTED_NVIDIA_K80_GPUS = 12, COMMITTED_NVIDIA_P100_GPUS = 13, COMMITTED_NVIDIA_P4_GPUS = 14, COMMITTED_NVIDIA_T4_GPUS = 15, COMMITTED_NVIDIA_V100_GPUS = 16, CPUS = 17, CPUS_ALL_REGIONS = 18, DISKS_TOTAL_GB = 19, EXTERNAL_VPN_GATEWAYS = 20, FIREWALLS = 21, FORWARDING_RULES = 22, GLOBAL_INTERNAL_ADDRESSES = 23, GPUS_ALL_REGIONS = 24, HEALTH_CHECKS = 25, IMAGES = 26, INSTANCES = 27, INSTANCE_GROUPS = 28, INSTANCE_GROUP_MANAGERS = 29, INSTANCE_TEMPLATES = 30, INTERCONNECTS = 31, INTERCONNECT_ATTACHMENTS_PER_REGION = 32, INTERCONNECT_ATTACHMENTS_TOTAL_MBPS = 33, INTERCONNECT_TOTAL_GBPS = 34, INTERNAL_ADDRESSES = 35, IN_PLACE_SNAPSHOTS = 36, IN_USE_ADDRESSES = 37, IN_USE_BACKUP_SCHEDULES = 38, IN_USE_SNAPSHOT_SCHEDULES = 39, LOCAL_SSD_TOTAL_GB = 40, MACHINE_IMAGES = 41, N2D_CPUS = 42, N2_CPUS = 43, NETWORKS = 44, NETWORK_ENDPOINT_GROUPS = 45, NODE_GROUPS = 46, NODE_TEMPLATES = 47, NVIDIA_K80_GPUS = 48, NVIDIA_P100_GPUS = 49, NVIDIA_P100_VWS_GPUS = 50, NVIDIA_P4_GPUS = 51, NVIDIA_P4_VWS_GPUS = 52, NVIDIA_T4_GPUS = 53, NVIDIA_T4_VWS_GPUS = 54, NVIDIA_V100_GPUS = 55, PACKET_MIRRORINGS = 56, PREEMPTIBLE_CPUS = 57, PREEMPTIBLE_LOCAL_SSD_GB = 58, PREEMPTIBLE_NVIDIA_K80_GPUS = 59, PREEMPTIBLE_NVIDIA_P100_GPUS = 60, PREEMPTIBLE_NVIDIA_P100_VWS_GPUS = 61, PREEMPTIBLE_NVIDIA_P4_GPUS = 62, PREEMPTIBLE_NVIDIA_P4_VWS_GPUS = 63, PREEMPTIBLE_NVIDIA_T4_GPUS = 64, PREEMPTIBLE_NVIDIA_T4_VWS_GPUS = 65, PREEMPTIBLE_NVIDIA_V100_GPUS = 66, PUBLIC_ADVERTISED_PREFIXES = 67, PUBLIC_DELEGATED_PREFIXES = 68, REGIONAL_AUTOSCALERS = 69, REGIONAL_INSTANCE_GROUP_MANAGERS = 70, RESERVATIONS = 71, RESOURCE_POLICIES = 72, ROUTERS = 73, ROUTES = 74, SECURITY_POLICIES = 75, SECURITY_POLICY_CEVAL_RULES = 76, SECURITY_POLICY_RULES = 77, SNAPSHOTS = 78, SSD_TOTAL_GB = 79, SSL_CERTIFICATES = 80, STATIC_ADDRESSES = 81, STATIC_BYOIP_ADDRESSES = 82, SUBNETWORKS = 83, TARGET_HTTPS_PROXIES = 84, TARGET_HTTP_PROXIES = 85, TARGET_INSTANCES = 86, TARGET_POOLS = 87, TARGET_SSL_PROXIES = 88, TARGET_TCP_PROXIES = 89, TARGET_VPN_GATEWAYS = 90, URL_MAPS = 91, VPN_GATEWAYS = 92, VPN_TUNNELS = 93 }


	/** The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix. */
	export interface UsageExportLocation {

		/** The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket. */
		bucketName?: string | null;

		/** An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions. */
		reportNamePrefix?: string | null;
	}

	export enum ProjectXpnProjectStatus { HOST = 0, UNSPECIFIED_XPN_PROJECT_STATUS = 1 }

	export interface ProjectsDisableXpnResourceRequest {

		/** Service resource (a.k.a service project) ID. */
		xpnResource?: XpnResourceId | null;
	}


	/** Service resource (a.k.a service project) ID. */
	export interface XpnResourceId {

		/** The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678). */
		id?: string | null;

		/** The type of the service resource. */
		type?: XpnResourceIdType | null;
	}

	export enum XpnResourceIdType { PROJECT = 0, XPN_RESOURCE_TYPE_UNSPECIFIED = 1 }

	export interface ProjectsEnableXpnResourceRequest {

		/** Service resource (a.k.a service project) ID. */
		xpnResource?: XpnResourceId | null;
	}

	export interface ProjectsGetXpnResources {

		/** [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects) */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** Service resources (a.k.a service projects) attached to this project as their shared VPC host. */
		resources?: Array<XpnResourceId> | null;
	}

	export interface ProjectsListXpnHostsRequest {

		/** Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project. */
		organization?: string | null;
	}

	export interface ProjectsSetDefaultNetworkTierRequest {

		/** Default network tier to be set. */
		networkTier?: AccessConfigNetworkTier | null;
	}


	/**
	 * Represents a Region resource.
	 * A region is a geographical area where a resource is located. For more information, read Regions and Zones. (== resource_for {$api_version}.regions ==)
	 */
	export interface Region {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] Textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#region for regions. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Quotas assigned to this region. */
		quotas?: Array<Quota> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Status of the region, either UP or DOWN. */
		status?: RegionStatus | null;

		/** [Output Only] A list of zones available in this region, in the form of resource URLs. */
		zones?: Array<string> | null;
	}

	export enum RegionStatus { DOWN = 0, UP = 1 }


	/** Contains a list of autoscalers. */
	export interface RegionAutoscalerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Autoscaler resources. */
		items?: Array<Autoscaler> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionAutoscalerListWarning | null;
	}

	export interface RegionAutoscalerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionAutoscalerListWarningData?: Array<RegionAutoscalerListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionAutoscalerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RegionDiskTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskType resources. */
		items?: Array<DiskType> | null;

		/** [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionDiskTypeListWarning | null;
	}

	export interface RegionDiskTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionDiskTypeListWarningData?: Array<RegionDiskTypeListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionDiskTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RegionDisksAddResourcePoliciesRequest {

		/** Resource policies to be added to this disk. */
		resourcePolicies?: Array<string> | null;
	}

	export interface RegionDisksRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this disk. */
		resourcePolicies?: Array<string> | null;
	}

	export interface RegionDisksResizeRequest {

		/** The new size of the regional persistent disk, which is specified in GB. */
		sizeGb?: string | null;
	}


	/** Contains a list of InstanceGroup resources. */
	export interface RegionInstanceGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroup resources. */
		items?: Array<InstanceGroup> | null;

		/** The resource type. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupListWarning | null;
	}

	export interface RegionInstanceGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionInstanceGroupListWarningData?: Array<RegionInstanceGroupListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionInstanceGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of managed instance groups. */
	export interface RegionInstanceGroupManagerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManager resources. */
		items?: Array<InstanceGroupManager> | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupManagerListWarning | null;
	}

	export interface RegionInstanceGroupManagerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionInstanceGroupManagerListWarningData?: Array<RegionInstanceGroupManagerListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionInstanceGroupManagerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RegionInstanceGroupManagersAbandonInstancesRequest {

		/** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}


	/** InstanceGroupManagers.applyUpdatesToInstances */
	export interface RegionInstanceGroupManagersApplyUpdatesRequest {

		/** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;

		/**
		 * The minimal action that you want to perform on each instance during the update:
		 * - REPLACE: At minimum, delete the instance and create it again.
		 * - RESTART: Stop the instance and start it again.
		 * - REFRESH: Do not stop the instance.
		 * - NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
		 */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/**
		 * The most disruptive action that you want to perform on each instance during the update:
		 * - REPLACE: Delete the instance and create it again.
		 * - RESTART: Stop the instance and start it again.
		 * - REFRESH: Do not stop the instance.
		 * - NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
		 */
		mostDisruptiveAllowedAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;
	}


	/** RegionInstanceGroupManagers.createInstances */
	export interface RegionInstanceGroupManagersCreateInstancesRequest {

		/** [Required] List of specifications of per-instance configs. */
		instances?: Array<PerInstanceConfig> | null;
	}

	export interface RegionInstanceGroupManagersDeleteInstancesRequest {

		/** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}

	export interface RegionInstanceGroupManagersListErrorsResponse {

		/** [Output Only] The list of errors of the managed instance group. */
		items?: Array<InstanceManagedByIgmError> | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}

	export interface RegionInstanceGroupManagersListInstancesResponse {

		/** A list of managed instances. */
		managedInstances?: Array<ManagedInstance> | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}

	export interface RegionInstanceGroupManagersRecreateRequest {

		/** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string> | null;
	}

	export interface RegionInstanceGroupManagersSetTargetPoolsRequest {

		/** Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional. */
		fingerprint?: string | null;

		/** The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group. */
		targetPools?: Array<string> | null;
	}

	export interface RegionInstanceGroupManagersSetTemplateRequest {

		/** URL of the InstanceTemplate resource from which all new instances will be created. */
		instanceTemplate?: string | null;
	}

	export interface RegionInstanceGroupsListInstances {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceWithNamedPorts resources. */
		items?: Array<InstanceWithNamedPorts> | null;

		/** The resource type. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupsListInstancesWarning | null;
	}

	export interface RegionInstanceGroupsListInstancesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionInstanceGroupsListInstancesWarningData?: Array<RegionInstanceGroupsListInstancesWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionInstanceGroupsListInstancesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RegionInstanceGroupsListInstancesRequest {

		/** Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances. */
		instanceState?: InstanceGroupsListInstancesRequestInstanceState | null;

		/**
		 * Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		portName?: string | null;
	}

	export interface RegionInstanceGroupsSetNamedPortsRequest {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint?: string | null;

		/** The list of named ports to set for this instance group. */
		namedPorts?: Array<NamedPort> | null;
	}


	/** Contains a list of region resources. */
	export interface RegionList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Region resources. */
		items?: Array<Region> | null;

		/** [Output Only] Type of resource. Always compute#regionList for lists of regions. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionListWarning | null;
	}

	export interface RegionListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RegionListWarningData?: Array<RegionListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RegionListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RegionSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** The labels to set for this resource. */
		labels?: {[id: string]: string } | null;
	}

	export interface RegionSetPolicyRequest {

		/** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding> | null;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/**
		 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.
		 * A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.
		 * Optionally, a `binding` can specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both.
		 * **JSON example:**
		 * { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": ["user:eve@example.com"], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 }
		 * **YAML example:**
		 * bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3
		 * For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		 */
		policy?: Policy | null;
	}

	export interface RegionTargetHttpsProxiesSetSslCertificatesRequest {

		/** New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified. */
		sslCertificates?: Array<string> | null;
	}

	export interface RegionUrlMapsValidateRequest {

		/**
		 * Represents a URL Map resource.
		 * Google Compute Engine has two URL Map resources:
		 * * [Global](/compute/docs/reference/rest/{$api_version}/urlMaps) * [Regional](/compute/docs/reference/rest/{$api_version}/regionUrlMaps)
		 * A URL map resource is a component of certain types of GCP load balancers and Traffic Director.
		 * * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers.
		 * This resource defines mappings from host names and URL paths to either a backend service or a backend bucket.
		 * To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.
		 */
		resource?: UrlMap | null;
	}


	/**
	 * Represents a URL Map resource.
	 * Google Compute Engine has two URL Map resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/urlMaps) * [Regional](/compute/docs/reference/rest/{$api_version}/regionUrlMaps)
	 * A URL map resource is a component of certain types of GCP load balancers and Traffic Director.
	 * * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers.
	 * This resource defines mappings from host names and URL paths to either a backend service or a backend bucket.
	 * To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.
	 */
	export interface UrlMap {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;
		defaultRouteAction?: HttpRouteAction | null;

		/**
		 * The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified.
		 * Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set.
		 */
		defaultService?: string | null;

		/** Specifies settings for an HTTP redirect. */
		defaultUrlRedirect?: HttpRedirectAction | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve a UrlMap.
		 */
		fingerprint?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction | null;

		/** The list of HostRules to use against the URL. */
		hostRules?: Array<HostRule> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#urlMaps for url maps. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The list of named PathMatchers to use against the URL. */
		pathMatchers?: Array<PathMatcher> | null;

		/** [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test cases pass. You can specify a maximum of 100 tests per UrlMap. */
		tests?: Array<UrlMapTest> | null;
	}


	/** Message for the expected URL mappings. */
	export interface UrlMapTest {

		/** Description of this test case. */
		description?: string | null;

		/** Host portion of the URL. */
		host?: string | null;

		/** Path portion of the URL. */
		path?: string | null;

		/** Expected BackendService resource the given URL should be mapped to. */
		service?: string | null;
	}


	/** Contains a list of reservations. */
	export interface ReservationAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Allocation resources. */
		items?: {[id: string]: ReservationsScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ReservationAggregatedListWarning | null;
	}

	export interface ReservationsScopedList {

		/** A list of reservations contained in this scope. */
		reservations?: Array<Reservation> | null;

		/** Informational warning which replaces the list of reservations when the list is empty. */
		warning?: ReservationsScopedListWarning | null;
	}

	export interface ReservationsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ReservationsScopedListWarningData?: Array<ReservationsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ReservationsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ReservationAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ReservationAggregatedListWarningData?: Array<ReservationAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ReservationAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ReservationList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of Allocation resources. */
		items?: Array<Reservation> | null;

		/** [Output Only] Type of resource.Always compute#reservationsList for listsof reservations */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ReservationListWarning | null;
	}

	export interface ReservationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ReservationListWarningData?: Array<ReservationListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ReservationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ReservationsResizeRequest {

		/** Number of allocated resources can be resized with minimum = 1 and maximum = 1000. */
		specificSkuCount?: string | null;
	}

	export interface ResourceGroupReference {

		/** A URI referencing one of the instance groups or network endpoint groups listed in the backend service. */
		group?: string | null;
	}

	export interface ResourcePoliciesScopedList {

		/** A list of resourcePolicies contained in this scope. */
		resourcePolicies?: Array<ResourcePolicy> | null;

		/** Informational warning which replaces the list of resourcePolicies when the list is empty. */
		warning?: ResourcePoliciesScopedListWarning | null;
	}


	/**
	 * Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.
	 * (== resource_for {$api_version}.resourcePolicies ==)
	 */
	export interface ResourcePolicy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;
		description?: string | null;

		/** A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality */
		groupPlacementPolicy?: ResourcePolicyGroupPlacementPolicy | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#resource_policies for resource policies. */
		kind?: string | null;

		/**
		 * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;
		region?: string | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained. */
		snapshotSchedulePolicy?: ResourcePolicySnapshotSchedulePolicy | null;

		/** [Output Only] The status of resource policy creation. */
		status?: NodeGroupStatus | null;
	}


	/** A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality */
	export interface ResourcePolicyGroupPlacementPolicy {

		/** The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network */
		availabilityDomainCount?: number | null;

		/** Specifies network collocation */
		collocation?: ResourcePolicyGroupPlacementPolicyCollocation | null;

		/** Number of vms in this placement group */
		vmCount?: number | null;
	}

	export enum ResourcePolicyGroupPlacementPolicyCollocation { COLLOCATED = 0, UNSPECIFIED_COLLOCATION = 1 }


	/** A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained. */
	export interface ResourcePolicySnapshotSchedulePolicy {

		/** Policy for retention of scheduled snapshots. */
		retentionPolicy?: ResourcePolicySnapshotSchedulePolicyRetentionPolicy | null;

		/** A schedule for disks where the schedueled operations are performed. */
		schedule?: ResourcePolicySnapshotSchedulePolicySchedule | null;

		/** Specified snapshot properties for scheduled snapshots created by this policy. */
		snapshotProperties?: ResourcePolicySnapshotSchedulePolicySnapshotProperties | null;
	}


	/** Policy for retention of scheduled snapshots. */
	export interface ResourcePolicySnapshotSchedulePolicyRetentionPolicy {

		/** Maximum age of the snapshot that is allowed to be kept. */
		maxRetentionDays?: number | null;

		/** Specifies the behavior to apply to scheduled snapshots when the source disk is deleted. */
		onSourceDiskDelete?: ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete | null;
	}

	export enum ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete { APPLY_RETENTION_POLICY = 0, KEEP_AUTO_SNAPSHOTS = 1, UNSPECIFIED_ON_SOURCE_DISK_DELETE = 2 }


	/** A schedule for disks where the schedueled operations are performed. */
	export interface ResourcePolicySnapshotSchedulePolicySchedule {

		/** Time window specified for daily operations. */
		dailySchedule?: ResourcePolicyDailyCycle | null;

		/** Time window specified for hourly operations. */
		hourlySchedule?: ResourcePolicyHourlyCycle | null;

		/** Time window specified for weekly operations. */
		weeklySchedule?: ResourcePolicyWeeklyCycle | null;
	}


	/** Time window specified for daily operations. */
	export interface ResourcePolicyDailyCycle {

		/** Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle. */
		daysInCycle?: number | null;

		/** [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario. */
		duration?: string | null;

		/** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
		startTime?: string | null;
	}


	/** Time window specified for hourly operations. */
	export interface ResourcePolicyHourlyCycle {

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration?: string | null;

		/** Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle. */
		hoursInCycle?: number | null;

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime?: string | null;
	}


	/** Time window specified for weekly operations. */
	export interface ResourcePolicyWeeklyCycle {

		/** Up to 7 intervals/windows, one for each day of the week. */
		dayOfWeeks?: Array<ResourcePolicyWeeklyCycleDayOfWeek> | null;
	}

	export interface ResourcePolicyWeeklyCycleDayOfWeek {

		/** Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY. */
		day?: ResourcePolicyWeeklyCycleDayOfWeekDay | null;

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration?: string | null;

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime?: string | null;
	}

	export enum ResourcePolicyWeeklyCycleDayOfWeekDay { FRIDAY = 0, INVALID = 1, MONDAY = 2, SATURDAY = 3, SUNDAY = 4, THURSDAY = 5, TUESDAY = 6, WEDNESDAY = 7 }


	/** Specified snapshot properties for scheduled snapshots created by this policy. */
	export interface ResourcePolicySnapshotSchedulePolicySnapshotProperties {

		/** Indication to perform a 'guest aware' snapshot. */
		guestFlush?: boolean | null;

		/** Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty. */
		labels?: {[id: string]: string } | null;

		/** Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional). */
		storageLocations?: Array<string> | null;
	}

	export interface ResourcePoliciesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ResourcePoliciesScopedListWarningData?: Array<ResourcePoliciesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ResourcePoliciesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of resourcePolicies. */
	export interface ResourcePolicyAggregatedList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ResourcePolicy resources. */
		items?: {[id: string]: ResourcePoliciesScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ResourcePolicyAggregatedListWarning | null;
	}

	export interface ResourcePolicyAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ResourcePolicyAggregatedListWarningData?: Array<ResourcePolicyAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ResourcePolicyAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ResourcePolicyList {
		etag?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of ResourcePolicy resources. */
		items?: Array<ResourcePolicy> | null;

		/** [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ResourcePolicyListWarning | null;
	}

	export interface ResourcePolicyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ResourcePolicyListWarningData?: Array<ResourcePolicyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ResourcePolicyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Route resource.
	 * A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview. (== resource_for {$api_version}.routes ==)
	 */
	export interface Route {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** The destination range of outgoing packets that this route applies to. Only IPv4 is supported. */
		destRange?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of this resource. Always compute#routes for Route resources. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Fully-qualified URL of the network that this route applies to. */
		network?: string | null;

		/** The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL:  projects/project/global/gateways/default-internet-gateway */
		nextHopGateway?: string | null;

		/**
		 * The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets. You can only specify the forwarding rule as a partial or full URL. For example, the following are all valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule
		 * - regions/region/forwardingRules/forwardingRule
		 */
		nextHopIlb?: string | null;

		/**
		 * The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example:
		 * https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/
		 */
		nextHopInstance?: string | null;

		/** The network IP address of an instance that should handle matching packets. Only IPv4 is supported. */
		nextHopIp?: string | null;

		/** The URL of the local network if it should handle matching packets. */
		nextHopNetwork?: string | null;

		/** [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035. */
		nextHopPeering?: string | null;

		/** The URL to a VpnTunnel that should handle matching packets. */
		nextHopVpnTunnel?: string | null;

		/** The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive. */
		priority?: string | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** A list of instance tags to which this route applies. */
		tags?: Array<string> | null;

		/** [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages. */
		RouteWarnings?: Array<RouteWarnings> | null;
	}

	export interface RouteWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RouteWarningsData?: Array<RouteWarningsData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RouteWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Route resources. */
	export interface RouteList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Route resources. */
		items?: Array<Route> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RouteListWarning | null;
	}

	export interface RouteListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RouteListWarningData?: Array<RouteListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RouteListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Cloud Router resource.
	 * For more information about Cloud Router, read the the Cloud Router overview.
	 */
	export interface Router {
		bgp?: RouterBgp | null;

		/** BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273. */
		bgpPeers?: Array<RouterBgpPeer> | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both. */
		interfaces?: Array<RouterInterface> | null;

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** A list of NAT services created in this router. */
		nats?: Array<RouterNat> | null;

		/** URI of the network to which this router belongs. */
		network?: string | null;

		/** [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	export interface RouterBgp {

		/** User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM. */
		advertiseMode?: RouterBgpAdvertiseMode | null;

		/** User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups. */
		advertisedGroups?: Array<string> | null;

		/** User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges. */
		advertisedIpRanges?: Array<RouterAdvertisedIpRange> | null;

		/** Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN. */
		asn?: string | null;
	}

	export enum RouterBgpAdvertiseMode { CUSTOM = 0, DEFAULT = 1 }


	/** Description-tagged IP ranges for the router to advertise. */
	export interface RouterAdvertisedIpRange {

		/** User-specified description for the IP range. */
		description?: string | null;

		/** The IP range to advertise. The value must be a CIDR-formatted string. */
		range?: string | null;
	}

	export interface RouterBgpPeer {

		/** User-specified flag to indicate which mode to use for advertisement. */
		advertiseMode?: RouterBgpAdvertiseMode | null;

		/**
		 * User-specified list of prefix groups to advertise in custom mode, which can take one of the following options:
		 * - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets.
		 * - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets.
		 * - ALL_PEER_VPC_SUBNETS: Advertises peer subnets of the router's VPC network. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
		 */
		advertisedGroups?: Array<string> | null;

		/** User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges. */
		advertisedIpRanges?: Array<RouterAdvertisedIpRange> | null;

		/** The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win. */
		advertisedRoutePriority?: string | null;

		/** Name of the interface the BGP peer is associated with. */
		interfaceName?: string | null;

		/** IP address of the interface inside Google Cloud Platform. Only IPv4 is supported. */
		ipAddress?: string | null;

		/**
		 * [Output Only] The resource that configures and manages this BGP peer.
		 * - MANAGED_BY_USER is the default value and can be managed by you or other users
		 * - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
		 */
		managementType?: RouterBgpPeerManagementType | null;

		/**
		 * Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value. */
		peerAsn?: string | null;

		/** IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported. */
		peerIpAddress?: string | null;
	}

	export enum RouterBgpPeerManagementType { MANAGED_BY_ATTACHMENT = 0, MANAGED_BY_USER = 1 }

	export interface RouterInterface {

		/** IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface. */
		ipRange?: string | null;

		/** URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance. */
		linkedInterconnectAttachment?: string | null;

		/** URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance. */
		linkedVpnTunnel?: string | null;

		/**
		 * [Output Only] The resource that configures and manages this interface.
		 * - MANAGED_BY_USER is the default value and can be managed directly by users.
		 * - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
		 */
		managementType?: RouterBgpPeerManagementType | null;

		/**
		 * Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;
	}


	/** Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided. */
	export interface RouterNat {

		/** A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only. */
		drainNatIps?: Array<string> | null;

		/** Timeout (in seconds) for ICMP connections. Defaults to 30s if not set. */
		icmpIdleTimeoutSec?: number | null;

		/** Configuration of logging on a NAT. */
		logConfig?: RouterNatLogConfig | null;

		/** Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM. */
		minPortsPerVm?: number | null;

		/**
		 * Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * Specify the NatIpAllocateOption, which can take one of the following values:
		 * - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs.
		 * - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
		 */
		natIpAllocateOption?: RouterNatNatIpAllocateOption | null;

		/** A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project. */
		natIps?: Array<string> | null;

		/**
		 * Specify the Nat option, which can take one of the following values:
		 * - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat.
		 * - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat.
		 * - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
		 */
		sourceSubnetworkIpRangesToNat?: RouterNatSourceSubnetworkIpRangesToNat | null;

		/** A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above. */
		subnetworks?: Array<RouterNatSubnetworkToNat> | null;

		/** Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set. */
		tcpEstablishedIdleTimeoutSec?: number | null;

		/** Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set. */
		tcpTransitoryIdleTimeoutSec?: number | null;

		/** Timeout (in seconds) for UDP connections. Defaults to 30s if not set. */
		udpIdleTimeoutSec?: number | null;
	}


	/** Configuration of logging on a NAT. */
	export interface RouterNatLogConfig {

		/** Indicates whether or not to export logs. This is false by default. */
		enable?: boolean | null;

		/**
		 * Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values:
		 * - ERRORS_ONLY: Export logs only for connection failures.
		 * - TRANSLATIONS_ONLY: Export logs only for successful connections.
		 * - ALL: Export logs for all connections, successful and unsuccessful.
		 */
		filter?: RouterNatLogConfigFilter | null;
	}

	export enum RouterNatLogConfigFilter { ALL = 0, ERRORS_ONLY = 1, TRANSLATIONS_ONLY = 2 }

	export enum RouterNatNatIpAllocateOption { AUTO_ONLY = 0, MANUAL_ONLY = 1 }

	export enum RouterNatSourceSubnetworkIpRangesToNat { ALL_SUBNETWORKS_ALL_IP_RANGES = 0, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = 1, LIST_OF_SUBNETWORKS = 2 }


	/** Defines the IP ranges that want to use NAT for a subnetwork. */
	export interface RouterNatSubnetworkToNat {

		/** URL for the subnetwork resource that will use NAT. */
		name?: string | null;

		/** A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat. */
		secondaryIpRangeNames?: Array<string> | null;

		/** Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES] */
		sourceIpRangesToNat?: Array<string> | null;
	}


	/** Contains a list of routers. */
	export interface RouterAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Router resources. */
		items?: {[id: string]: RoutersScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RouterAggregatedListWarning | null;
	}

	export interface RoutersScopedList {

		/** A list of routers contained in this scope. */
		routers?: Array<Router> | null;

		/** Informational warning which replaces the list of routers when the list is empty. */
		warning?: RoutersScopedListWarning | null;
	}

	export interface RoutersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RoutersScopedListWarningData?: Array<RoutersScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RoutersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RouterAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RouterAggregatedListWarningData?: Array<RouterAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RouterAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Router resources. */
	export interface RouterList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Router resources. */
		items?: Array<Router> | null;

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RouterListWarning | null;
	}

	export interface RouterListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		RouterListWarningData?: Array<RouterListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface RouterListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface RouterStatus {

		/** Best routes for this router's network. */
		bestRoutes?: Array<Route> | null;

		/** Best routes learned by this router. */
		bestRoutesForRouter?: Array<Route> | null;
		bgpPeerStatus?: Array<RouterStatusBgpPeerStatus> | null;
		natStatus?: Array<RouterStatusNatStatus> | null;

		/** URI of the network to which this router belongs. */
		network?: string | null;
	}

	export interface RouterStatusBgpPeerStatus {

		/** Routes that were advertised to the remote BGP peer */
		advertisedRoutes?: Array<Route> | null;

		/** IP address of the local BGP interface. */
		ipAddress?: string | null;

		/** URL of the VPN tunnel that this BGP peer controls. */
		linkedVpnTunnel?: string | null;

		/** Name of this BGP peer. Unique within the Routers resource. */
		name?: string | null;

		/** Number of routes learned from the remote BGP Peer. */
		numLearnedRoutes?: string | null;

		/** IP address of the remote BGP interface. */
		peerIpAddress?: string | null;

		/** BGP state as specified in RFC1771. */
		state?: string | null;

		/** Status of the BGP peer: {UP, DOWN} */
		status?: RouterStatusBgpPeerStatusStatus | null;

		/** Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds */
		uptime?: string | null;

		/** Time this session has been up, in seconds. Format: 145 */
		uptimeSeconds?: string | null;
	}

	export enum RouterStatusBgpPeerStatusStatus { DOWN = 0, UNKNOWN = 1, UP = 2 }


	/** Status of a NAT contained in this router. Next tag: 9 */
	export interface RouterStatusNatStatus {

		/** A list of IPs auto-allocated for NAT. Example: ["1.1.1.1", "129.2.16.89"] */
		autoAllocatedNatIps?: Array<string> | null;

		/** A list of IPs auto-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
		drainAutoAllocatedNatIps?: Array<string> | null;

		/** A list of IPs user-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
		drainUserAllocatedNatIps?: Array<string> | null;

		/** The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used. */
		minExtraNatIpsNeeded?: number | null;

		/** Unique name of this NAT. */
		name?: string | null;

		/** Number of VM endpoints (i.e., Nics) that can use NAT. */
		numVmEndpointsWithNatMappings?: number | null;

		/** A list of fully qualified URLs of reserved IP address resources. */
		userAllocatedNatIpResources?: Array<string> | null;

		/** A list of IPs user-allocated for NAT. They will be raw IP strings like "179.12.26.133". */
		userAllocatedNatIps?: Array<string> | null;
	}

	export interface RouterStatusResponse {

		/** Type of resource. */
		kind?: string | null;
		result?: RouterStatus | null;
	}

	export interface RoutersPreviewResponse {

		/**
		 * Represents a Cloud Router resource.
		 * For more information about Cloud Router, read the the Cloud Router overview.
		 */
		resource?: Router | null;
	}

	export interface SecurityPoliciesListPreconfiguredExpressionSetsResponse {
		preconfiguredExpressionSets?: SecurityPoliciesWafConfig | null;
	}

	export interface SecurityPoliciesWafConfig {
		wafRules?: PreconfiguredWafSet | null;
	}


	/**
	 * Represents a Cloud Armor Security Policy resource.
	 * Only external backend services that use load balancers can reference a Security Policy. For more information, read  Cloud Armor Security Policy Concepts. (== resource_for {$api_version}.securityPolicies ==)
	 */
	export interface SecurityPolicy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make get() request to the security policy.
		 */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#securityPolicyfor security policies */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added. */
		rules?: Array<SecurityPolicyRule> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}


	/** Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny). */
	export interface SecurityPolicyRule {

		/** The Action to preform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502. */
		action?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules */
		kind?: string | null;

		/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
		match?: SecurityPolicyRuleMatcher | null;

		/** If set to true, the specified action is not enforced. */
		preview?: boolean | null;

		/** An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority. */
		priority?: number | null;
	}


	/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
	export interface SecurityPolicyRuleMatcher {
		config?: SecurityPolicyRuleMatcherConfig | null;

		/**
		 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.
		 * Example (Comparison):
		 * title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100"
		 * Example (Equality):
		 * title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email"
		 * Example (Logic):
		 * title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'"
		 * Example (Data Manipulation):
		 * title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)"
		 * The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		 */
		expr?: Expr | null;

		/** Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config. */
		versionedExpr?: SecurityPolicyRuleMatcherVersionedExpr | null;
	}

	export interface SecurityPolicyRuleMatcherConfig {

		/** CIDR IP address range. */
		srcIpRanges?: Array<string> | null;
	}

	export enum SecurityPolicyRuleMatcherVersionedExpr { SRC_IPS_V1 = 0 }

	export interface SecurityPolicyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SecurityPolicy resources. */
		items?: Array<SecurityPolicy> | null;

		/** [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SecurityPolicyListWarning | null;
	}

	export interface SecurityPolicyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SecurityPolicyListWarningData?: Array<SecurityPolicyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SecurityPolicyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SecurityPolicyReference {
		securityPolicy?: string | null;
	}


	/** An instance's serial console output. */
	export interface SerialPortOutput {

		/** [Output Only] The contents of the console output. */
		contents?: string | null;

		/** [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output. */
		kind?: string | null;

		/** [Output Only] The position of the next byte of content from the serial console output. Use this value in the next request as the start parameter. */
		next?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer, older output will be overwritten by newer content and the start values will be mismatched. */
		start?: string | null;
	}


	/** A shielded Instance identity entry. */
	export interface ShieldedInstanceIdentity {

		/** A Shielded Instance Identity Entry. */
		encryptionKey?: ShieldedInstanceIdentityEntry | null;

		/** [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry. */
		kind?: string | null;

		/** A Shielded Instance Identity Entry. */
		signingKey?: ShieldedInstanceIdentityEntry | null;
	}


	/** A Shielded Instance Identity Entry. */
	export interface ShieldedInstanceIdentityEntry {

		/** A PEM-encoded X.509 certificate. This field can be empty. */
		ekCert?: string | null;

		/** A PEM-encoded public key. */
		ekPub?: string | null;
	}


	/** Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs */
	export interface SignedUrlKey {

		/**
		 * Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		keyName?: string | null;

		/** 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string. */
		keyValue?: string | null;
	}


	/**
	 * Represents a Persistent Disk Snapshot resource.
	 * You can use snapshots to back up data on a regular interval. For more information, read  Creating persistent disk snapshots. (== resource_for {$api_version}.snapshots ==)
	 */
	export interface Snapshot {

		/** [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk. */
		autoCreated?: boolean | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Size of the source disk, specified in GB. */
		diskSizeGb?: string | null;

		/** [Output Only] Number of bytes downloaded to restore a snapshot to a disk. */
		downloadBytes?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources. */
		kind?: string | null;

		/**
		 * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve a snapshot.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty. */
		labels?: {[id: string]: string } | null;

		/** [Output Only] Integer license codes indicating which licenses are attached to this snapshot. */
		licenseCodes?: Array<string> | null;

		/** [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image). */
		licenses?: Array<string> | null;

		/**
		 * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Represents a customer-supplied encryption key */
		snapshotEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The source disk used to create this snapshot. */
		sourceDisk?: string | null;

		/** Represents a customer-supplied encryption key */
		sourceDiskEncryptionKey?: CustomerEncryptionKey | null;

		/** [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name. */
		sourceDiskId?: string | null;

		/** [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING. */
		status?: SnapshotStatus | null;

		/** [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion. */
		storageBytes?: string | null;

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus?: SnapshotStorageBytesStatus | null;

		/** Cloud Storage bucket storage location of the snapshot (regional or multi-regional). */
		storageLocations?: Array<string> | null;
	}

	export enum SnapshotStatus { CREATING = 0, DELETING = 1, FAILED = 2, READY = 3, UPLOADING = 4 }

	export enum SnapshotStorageBytesStatus { UPDATING = 0, UP_TO_DATE = 1 }


	/** Contains a list of Snapshot resources. */
	export interface SnapshotList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Snapshot resources. */
		items?: Array<Snapshot> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SnapshotListWarning | null;
	}

	export interface SnapshotListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SnapshotListWarningData?: Array<SnapshotListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SnapshotListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents an SSL Certificate resource.
	 * Google Compute Engine has two SSL Certificate resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/sslCertificates) * [Regional](/compute/docs/reference/rest/{$api_version}/regionSslCertificates)
	 * The sslCertificates are used by:  
	 * - external HTTPS load balancers 
	 * - SSL proxy load balancers  
	 * The regionSslCertificates are used by internal HTTPS load balancers.
	 * Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read  Creating and using SSL certificates and SSL certificates quotas and limits. (== resource_for {$api_version}.sslCertificates ==) (== resource_for {$api_version}.regionSslCertificates ==)
	 */
	export interface SslCertificate {

		/** A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
		certificate?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** A write-only private key in PEM format. Only insert requests will include this field. */
		privateKey?: string | null;

		/** [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate. */
		region?: string | null;

		/** [Output only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	export interface SslCertificateAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslCertificatesScopedList resources. */
		items?: {[id: string]: SslCertificatesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SslCertificateAggregatedListWarning | null;
	}

	export interface SslCertificatesScopedList {

		/** List of SslCertificates contained in this scope. */
		sslCertificates?: Array<SslCertificate> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: SslCertificatesScopedListWarning | null;
	}

	export interface SslCertificatesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SslCertificatesScopedListWarningData?: Array<SslCertificatesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SslCertificatesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SslCertificateAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SslCertificateAggregatedListWarningData?: Array<SslCertificateAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SslCertificateAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of SslCertificate resources. */
	export interface SslCertificateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslCertificate resources. */
		items?: Array<SslCertificate> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SslCertificateListWarning | null;
	}

	export interface SslCertificateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SslCertificateListWarningData?: Array<SslCertificateListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SslCertificateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SslPoliciesList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslPolicy resources. */
		items?: Array<SslPolicy> | null;

		/** [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SslPoliciesListWarning | null;
	}


	/**
	 * Represents a Cloud Armor Security Policy resource.
	 * Only external backend services used by HTTP or HTTPS load balancers can reference a Security Policy. For more information, read read  Cloud Armor Security Policy Concepts. (== resource_for {$api_version}.sslPolicies ==)
	 */
	export interface SslPolicy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/**
		 * A list of features enabled when the selected profile is CUSTOM. The
		 * - method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
		 */
		customFeatures?: Array<string> | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The list of features enabled in the SSL policy. */
		enabledFeatures?: Array<string> | null;

		/**
		 * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
		 */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies. */
		kind?: string | null;

		/** The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2. */
		minTlsVersion?: SslPolicyMinTlsVersion | null;

		/**
		 * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field. */
		profile?: SslPolicyProfile | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages. */
		SslPolicyWarnings?: Array<SslPolicyWarnings> | null;
	}

	export enum SslPolicyMinTlsVersion { TLS_1_0 = 0, TLS_1_1 = 1, TLS_1_2 = 2 }

	export enum SslPolicyProfile { COMPATIBLE = 0, CUSTOM = 1, MODERN = 2, RESTRICTED = 3 }

	export interface SslPolicyWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SslPolicyWarningsData?: Array<SslPolicyWarningsData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SslPolicyWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SslPoliciesListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SslPoliciesListWarningData?: Array<SslPoliciesListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SslPoliciesListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SslPoliciesListAvailableFeaturesResponse {
		features?: Array<string> | null;
	}

	export interface SslPolicyReference {

		/** URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource. */
		sslPolicy?: string | null;
	}


	/**
	 * Represents a Subnetwork resource.
	 * A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read  Virtual Private Cloud (VPC) Network. (== resource_for {$api_version}.subnetworks ==)
	 */
	export interface Subnetwork {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time. */
		description?: string | null;

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging. */
		enableFlowLogs?: boolean | null;

		/**
		 * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
		 */
		fingerprint?: string | null;

		/** [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork. */
		gatewayAddress?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field can be set only at resource creation time. */
		ipCidrRange?: string | null;

		/** [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources. */
		kind?: string | null;

		/** The available logging options for this subnetwork. */
		logConfig?: SubnetworkLogConfig | null;

		/**
		 * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time. */
		network?: string | null;

		/** Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess. */
		privateIpGoogleAccess?: boolean | null;

		/** The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. */
		purpose?: SubnetworkPurpose | null;

		/** URL of the region where the Subnetwork resides. This field can be set only at resource creation time. */
		region?: string | null;

		/** The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request. */
		role?: SubnetworkRole | null;

		/** An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request. */
		secondaryIpRanges?: Array<SubnetworkSecondaryRange> | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The state of the subnetwork, which can be one of READY or DRAINING. A subnetwork that is READY is ready to be used. The state of DRAINING is only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY. */
		state?: SubnetworkState | null;
	}


	/** The available logging options for this subnetwork. */
	export interface SubnetworkLogConfig {

		/** Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection. */
		aggregationInterval?: SubnetworkLogConfigAggregationInterval | null;

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging. */
		enable?: boolean | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged. */
		filterExpr?: string | null;

		/** Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported. */
		flowSampling?: number | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is INCLUDE_ALL_METADATA. */
		metadata?: SubnetworkLogConfigMetadata | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA. */
		metadataFields?: Array<string> | null;
	}

	export enum SubnetworkLogConfigAggregationInterval { INTERVAL_10_MIN = 0, INTERVAL_15_MIN = 1, INTERVAL_1_MIN = 2, INTERVAL_30_SEC = 3, INTERVAL_5_MIN = 4, INTERVAL_5_SEC = 5 }

	export enum SubnetworkLogConfigMetadata { CUSTOM_METADATA = 0, EXCLUDE_ALL_METADATA = 1, INCLUDE_ALL_METADATA = 2 }

	export enum SubnetworkPurpose { INTERNAL_HTTPS_LOAD_BALANCER = 0, PRIVATE = 1, PRIVATE_RFC_1918 = 2 }

	export enum SubnetworkRole { ACTIVE = 0, BACKUP = 1 }


	/** Represents a secondary IP range of a subnetwork. */
	export interface SubnetworkSecondaryRange {

		/** The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. */
		ipCidrRange?: string | null;

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName?: string | null;
	}

	export enum SubnetworkState { DRAINING = 0, READY = 1 }

	export interface SubnetworkAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SubnetworksScopedList resources. */
		items?: {[id: string]: SubnetworksScopedList } | null;

		/** [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SubnetworkAggregatedListWarning | null;
	}

	export interface SubnetworksScopedList {

		/** A list of subnetworks contained in this scope. */
		subnetworks?: Array<Subnetwork> | null;

		/** An informational warning that appears when the list of addresses is empty. */
		warning?: SubnetworksScopedListWarning | null;
	}

	export interface SubnetworksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SubnetworksScopedListWarningData?: Array<SubnetworksScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SubnetworksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SubnetworkAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SubnetworkAggregatedListWarningData?: Array<SubnetworkAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SubnetworkAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of Subnetwork resources. */
	export interface SubnetworkList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Subnetwork resources. */
		items?: Array<Subnetwork> | null;

		/** [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SubnetworkListWarning | null;
	}

	export interface SubnetworkListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		SubnetworkListWarningData?: Array<SubnetworkListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface SubnetworkListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface SubnetworksExpandIpCidrRangeRequest {

		/** The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update. */
		ipCidrRange?: string | null;
	}

	export interface SubnetworksSetPrivateIpGoogleAccessRequest {
		privateIpGoogleAccess?: boolean | null;
	}

	export interface TargetHttpProxiesScopedList {

		/** A list of TargetHttpProxies contained in this scope. */
		targetHttpProxies?: Array<TargetHttpProxy> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: TargetHttpProxiesScopedListWarning | null;
	}


	/**
	 * Represents a Target HTTP Proxy resource.
	 * Google Compute Engine has two Target HTTP Proxy resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/targetHttpProxies) * [Regional](/compute/docs/reference/rest/{$api_version}/regionTargetHttpProxies)
	 * A target HTTP proxy is a component of GCP HTTP load balancers.
	 * * targetHttpProxies are used by external HTTP load balancers and Traffic Director. * regionTargetHttpProxies are used by internal HTTP load balancers.
	 * Forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and  Forwarding rule concepts. (== resource_for {$api_version}.targetHttpProxies ==) (== resource_for {$api_version}.regionTargetHttpProxies ==)
	 */
	export interface TargetHttpProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the UrlMap resource that defines the mapping from URL to the BackendService. */
		urlMap?: string | null;
	}

	export interface TargetHttpProxiesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetHttpProxiesScopedListWarningData?: Array<TargetHttpProxiesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetHttpProxiesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetHttpProxyAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpProxiesScopedList resources. */
		items?: {[id: string]: TargetHttpProxiesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;
	}


	/** A list of TargetHttpProxy resources. */
	export interface TargetHttpProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpProxy resources. */
		items?: Array<TargetHttpProxy> | null;

		/** Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpProxyListWarning | null;
	}

	export interface TargetHttpProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetHttpProxyListWarningData?: Array<TargetHttpProxyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetHttpProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetHttpsProxiesScopedList {

		/** A list of TargetHttpsProxies contained in this scope. */
		targetHttpsProxies?: Array<TargetHttpsProxy> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: TargetHttpsProxiesScopedListWarning | null;
	}


	/**
	 * Represents a Target HTTPS Proxy resource.
	 * Google Compute Engine has two Target HTTPS Proxy resources:
	 * * [Global](/compute/docs/reference/rest/{$api_version}/targetHttpsProxies) * [Regional](/compute/docs/reference/rest/{$api_version}/regionTargetHttpsProxies)
	 * A target HTTPS proxy is a component of GCP HTTPS load balancers.
	 * * targetHttpsProxies are used by external HTTPS load balancers. * regionTargetHttpsProxies are used by internal HTTPS load balancers.
	 * Forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and  Forwarding rule concepts. (== resource_for {$api_version}.targetHttpsProxies ==) (== resource_for {$api_version}.regionTargetHttpsProxies ==)
	 */
	export interface TargetHttpsProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/**
		 * Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.
		 * - When quic-override is set to NONE, Google manages whether QUIC is used.
		 * - When quic-override is set to ENABLE, the load balancer uses QUIC when possible.
		 * - When quic-override is set to DISABLE, the load balancer doesn't use QUIC.
		 * - If the quic-override flag is not specified, NONE is implied.
		 * -
		 */
		quicOverride?: TargetHttpsProxyQuicOverride | null;

		/** [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. */
		sslCertificates?: Array<string> | null;

		/** URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured. */
		sslPolicy?: string | null;

		/**
		 * A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map:
		 * - https://www.googleapis.compute/v1/projects/project/global/urlMaps/url-map
		 * - projects/project/global/urlMaps/url-map
		 * - global/urlMaps/url-map
		 */
		urlMap?: string | null;
	}

	export enum TargetHttpsProxyQuicOverride { DISABLE = 0, ENABLE = 1, NONE = 2 }

	export interface TargetHttpsProxiesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetHttpsProxiesScopedListWarningData?: Array<TargetHttpsProxiesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetHttpsProxiesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetHttpsProxiesSetQuicOverrideRequest {

		/** QUIC policy for the TargetHttpsProxy resource. */
		quicOverride?: TargetHttpsProxyQuicOverride | null;
	}

	export interface TargetHttpsProxiesSetSslCertificatesRequest {

		/** New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified. */
		sslCertificates?: Array<string> | null;
	}

	export interface TargetHttpsProxyAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpsProxiesScopedList resources. */
		items?: {[id: string]: TargetHttpsProxiesScopedList } | null;

		/** [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpsProxyAggregatedListWarning | null;
	}

	export interface TargetHttpsProxyAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetHttpsProxyAggregatedListWarningData?: Array<TargetHttpsProxyAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetHttpsProxyAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of TargetHttpsProxy resources. */
	export interface TargetHttpsProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpsProxy resources. */
		items?: Array<TargetHttpsProxy> | null;

		/** Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpsProxyListWarning | null;
	}

	export interface TargetHttpsProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetHttpsProxyListWarningData?: Array<TargetHttpsProxyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetHttpsProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Target Instance resource.
	 * You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances. (== resource_for {$api_version}.targetInstances ==)
	 */
	export interface TargetInstance {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/**
		 * A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance
		 * - projects/project/zones/zone/instances/instance
		 * - zones/zone/instances/instance
		 */
		instance?: string | null;

		/** [Output Only] The type of the resource. Always compute#targetInstance for target instances. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported. */
		natPolicy?: TargetInstanceNatPolicy | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	export enum TargetInstanceNatPolicy { NO_NAT = 0 }

	export interface TargetInstanceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetInstance resources. */
		items?: {[id: string]: TargetInstancesScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetInstanceAggregatedListWarning | null;
	}

	export interface TargetInstancesScopedList {

		/** A list of target instances contained in this scope. */
		targetInstances?: Array<TargetInstance> | null;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetInstancesScopedListWarning | null;
	}

	export interface TargetInstancesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetInstancesScopedListWarningData?: Array<TargetInstancesScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetInstancesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetInstanceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetInstanceAggregatedListWarningData?: Array<TargetInstanceAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetInstanceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of TargetInstance resources. */
	export interface TargetInstanceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetInstance resources. */
		items?: Array<TargetInstance> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetInstanceListWarning | null;
	}

	export interface TargetInstanceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetInstanceListWarningData?: Array<TargetInstanceListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetInstanceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Target Pool resource.
	 * Target pools are used for network TCP/UDP load balancing. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools. (== resource_for {$api_version}.targetPools ==)
	 */
	export interface TargetPool {

		/**
		 * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1].
		 * backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool.
		 * In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
		 */
		backupPool?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1].
		 * If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool.
		 * In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
		 */
		failoverRatio?: number | null;

		/** The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. An empty list means all member instances will be considered healthy at all times. Only HttpHealthChecks are supported. Only one health check may be specified. */
		healthChecks?: Array<string> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool. */
		instances?: Array<string> | null;

		/** [Output Only] Type of the resource. Always compute#targetPool for target pools. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** [Output Only] URL of the region where the target pool resides. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * Session affinity option, must be one of the following values:
		 * NONE: Connections from the same client IP may go to any instance in the pool.
		 * CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy.
		 * CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
		 */
		sessionAffinity?: BackendServiceSessionAffinity | null;
	}

	export interface TargetPoolAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetPool resources. */
		items?: {[id: string]: TargetPoolsScopedList } | null;

		/** [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetPoolAggregatedListWarning | null;
	}

	export interface TargetPoolsScopedList {

		/** A list of target pools contained in this scope. */
		targetPools?: Array<TargetPool> | null;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetPoolsScopedListWarning | null;
	}

	export interface TargetPoolsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetPoolsScopedListWarningData?: Array<TargetPoolsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetPoolsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetPoolAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetPoolAggregatedListWarningData?: Array<TargetPoolAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetPoolAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetPoolInstanceHealth {
		healthStatus?: Array<HealthStatus> | null;

		/** [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance. */
		kind?: string | null;
	}


	/** Contains a list of TargetPool resources. */
	export interface TargetPoolList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetPool resources. */
		items?: Array<TargetPool> | null;

		/** [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetPoolListWarning | null;
	}

	export interface TargetPoolListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetPoolListWarningData?: Array<TargetPoolListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetPoolListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetPoolsAddHealthCheckRequest {

		/** The HttpHealthCheck to add to the target pool. */
		healthChecks?: Array<HealthCheckReference> | null;
	}

	export interface TargetPoolsAddInstanceRequest {

		/**
		 * A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs:
		 * - https://www.googleapis.com/compute/v1/projects/project-id/zones/zone/instances/instance-name
		 * - projects/project-id/zones/zone/instances/instance-name
		 * - zones/zone/instances/instance-name
		 */
		instances?: Array<InstanceReference> | null;
	}

	export interface TargetPoolsRemoveHealthCheckRequest {

		/**
		 * Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs:
		 * - https://www.googleapis.com/compute/beta/projects/project/global/httpHealthChecks/health-check
		 * - projects/project/global/httpHealthChecks/health-check
		 * - global/httpHealthChecks/health-check
		 */
		healthChecks?: Array<HealthCheckReference> | null;
	}

	export interface TargetPoolsRemoveInstanceRequest {

		/** URLs of the instances to be removed from target pool. */
		instances?: Array<InstanceReference> | null;
	}

	export interface TargetReference {
		target?: string | null;
	}

	export interface TargetSslProxiesSetBackendServiceRequest {

		/** The URL of the new BackendService resource for the targetSslProxy. */
		service?: string | null;
	}

	export interface TargetSslProxiesSetProxyHeaderRequest {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;
	}

	export interface TargetSslProxiesSetSslCertificatesRequest {

		/** New set of URLs to SslCertificate resources to associate with this TargetSslProxy. Currently exactly one ssl certificate must be specified. */
		sslCertificates?: Array<string> | null;
	}


	/**
	 * Represents a Target SSL Proxy resource.
	 * A target SSL proxy is a component of a SSL Proxy load balancer. Global forwarding rules reference a target SSL proxy, and the target proxy then references an external backend service. For more information, read Using Target Proxies. (== resource_for {$api_version}.targetSslProxies ==)
	 */
	export interface TargetSslProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the BackendService resource. */
		service?: string | null;

		/** URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. */
		sslCertificates?: Array<string> | null;

		/** URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured. */
		sslPolicy?: string | null;
	}


	/** Contains a list of TargetSslProxy resources. */
	export interface TargetSslProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetSslProxy resources. */
		items?: Array<TargetSslProxy> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetSslProxyListWarning | null;
	}

	export interface TargetSslProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetSslProxyListWarningData?: Array<TargetSslProxyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetSslProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetTcpProxiesSetBackendServiceRequest {

		/** The URL of the new BackendService resource for the targetTcpProxy. */
		service?: string | null;
	}

	export interface TargetTcpProxiesSetProxyHeaderRequest {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;
	}


	/**
	 * Represents a Target TCP Proxy resource.
	 * A target TCP proxy is a component of a TCP Proxy load balancer. Global forwarding rules reference target TCP proxy, and the target proxy then references an external backend service. For more information, read TCP Proxy Load Balancing overview. (== resource_for {$api_version}.targetTcpProxies ==)
	 */
	export interface TargetTcpProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the BackendService resource. */
		service?: string | null;
	}


	/** Contains a list of TargetTcpProxy resources. */
	export interface TargetTcpProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetTcpProxy resources. */
		items?: Array<TargetTcpProxy> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetTcpProxyListWarning | null;
	}

	export interface TargetTcpProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetTcpProxyListWarningData?: Array<TargetTcpProxyListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetTcpProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Target VPN Gateway resource.
	 * The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview. (== resource_for {$api_version}.targetVpnGateways ==)
	 */
	export interface TargetVpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway. */
		forwardingRules?: Array<string> | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network?: string | null;

		/** [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING. */
		status?: TargetVpnGatewayStatus | null;

		/** [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway. */
		tunnels?: Array<string> | null;
	}

	export enum TargetVpnGatewayStatus { CREATING = 0, DELETING = 1, FAILED = 2, READY = 3 }

	export interface TargetVpnGatewayAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetVpnGateway resources. */
		items?: {[id: string]: TargetVpnGatewaysScopedList } | null;

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetVpnGatewayAggregatedListWarning | null;
	}

	export interface TargetVpnGatewaysScopedList {

		/** [Output Only] A list of target VPN gateways contained in this scope. */
		targetVpnGateways?: Array<TargetVpnGateway> | null;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetVpnGatewaysScopedListWarning | null;
	}

	export interface TargetVpnGatewaysScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetVpnGatewaysScopedListWarningData?: Array<TargetVpnGatewaysScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetVpnGatewaysScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TargetVpnGatewayAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetVpnGatewayAggregatedListWarningData?: Array<TargetVpnGatewayAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetVpnGatewayAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of TargetVpnGateway resources. */
	export interface TargetVpnGatewayList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetVpnGateway resources. */
		items?: Array<TargetVpnGateway> | null;

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetVpnGatewayListWarning | null;
	}

	export interface TargetVpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		TargetVpnGatewayListWarningData?: Array<TargetVpnGatewayListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface TargetVpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface TestFailure {
		actualService?: string | null;
		expectedService?: string | null;
		host?: string | null;
		path?: string | null;
	}

	export interface TestPermissionsRequest {

		/** The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. */
		permissions?: Array<string> | null;
	}

	export interface TestPermissionsResponse {

		/** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
		permissions?: Array<string> | null;
	}


	/** Contains a list of UrlMap resources. */
	export interface UrlMapList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of UrlMap resources. */
		items?: Array<UrlMap> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: UrlMapListWarning | null;
	}

	export interface UrlMapListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		UrlMapListWarningData?: Array<UrlMapListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface UrlMapListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface UrlMapReference {
		urlMap?: string | null;
	}


	/** Message representing the validation result for a UrlMap. */
	export interface UrlMapValidationResult {
		loadErrors?: Array<string> | null;

		/** Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons. */
		loadSucceeded?: boolean | null;
		testFailures?: Array<TestFailure> | null;

		/** If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure. */
		testPassed?: boolean | null;
	}

	export interface UrlMapsAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of UrlMapsScopedList resources. */
		items?: {[id: string]: UrlMapsScopedList } | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: UrlMapsAggregatedListWarning | null;
	}

	export interface UrlMapsScopedList {

		/** A list of UrlMaps contained in this scope. */
		urlMaps?: Array<UrlMap> | null;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: UrlMapsScopedListWarning | null;
	}

	export interface UrlMapsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		UrlMapsScopedListWarningData?: Array<UrlMapsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface UrlMapsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface UrlMapsAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		UrlMapsAggregatedListWarningData?: Array<UrlMapsAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface UrlMapsAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface UrlMapsValidateRequest {

		/**
		 * Represents a URL Map resource.
		 * Google Compute Engine has two URL Map resources:
		 * * [Global](/compute/docs/reference/rest/{$api_version}/urlMaps) * [Regional](/compute/docs/reference/rest/{$api_version}/regionUrlMaps)
		 * A URL map resource is a component of certain types of GCP load balancers and Traffic Director.
		 * * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers.
		 * This resource defines mappings from host names and URL paths to either a backend service or a backend bucket.
		 * To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.
		 */
		resource?: UrlMap | null;
	}

	export interface UrlMapsValidateResponse {

		/** Message representing the validation result for a UrlMap. */
		result?: UrlMapValidationResult | null;
	}


	/** Subnetwork which the current user has compute.subnetworks.use permission on. */
	export interface UsableSubnetwork {

		/** The range of internal addresses that are owned by this subnetwork. */
		ipCidrRange?: string | null;

		/** Network URL. */
		network?: string | null;

		/** Secondary IP ranges. */
		secondaryIpRanges?: Array<UsableSubnetworkSecondaryRange> | null;

		/** Subnetwork URL. */
		subnetwork?: string | null;
	}


	/** Secondary IP range of a usable subnetwork. */
	export interface UsableSubnetworkSecondaryRange {

		/** The range of IP addresses belonging to this subnetwork secondary range. */
		ipCidrRange?: string | null;

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName?: string | null;
	}

	export interface UsableSubnetworksAggregatedList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output] A list of usable subnetwork URLs. */
		items?: Array<UsableSubnetwork> | null;

		/** [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: UsableSubnetworksAggregatedListWarning | null;
	}

	export interface UsableSubnetworksAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		UsableSubnetworksAggregatedListWarningData?: Array<UsableSubnetworksAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface UsableSubnetworksAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contain information of Nat mapping for a VM endpoint (i.e., NIC). */
	export interface VmEndpointNatMappings {

		/** Name of the VM instance which the endpoint belongs to */
		instanceName?: string | null;
		interfaceNatMappings?: Array<VmEndpointNatMappingsInterfaceNatMappings> | null;
	}


	/** Contain information of Nat mapping for an interface of this endpoint. */
	export interface VmEndpointNatMappingsInterfaceNatMappings {

		/** List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		drainNatIpPortRanges?: Array<string> | null;

		/** A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		natIpPortRanges?: Array<string> | null;

		/** Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges. */
		numTotalDrainNatPorts?: number | null;

		/** Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges. */
		numTotalNatPorts?: number | null;

		/** Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24". */
		sourceAliasIpRange?: string | null;

		/** Primary IP of the VM for this NIC. */
		sourceVirtualIp?: string | null;
	}


	/** Contains a list of VmEndpointNatMappings. */
	export interface VmEndpointNatMappingsList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] A list of Nat mapping information of VM endpoints. */
		result?: Array<VmEndpointNatMappings> | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VmEndpointNatMappingsListWarning | null;
	}

	export interface VmEndpointNatMappingsListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VmEndpointNatMappingsListWarningData?: Array<VmEndpointNatMappingsListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VmEndpointNatMappingsListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Represents a VPN gateway resource. Next ID: 13 */
	export interface VpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/**
		 * A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		 * To see the latest fingerprint, make a get() request to retrieve an VpnGateway.
		 */
		labelFingerprint?: string | null;

		/** Labels to apply to this VpnGateway resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string } | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network?: string | null;

		/** [Output Only] URL of the region where the VPN gateway resides. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] A list of interfaces on this VPN gateway. */
		vpnInterfaces?: Array<VpnGatewayVpnGatewayInterface> | null;
	}


	/** A VPN gateway interface. */
	export interface VpnGatewayVpnGatewayInterface {

		/** The numeric ID of this VPN gateway interface. */
		id?: string | null;

		/** The external IP address for this VPN gateway interface. */
		ipAddress?: string | null;
	}

	export interface VpnGatewayAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnGateway resources. */
		items?: {[id: string]: VpnGatewaysScopedList } | null;

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnGatewayAggregatedListWarning | null;
	}

	export interface VpnGatewaysScopedList {

		/** [Output Only] A list of VPN gateways contained in this scope. */
		vpnGateways?: Array<VpnGateway> | null;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: VpnGatewaysScopedListWarning | null;
	}

	export interface VpnGatewaysScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnGatewaysScopedListWarningData?: Array<VpnGatewaysScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnGatewaysScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface VpnGatewayAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnGatewayAggregatedListWarningData?: Array<VpnGatewayAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnGatewayAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of VpnGateway resources. */
	export interface VpnGatewayList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnGateway resources. */
		items?: Array<VpnGateway> | null;

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnGatewayListWarning | null;
	}

	export interface VpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnGatewayListWarningData?: Array<VpnGatewayListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface VpnGatewayStatus {

		/** List of VPN connection for this VpnGateway. */
		vpnConnections?: Array<VpnGatewayStatusVpnConnection> | null;
	}


	/** A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be a external VPN gateway or GCP VPN gateway. */
	export interface VpnGatewayStatusVpnConnection {

		/** URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerExternalGateway?: string | null;

		/** URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerGcpGateway?: string | null;

		/** Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway. */
		state?: VpnGatewayStatusHighAvailabilityRequirementState | null;

		/** List of VPN tunnels that are in this VPN connection. */
		tunnels?: Array<VpnGatewayStatusTunnel> | null;
	}


	/** Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway. */
	export interface VpnGatewayStatusHighAvailabilityRequirementState {

		/** Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET. */
		state?: VpnGatewayStatusHighAvailabilityRequirementStateState | null;

		/** Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE. */
		unsatisfiedReason?: VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason | null;
	}

	export enum VpnGatewayStatusHighAvailabilityRequirementStateState { CONNECTION_REDUNDANCY_MET = 0, CONNECTION_REDUNDANCY_NOT_MET = 1 }

	export enum VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason { INCOMPLETE_TUNNELS_COVERAGE = 0 }


	/** Contains some information about a VPN tunnel. */
	export interface VpnGatewayStatusTunnel {

		/** The VPN gateway interface this VPN tunnel is associated with. */
		localGatewayInterface?: string | null;

		/** The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway. */
		peerGatewayInterface?: string | null;

		/** URL reference to the VPN tunnel. */
		tunnelUrl?: string | null;
	}

	export interface VpnGatewaysGetStatusResponse {
		result?: VpnGatewayStatus | null;
	}


	/**
	 * Represents a Cloud VPN Tunnel resource.
	 * For more information about VPN, read the the Cloud VPN Overview. (== resource_for {$api_version}.vpnTunnels ==)
	 */
	export interface VpnTunnel {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Detailed status message for the VPN tunnel. */
		detailedStatus?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2. */
		ikeVersion?: number | null;

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported. */
		localTrafficSelector?: Array<string> | null;

		/**
		 * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
		 * Pattern: [a-z](?:[-a-z0-9]{0,61}[a-z0-9])?
		 */
		name?: string | null;

		/** URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway. */
		peerExternalGateway?: string | null;

		/** The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. */
		peerExternalGatewayInterface?: number | null;

		/** URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway. */
		peerGcpGateway?: string | null;

		/** IP address of the peer VPN gateway. Only IPv4 is supported. */
		peerIp?: string | null;

		/** [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported. */
		remoteTrafficSelector?: Array<string> | null;

		/** URL of the router resource to be used for dynamic routing. */
		router?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway. */
		sharedSecret?: string | null;

		/** Hash of the shared secret. */
		sharedSecretHash?: string | null;

		/**
		 * [Output Only] The status of the VPN tunnel, which can be one of the following:
		 * - PROVISIONING: Resource is being allocated for the VPN tunnel.
		 * - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel.
		 * - FIRST_HANDSHAKE: Successful first handshake with the peer VPN.
		 * - ESTABLISHED: Secure session is successfully established with the peer VPN.
		 * - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS
		 * - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret).
		 * - NEGOTIATION_FAILURE: Handshake failed.
		 * - DEPROVISIONING: Resources are being deallocated for the VPN tunnel.
		 * - FAILED: Tunnel creation has failed and the tunnel is not ready to be used.
		 * - NO_INCOMING_PACKETS: No incoming packets from peer.
		 * - REJECTED: Tunnel configuration was rejected, can be result of being blacklisted.
		 * - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources.
		 * - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state.
		 * - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT.
		 * - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
		 */
		status?: VpnTunnelStatus | null;

		/** URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. */
		targetVpnGateway?: string | null;

		/** URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created. */
		vpnGateway?: string | null;

		/** The interface ID of the VPN gateway with which this VPN tunnel is associated. */
		vpnGatewayInterface?: number | null;
	}

	export enum VpnTunnelStatus { ALLOCATING_RESOURCES = 0, AUTHORIZATION_ERROR = 1, DEPROVISIONING = 2, ESTABLISHED = 3, FAILED = 4, FIRST_HANDSHAKE = 5, NEGOTIATION_FAILURE = 6, NETWORK_ERROR = 7, NO_INCOMING_PACKETS = 8, PROVISIONING = 9, REJECTED = 10, STOPPED = 11, WAITING_FOR_FULL_CONFIG = 12 }

	export interface VpnTunnelAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnTunnelsScopedList resources. */
		items?: {[id: string]: VpnTunnelsScopedList } | null;

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnTunnelAggregatedListWarning | null;
	}

	export interface VpnTunnelsScopedList {

		/** A list of VPN tunnels contained in this scope. */
		vpnTunnels?: Array<VpnTunnel> | null;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: VpnTunnelsScopedListWarning | null;
	}

	export interface VpnTunnelsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnTunnelsScopedListWarningData?: Array<VpnTunnelsScopedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnTunnelsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface VpnTunnelAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnTunnelAggregatedListWarningData?: Array<VpnTunnelAggregatedListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnTunnelAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/** Contains a list of VpnTunnel resources. */
	export interface VpnTunnelList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnTunnel resources. */
		items?: Array<VpnTunnel> | null;

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnTunnelListWarning | null;
	}

	export interface VpnTunnelListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		VpnTunnelListWarningData?: Array<VpnTunnelListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface VpnTunnelListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface XpnHostList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** [Output Only] A list of shared VPC host project URLs. */
		items?: Array<Project> | null;

		/** [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: XpnHostListWarning | null;
	}

	export interface XpnHostListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		XpnHostListWarningData?: Array<XpnHostListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface XpnHostListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}


	/**
	 * Represents a Zone resource.
	 * A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones. (== resource_for {$api_version}.zones ==)
	 */
	export interface Zone {

		/** [Output Only] Available cpu/platform selections for the zone. */
		availableCpuPlatforms?: Array<string> | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus | null;

		/** [Output Only] Textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#zone for zones. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Full URL reference to the region which hosts the zone. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Status of the zone, either UP or DOWN. */
		status?: RegionStatus | null;
	}


	/** Contains a list of zone resources. */
	export interface ZoneList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Zone resources. */
		items?: Array<Zone> | null;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ZoneListWarning | null;
	}

	export interface ZoneListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/**
		 * [Output Only] Metadata about this warning in key: value format. For example:
		 * "data": [ { "key": "scope", "value": "zones/us-east1-d" }
		 */
		ZoneListWarningData?: Array<ZoneListWarningData> | null;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}

	export interface ZoneListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}

	export interface ZoneSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** The labels to set for this resource. */
		labels?: {[id: string]: string } | null;
	}

	export interface ZoneSetPolicyRequest {

		/** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding> | null;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/**
		 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.
		 * A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.
		 * Optionally, a `binding` can specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both.
		 * **JSON example:**
		 * { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": ["user:eve@example.com"], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 }
		 * **YAML example:**
		 * bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3
		 * For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		 */
		policy?: Policy | null;
	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Returns the specified Project resource.
		 * Get {project}
		 * @param {string} project Project ID for this request.
		 * @return {void} Successful response
		 */
		Compute_projects_get(project: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of accelerator types.
		 * Get {project}/aggregated/acceleratorTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_acceleratorTypes_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/acceleratorTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of addresses.
		 * Get {project}/aggregated/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_addresses_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of autoscalers.
		 * Get {project}/aggregated/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_autoscalers_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all BackendService resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/backendServices
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_backendServices_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of commitments.
		 * Get {project}/aggregated/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionCommitments_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/commitments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of disk types.
		 * Get {project}/aggregated/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_diskTypes_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of persistent disks.
		 * Get {project}/aggregated/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_disks_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of forwarding rules.
		 * Get {project}/aggregated/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/healthChecks
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_healthChecks_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of managed instance groups and groups them by zone.
		 * Get {project}/aggregated/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of instance groups and sorts them by zone.
		 * Get {project}/aggregated/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves aggregated list of all of the instances in your project across all regions and zones.
		 * Get {project}/aggregated/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instances_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of interconnect attachments.
		 * Get {project}/aggregated/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/interconnectAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of machine types.
		 * Get {project}/aggregated/machineTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_machineTypes_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/machineTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of network endpoint groups and sorts them by zone.
		 * Get {project}/aggregated/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
		 * Get {project}/aggregated/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of node templates.
		 * Get {project}/aggregated/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of node types.
		 * Get {project}/aggregated/nodeTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeTypes_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of all operations.
		 * Get {project}/aggregated/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of packetMirrorings.
		 * Get {project}/aggregated/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/packetMirrorings&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of reservations.
		 * Get {project}/aggregated/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_reservations_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/reservations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of resource policies.
		 * Get {project}/aggregated/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/resourcePolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of routers.
		 * Get {project}/aggregated/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_routers_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/routers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/sslCertificates
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_sslCertificates_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of subnetworks.
		 * Get {project}/aggregated/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/subnetworks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of all usable subnetworks in the project. The list contains all of the subnetworks in the project and the subnetworks that were shared by a Shared VPC host project.
		 * Get {project}/aggregated/subnetworks/listUsable
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_listUsable(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/subnetworks/listUsable&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/targetHttpProxies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/targetHttpsProxies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of target instances.
		 * Get {project}/aggregated/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetInstances_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of target pools.
		 * Get {project}/aggregated/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetPools_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetPools&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of target VPN gateways.
		 * Get {project}/aggregated/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetVpnGateways_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
		 * Get {project}/aggregated/urlMaps
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_urlMaps_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of VPN gateways.
		 * Get {project}/aggregated/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/vpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves an aggregated list of VPN tunnels.
		 * Get {project}/aggregated/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_vpnTunnels_aggregatedList(project: string, filter: string, includeAllScopes: boolean, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/vpnTunnels&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Disable this project as a shared VPC host project.
		 * Post {project}/disableXpnHost
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_disableXpnHost(project: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/disableXpnHost&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Disable a service resource (also known as service project) associated with this host project.
		 * Post {project}/disableXpnResource
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_disableXpnResource(project: string, requestId: string, requestBody: ProjectsDisableXpnResourceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/disableXpnResource&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Enable this project as a shared VPC host project.
		 * Post {project}/enableXpnHost
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_enableXpnHost(project: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/enableXpnHost&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
		 * Post {project}/enableXpnResource
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_enableXpnResource(project: string, requestId: string, requestBody: ProjectsEnableXpnResourceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/enableXpnResource&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the shared VPC host project that this project links to. May be empty if no link exists.
		 * Get {project}/getXpnHost
		 * @param {string} project Project ID for this request.
		 * @return {void} Successful response
		 */
		Compute_projects_getXpnHost(project: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/getXpnHost', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets service resources (a.k.a service project) associated with this host project.
		 * Get {project}/getXpnResources
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_projects_getXpnResources(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/getXpnResources&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of global addresses.
		 * Get {project}/global/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalAddresses_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an address resource in the specified project by using the data included in the request.
		 * Post {project}/global/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalAddresses_insert(project: string, requestId: string, requestBody: Address): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified address resource.
		 * Delete {project}/global/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} address Name of the address resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalAddresses_delete(project: string, address: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified address resource. Gets a list of available addresses by making a list() request.
		 * Get {project}/global/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} address Name of the address resource to return.
		 * @return {void} Successful response
		 */
		Compute_globalAddresses_get(project: string, address: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of BackendBucket resources available to the specified project.
		 * Get {project}/global/backendBuckets
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a BackendBucket resource in the specified project using the data included in the request.
		 * Post {project}/global/backendBuckets
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_insert(project: string, requestId: string, requestBody: BackendBucket): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified BackendBucket resource.
		 * Delete {project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_delete(project: string, backendBucket: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
		 * Get {project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to return.
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_get(project: string, backendBucket: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_patch(project: string, backendBucket: string, requestId: string, requestBody: BackendBucket): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified BackendBucket resource with the data included in the request.
		 * Put {project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_update(project: string, backendBucket: string, requestId: string, requestBody: BackendBucket): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds a key for validating requests with signed URLs for this backend bucket.
		 * Post {project}/global/backendBuckets/{backendBucket}/addSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_addSignedUrlKey(project: string, backendBucket: string, requestId: string, requestBody: SignedUrlKey): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '/addSignedUrlKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a key for validating requests with signed URLs for this backend bucket.
		 * Post {project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} keyName The name of the Signed URL Key to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendBuckets_deleteSignedUrlKey(project: string, backendBucket: string, keyName: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '/deleteSignedUrlKey&keyName=' + (keyName == null ? '' : encodeURIComponent(keyName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of BackendService resources available to the specified project.
		 * Get {project}/global/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_backendServices_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a backend service. Read  Understanding backend services for more information.
		 * Post {project}/global/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_insert(project: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified BackendService resource.
		 * Delete {project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_delete(project: string, backendService: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified BackendService resource. Gets a list of available backend services.
		 * Get {project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to return.
		 * @return {void} Successful response
		 */
		Compute_backendServices_get(project: string, backendService: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified BackendService resource with the data included in the request. There are several Understanding backend services to keep in mind when updating a backend service. Read  Understanding backend services for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_patch(project: string, backendService: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified BackendService resource with the data included in the request. There are several Understanding backend services to keep in mind when updating a backend service. Read  Understanding backend services for more information.
		 * Put {project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_update(project: string, backendService: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds a key for validating requests with signed URLs for this backend service.
		 * Post {project}/global/backendServices/{backendService}/addSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_addSignedUrlKey(project: string, backendService: string, requestId: string, requestBody: SignedUrlKey): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/addSignedUrlKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a key for validating requests with signed URLs for this backend service.
		 * Post {project}/global/backendServices/{backendService}/deleteSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} keyName The name of the Signed URL Key to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_deleteSignedUrlKey(project: string, backendService: string, keyName: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/deleteSignedUrlKey&keyName=' + (keyName == null ? '' : encodeURIComponent(keyName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the most recent health check results for this BackendService.
		 * Post {project}/global/backendServices/{backendService}/getHealth
		 * @param {string} backendService Name of the BackendService resource to which the queried instance belongs.
		 * @return {void} Successful response
		 */
		Compute_backendServices_getHealth(project: string, backendService: string, requestBody: ResourceGroupReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the security policy for the specified backend service.
		 * Post {project}/global/backendServices/{backendService}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_backendServices_setSecurityPolicy(project: string, backendService: string, requestId: string, requestBody: SecurityPolicyReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of ExternalVpnGateway available to the specified project.
		 * Get {project}/global/externalVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a ExternalVpnGateway in the specified project using the data included in the request.
		 * Post {project}/global/externalVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_insert(project: string, requestId: string, requestBody: ExternalVpnGateway): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified externalVpnGateway.
		 * Delete {project}/global/externalVpnGateways/{externalVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} externalVpnGateway Name of the externalVpnGateways to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_delete(project: string, externalVpnGateway: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (externalVpnGateway == null ? '' : encodeURIComponent(externalVpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
		 * Get {project}/global/externalVpnGateways/{externalVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} externalVpnGateway Name of the externalVpnGateway to return.
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_get(project: string, externalVpnGateway: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (externalVpnGateway == null ? '' : encodeURIComponent(externalVpnGateway)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/global/externalVpnGateways/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/global/externalVpnGateways/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_externalVpnGateways_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of firewall rules available to the specified project.
		 * Get {project}/global/firewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_firewalls_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a firewall rule in the specified project using the data included in the request.
		 * Post {project}/global/firewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_firewalls_insert(project: string, requestId: string, requestBody: Firewall): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified firewall.
		 * Delete {project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_firewalls_delete(project: string, firewall: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified firewall.
		 * Get {project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to return.
		 * @return {void} Successful response
		 */
		Compute_firewalls_get(project: string, firewall: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_firewalls_patch(project: string, firewall: string, requestId: string, requestBody: Firewall): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
		 * Put {project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_firewalls_update(project: string, firewall: string, requestId: string, requestBody: Firewall): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of GlobalForwardingRule resources available to the specified project.
		 * Get {project}/global/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
		 * Post {project}/global/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_insert(project: string, requestId: string, requestBody: ForwardingRule): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified GlobalForwardingRule resource.
		 * Delete {project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_delete(project: string, forwardingRule: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
		 * Get {project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to return.
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_get(project: string, forwardingRule: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
		 * Patch {project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_patch(project: string, forwardingRule: string, requestId: string, requestBody: ForwardingRule): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
		 * Post {project}/global/forwardingRules/{forwardingRule}/setTarget
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource in which target is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalForwardingRules_setTarget(project: string, forwardingRule: string, requestId: string, requestBody: TargetReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '/setTarget&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of HealthCheck resources available to the specified project.
		 * Get {project}/global/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_healthChecks_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a HealthCheck resource in the specified project using the data included in the request.
		 * Post {project}/global/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_healthChecks_insert(project: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified HealthCheck resource.
		 * Delete {project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_healthChecks_delete(project: string, healthCheck: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
		 * Get {project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to return.
		 * @return {void} Successful response
		 */
		Compute_healthChecks_get(project: string, healthCheck: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_healthChecks_patch(project: string, healthCheck: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request.
		 * Put {project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_healthChecks_update(project: string, healthCheck: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of HttpHealthCheck resources available to the specified project.
		 * Get {project}/global/httpHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a HttpHealthCheck resource in the specified project using the data included in the request.
		 * Post {project}/global/httpHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_insert(project: string, requestId: string, requestBody: HttpHealthCheck): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified HttpHealthCheck resource.
		 * Delete {project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_delete(project: string, httpHealthCheck: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified HttpHealthCheck resource. Gets a list of available HTTP health checks by making a list() request.
		 * Get {project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to return.
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_get(project: string, httpHealthCheck: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_patch(project: string, httpHealthCheck: string, requestId: string, requestBody: HttpHealthCheck): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HttpHealthCheck resource in the specified project using the data included in the request.
		 * Put {project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpHealthChecks_update(project: string, httpHealthCheck: string, requestId: string, requestBody: HttpHealthCheck): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of HttpsHealthCheck resources available to the specified project.
		 * Get {project}/global/httpsHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
		 * Post {project}/global/httpsHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_insert(project: string, requestId: string, requestBody: HttpsHealthCheck): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified HttpsHealthCheck resource.
		 * Delete {project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_delete(project: string, httpsHealthCheck: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified HttpsHealthCheck resource. Gets a list of available HTTPS health checks by making a list() request.
		 * Get {project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to return.
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_get(project: string, httpsHealthCheck: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_patch(project: string, httpsHealthCheck: string, requestId: string, requestBody: HttpsHealthCheck): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HttpsHealthCheck resource in the specified project using the data included in the request.
		 * Put {project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_httpsHealthChecks_update(project: string, httpsHealthCheck: string, requestId: string, requestBody: HttpsHealthCheck): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
		 * Get {project}/global/images
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_images_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an image in the specified project using the data included in the request.
		 * Post {project}/global/images
		 * @param {string} project Project ID for this request.
		 * @param {boolean} forceCreate Force image creation if true.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_images_insert(project: string, forceCreate: boolean, requestId: string, requestBody: Image): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images&forceCreate=' + forceCreate + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the latest image that is part of an image family and is not deprecated.
		 * Get {project}/global/images/family/{family}
		 * @param {string} project Project ID for this request.
		 * @param {string} family Name of the image family to search for.
		 * @return {void} Successful response
		 */
		Compute_images_getFromFamily(project: string, family: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/family/' + (family == null ? '' : encodeURIComponent(family)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified image.
		 * Delete {project}/global/images/{image}
		 * @param {string} project Project ID for this request.
		 * @param {string} image Name of the image resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_images_delete(project: string, image: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified image. Gets a list of available images by making a list() request.
		 * Get {project}/global/images/{image}
		 * @param {string} project Project ID for this request.
		 * @param {string} image Name of the image resource to return.
		 * @return {void} Successful response
		 */
		Compute_images_get(project: string, image: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the deprecation status of an image.
		 * If an empty request body is given, clears the deprecation status instead.
		 * Post {project}/global/images/{image}/deprecate
		 * @param {string} project Project ID for this request.
		 * @param {string} image Image name.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_images_deprecate(project: string, image: string, requestId: string, requestBody: DeprecationStatus): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '/deprecate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/global/images/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_images_getIamPolicy(project: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/global/images/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_images_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/global/images/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_images_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/global/images/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_images_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of instance templates that are contained within the specified project.
		 * Get {project}/global/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
		 * Post {project}/global/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_insert(project: string, requestId: string, requestBody: InstanceTemplate): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
		 * Delete {project}/global/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} instanceTemplate The name of the instance template to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_delete(project: string, instanceTemplate: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified instance template. Gets a list of available instance templates by making a list() request.
		 * Get {project}/global/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} instanceTemplate The name of the instance template.
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_get(project: string, instanceTemplate: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/global/instanceTemplates/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_getIamPolicy(project: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/global/instanceTemplates/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/global/instanceTemplates/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instanceTemplates_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of interconnect locations available to the specified project.
		 * Get {project}/global/interconnectLocations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_interconnectLocations_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectLocations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
		 * Get {project}/global/interconnectLocations/{interconnectLocation}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnectLocation Name of the interconnect location to return.
		 * @return {void} Successful response
		 */
		Compute_interconnectLocations_get(project: string, interconnectLocation: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectLocations/' + (interconnectLocation == null ? '' : encodeURIComponent(interconnectLocation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of interconnect available to the specified project.
		 * Get {project}/global/interconnects
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_interconnects_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a Interconnect in the specified project using the data included in the request.
		 * Post {project}/global/interconnects
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_interconnects_insert(project: string, requestId: string, requestBody: Interconnect): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified interconnect.
		 * Delete {project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_interconnects_delete(project: string, interconnect: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified interconnect. Get a list of available interconnects by making a list() request.
		 * Get {project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to return.
		 * @return {void} Successful response
		 */
		Compute_interconnects_get(project: string, interconnect: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_interconnects_patch(project: string, interconnect: string, requestId: string, requestBody: Interconnect): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the interconnectDiagnostics for the specified interconnect.
		 * Get {project}/global/interconnects/{interconnect}/getDiagnostics
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect resource to query.
		 * @return {void} Successful response
		 */
		Compute_interconnects_getDiagnostics(project: string, interconnect: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '/getDiagnostics', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get {project}/global/licenseCodes/{licenseCode}
		 * @param {string} project Project ID for this request.
		 * @param {string} licenseCode Number corresponding to the License code resource to return.
		 * @return {void} Successful response
		 */
		Compute_licenseCodes_get(project: string, licenseCode: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenseCodes/' + (licenseCode == null ? '' : encodeURIComponent(licenseCode)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post {project}/global/licenseCodes/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_licenseCodes_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenseCodes/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get {project}/global/licenses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_licenses_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post {project}/global/licenses
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_licenses_insert(project: string, requestId: string, requestBody: License): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Delete {project}/global/licenses/{license}
		 * @param {string} project Project ID for this request.
		 * @param {string} license Name of the license resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_licenses_delete(project: string, license: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (license == null ? '' : encodeURIComponent(license)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get {project}/global/licenses/{license}
		 * @param {string} project Project ID for this request.
		 * @param {string} license Name of the License resource to return.
		 * @return {void} Successful response
		 */
		Compute_licenses_get(project: string, license: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (license == null ? '' : encodeURIComponent(license)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get {project}/global/licenses/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_licenses_getIamPolicy(project: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post {project}/global/licenses/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_licenses_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post {project}/global/licenses/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_licenses_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of network endpoint groups that are located in the specified project.
		 * Get {project}/global/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a network endpoint group in the specified project using the parameters that are included in the request.
		 * Post {project}/global/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_insert(project: string, requestId: string, requestBody: NetworkEndpointGroup): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
		 * Delete {project}/global/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_delete(project: string, networkEndpointGroup: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
		 * Get {project}/global/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_get(project: string, networkEndpointGroup: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Attach a network endpoint to the specified network endpoint group.
		 * Post {project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_attachNetworkEndpoints(project: string, networkEndpointGroup: string, requestId: string, requestBody: GlobalNetworkEndpointGroupsAttachEndpointsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/attachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Detach the network endpoint from the specified network endpoint group.
		 * Post {project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_detachNetworkEndpoints(project: string, networkEndpointGroup: string, requestId: string, requestBody: GlobalNetworkEndpointGroupsDetachEndpointsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/detachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the network endpoints in the specified network endpoint group.
		 * Post {project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalNetworkEndpointGroups_listNetworkEndpoints(project: string, networkEndpointGroup: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/listNetworkEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of networks available to the specified project.
		 * Get {project}/global/networks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_networks_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a network in the specified project using the data included in the request.
		 * Post {project}/global/networks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_insert(project: string, requestId: string, requestBody: Network): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified network.
		 * Delete {project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_delete(project: string, network: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified network. Gets a list of available networks by making a list() request.
		 * Get {project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to return.
		 * @return {void} Successful response
		 */
		Compute_networks_get(project: string, network: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
		 * Patch {project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_patch(project: string, network: string, requestId: string, requestBody: Network): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds a peering to the specified network.
		 * Post {project}/global/networks/{network}/addPeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource to add peering to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_addPeering(project: string, network: string, requestId: string, requestBody: NetworksAddPeeringRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/addPeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the peering routes exchanged over peering connection.
		 * Get {project}/global/networks/{network}/listPeeringRoutes
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network for this request.
		 * @param {Compute_networks_listPeeringRoutesDirection} direction The direction of the exchanged routes.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {string} peeringName The response will show routes exchanged over the given peering connection.
		 * @param {string} region The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region.
		 * @return {void} Successful response
		 */
		Compute_networks_listPeeringRoutes(project: string, network: string, direction: Compute_networks_listPeeringRoutesDirection, filter: string, maxResults: number, orderBy: string, pageToken: string, peeringName: string, region: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/listPeeringRoutes&direction=' + direction + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&peeringName=' + (peeringName == null ? '' : encodeURIComponent(peeringName)) + '&region=' + (region == null ? '' : encodeURIComponent(region)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes a peering from the specified network.
		 * Post {project}/global/networks/{network}/removePeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource to remove peering from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_removePeering(project: string, network: string, requestId: string, requestBody: NetworksRemovePeeringRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/removePeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Switches the network mode from auto subnet mode to custom subnet mode.
		 * Post {project}/global/networks/{network}/switchToCustomMode
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to be updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_switchToCustomMode(project: string, network: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/switchToCustomMode&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
		 * Patch {project}/global/networks/{network}/updatePeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource which the updated peering is belonging to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networks_updatePeering(project: string, network: string, requestId: string, requestBody: NetworksUpdatePeeringRequest): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/updatePeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified project.
		 * Get {project}/global/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified Operations resource.
		 * Delete {project}/global/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_delete(project: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
		 * Get {project}/global/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_get(project: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
		 * This method is called on a best-effort basis. Specifically:
		 * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
		 * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post {project}/global/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_wait(project: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of Route resources available to the specified project.
		 * Get {project}/global/routes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_routes_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/routes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a Route resource in the specified project using the data included in the request.
		 * Post {project}/global/routes
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routes_insert(project: string, requestId: string, requestBody: Route): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/routes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified Route resource.
		 * Delete {project}/global/routes/{route}
		 * @param {string} project Project ID for this request.
		 * @param {string} route Name of the Route resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routes_delete(project: string, route: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/routes/' + (route == null ? '' : encodeURIComponent(route)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Route resource. Gets a list of available routes by making a list() request.
		 * Get {project}/global/routes/{route}
		 * @param {string} project Project ID for this request.
		 * @param {string} route Name of the Route resource to return.
		 * @return {void} Successful response
		 */
		Compute_routes_get(project: string, route: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/routes/' + (route == null ? '' : encodeURIComponent(route)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * List all the policies that have been configured for the specified project.
		 * Get {project}/global/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a new policy in the specified project using the data included in the request.
		 * Post {project}/global/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_insert(project: string, requestId: string, requestBody: SecurityPolicy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
		 * Get {project}/global/securityPolicies/listPreconfiguredExpressionSets
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_listPreconfiguredExpressionSets(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/listPreconfiguredExpressionSets&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified policy.
		 * Delete {project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_delete(project: string, securityPolicy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * List all of the ordered rules present in a single specified policy.
		 * Get {project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to get.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_get(project: string, securityPolicy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified policy with the data included in the request.
		 * Patch {project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_patch(project: string, securityPolicy: string, requestId: string, requestBody: SecurityPolicy): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Inserts a rule into a security policy.
		 * Post {project}/global/securityPolicies/{securityPolicy}/addRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_addRule(project: string, securityPolicy: string, requestBody: SecurityPolicyRule): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/addRule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets a rule at the specified priority.
		 * Get {project}/global/securityPolicies/{securityPolicy}/getRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the security policy.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_getRule(project: string, securityPolicy: string, priority: number): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/getRule&priority=' + priority + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches a rule at the specified priority.
		 * Post {project}/global/securityPolicies/{securityPolicy}/patchRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_patchRule(project: string, securityPolicy: string, priority: number, requestBody: SecurityPolicyRule): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/patchRule&priority=' + priority + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a rule at the specified priority.
		 * Post {project}/global/securityPolicies/{securityPolicy}/removeRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to remove from the security policy.
		 * @return {void} Successful response
		 */
		Compute_securityPolicies_removeRule(project: string, securityPolicy: string, priority: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/removeRule&priority=' + priority + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of Snapshot resources contained within the specified project.
		 * Get {project}/global/snapshots
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_snapshots_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/global/snapshots/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_snapshots_getIamPolicy(project: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/global/snapshots/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_snapshots_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/global/snapshots/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_snapshots_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/global/snapshots/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_snapshots_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
		 * For more information, see Deleting snapshots.
		 * Delete {project}/global/snapshots/{snapshot}
		 * @param {string} project Project ID for this request.
		 * @param {string} snapshot Name of the Snapshot resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_snapshots_delete(project: string, snapshot: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (snapshot == null ? '' : encodeURIComponent(snapshot)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
		 * Get {project}/global/snapshots/{snapshot}
		 * @param {string} project Project ID for this request.
		 * @param {string} snapshot Name of the Snapshot resource to return.
		 * @return {void} Successful response
		 */
		Compute_snapshots_get(project: string, snapshot: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (snapshot == null ? '' : encodeURIComponent(snapshot)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of SslCertificate resources available to the specified project.
		 * Get {project}/global/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_sslCertificates_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a SslCertificate resource in the specified project using the data included in the request.
		 * Post {project}/global/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_sslCertificates_insert(project: string, requestId: string, requestBody: SslCertificate): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified SslCertificate resource.
		 * Delete {project}/global/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_sslCertificates_delete(project: string, sslCertificate: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
		 * Get {project}/global/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to return.
		 * @return {void} Successful response
		 */
		Compute_sslCertificates_get(project: string, sslCertificate: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all the SSL policies that have been configured for the specified project.
		 * Get {project}/global/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
		 * Post {project}/global/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_insert(project: string, requestId: string, requestBody: SslPolicy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all features that can be specified in the SSL policy when using custom profile.
		 * Get {project}/global/sslPolicies/listAvailableFeatures
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_listAvailableFeatures(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/listAvailableFeatures&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
		 * Delete {project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_delete(project: string, sslPolicy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all of the ordered rules present in a single specified policy.
		 * Get {project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_get(project: string, sslPolicy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified SSL policy with the data included in the request.
		 * Patch {project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_sslPolicies_patch(project: string, sslPolicy: string, requestId: string, requestBody: SslPolicy): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetHttpProxy resources available to the specified project.
		 * Get {project}/global/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetHttpProxy resource in the specified project using the data included in the request.
		 * Post {project}/global/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_insert(project: string, requestId: string, requestBody: TargetHttpProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetHttpProxy resource.
		 * Delete {project}/global/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_delete(project: string, targetHttpProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
		 * Get {project}/global/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_get(project: string, targetHttpProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetHttpsProxy resources available to the specified project.
		 * Get {project}/global/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
		 * Post {project}/global/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_insert(project: string, requestId: string, requestBody: TargetHttpsProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetHttpsProxy resource.
		 * Delete {project}/global/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_delete(project: string, targetHttpsProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
		 * Get {project}/global/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_get(project: string, targetHttpsProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the QUIC override policy for TargetHttpsProxy.
		 * Post {project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_setQuicOverride(project: string, targetHttpsProxy: string, requestId: string, requestBody: TargetHttpsProxiesSetQuicOverrideRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setQuicOverride&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
		 * Post {project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_setSslPolicy(project: string, targetHttpsProxy: string, requestId: string, requestBody: SslPolicyReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetSslProxy resources available to the specified project.
		 * Get {project}/global/targetSslProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetSslProxy resource in the specified project using the data included in the request.
		 * Post {project}/global/targetSslProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_insert(project: string, requestId: string, requestBody: TargetSslProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetSslProxy resource.
		 * Delete {project}/global/targetSslProxies/{targetSslProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_delete(project: string, targetSslProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
		 * Get {project}/global/targetSslProxies/{targetSslProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_get(project: string, targetSslProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the BackendService for TargetSslProxy.
		 * Post {project}/global/targetSslProxies/{targetSslProxy}/setBackendService
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose BackendService resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_setBackendService(project: string, targetSslProxy: string, requestId: string, requestBody: TargetSslProxiesSetBackendServiceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setBackendService&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the ProxyHeaderType for TargetSslProxy.
		 * Post {project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose ProxyHeader is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_setProxyHeader(project: string, targetSslProxy: string, requestId: string, requestBody: TargetSslProxiesSetProxyHeaderRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setProxyHeader&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes SslCertificates for TargetSslProxy.
		 * Post {project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_setSslCertificates(project: string, targetSslProxy: string, requestId: string, requestBody: TargetSslProxiesSetSslCertificatesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
		 * Post {project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetSslProxies_setSslPolicy(project: string, targetSslProxy: string, requestId: string, requestBody: SslPolicyReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setSslPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetTcpProxy resources available to the specified project.
		 * Get {project}/global/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetTcpProxy resource in the specified project using the data included in the request.
		 * Post {project}/global/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_insert(project: string, requestId: string, requestBody: TargetTcpProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetTcpProxy resource.
		 * Delete {project}/global/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_delete(project: string, targetTcpProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
		 * Get {project}/global/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_get(project: string, targetTcpProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the BackendService for TargetTcpProxy.
		 * Post {project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource whose BackendService resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_setBackendService(project: string, targetTcpProxy: string, requestId: string, requestBody: TargetTcpProxiesSetBackendServiceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '/setBackendService&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the ProxyHeaderType for TargetTcpProxy.
		 * Post {project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetTcpProxies_setProxyHeader(project: string, targetTcpProxy: string, requestId: string, requestBody: TargetTcpProxiesSetProxyHeaderRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '/setProxyHeader&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of UrlMap resources available to the specified project.
		 * Get {project}/global/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_urlMaps_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a UrlMap resource in the specified project using the data included in the request.
		 * Post {project}/global/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_urlMaps_insert(project: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified UrlMap resource.
		 * Delete {project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_urlMaps_delete(project: string, urlMap: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
		 * Get {project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to return.
		 * @return {void} Successful response
		 */
		Compute_urlMaps_get(project: string, urlMap: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_urlMaps_patch(project: string, urlMap: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified UrlMap resource with the data included in the request.
		 * Put {project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_urlMaps_update(project: string, urlMap: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
		 * Post {project}/global/urlMaps/{urlMap}/invalidateCache
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_urlMaps_invalidateCache(project: string, urlMap: string, requestId: string, requestBody: CacheInvalidationRule): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/invalidateCache&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
		 * Post {project}/global/urlMaps/{urlMap}/validate
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to be validated as.
		 * @return {void} Successful response
		 */
		Compute_urlMaps_validate(project: string, urlMap: string, requestBody: UrlMapsValidateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/validate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all shared VPC host projects visible to the user in an organization.
		 * Post {project}/listXpnHosts
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_projects_listXpnHosts(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string, requestBody: ProjectsListXpnHostsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/listXpnHosts&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Moves a persistent disk from one zone to another.
		 * Post {project}/moveDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_moveDisk(project: string, requestId: string, requestBody: DiskMoveRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/moveDisk&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Moves an instance and its attached persistent disks from one zone to another.
		 * Post {project}/moveInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_moveInstance(project: string, requestId: string, requestBody: InstanceMoveRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/moveInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of region resources available to the specified project.
		 * Get {project}/regions
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regions_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Region resource. Gets a list of available regions by making a list() request.
		 * Get {project}/regions/{region}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region resource to return.
		 * @return {void} Successful response
		 */
		Compute_regions_get(project: string, region: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of addresses contained within the specified region.
		 * Get {project}/regions/{region}/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_addresses_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an address resource in the specified project by using the data included in the request.
		 * Post {project}/regions/{region}/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_addresses_insert(project: string, region: string, requestId: string, requestBody: Address): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified address resource.
		 * Delete {project}/regions/{region}/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} address Name of the address resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_addresses_delete(project: string, region: string, address: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified address resource.
		 * Get {project}/regions/{region}/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} address Name of the address resource to return.
		 * @return {void} Successful response
		 */
		Compute_addresses_get(project: string, region: string, address: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of autoscalers contained within the specified region.
		 * Get {project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_patch(project: string, region: string, autoscaler: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an autoscaler in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_insert(project: string, region: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request.
		 * Put {project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_update(project: string, region: string, autoscaler: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified autoscaler.
		 * Delete {project}/regions/{region}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_delete(project: string, region: string, autoscaler: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified autoscaler.
		 * Get {project}/regions/{region}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to return.
		 * @return {void} Successful response
		 */
		Compute_regionAutoscalers_get(project: string, region: string, autoscaler: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of regional BackendService resources available to the specified project in the given region.
		 * Get {project}/regions/{region}/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a regional BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a regional backend service. Read  Understanding backend services for more information.
		 * Post {project}/regions/{region}/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_insert(project: string, region: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified regional BackendService resource.
		 * Delete {project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_delete(project: string, region: string, backendService: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified regional BackendService resource.
		 * Get {project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_get(project: string, region: string, backendService: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified regional BackendService resource with the data included in the request. There are several Understanding backend services to keep in mind when updating a backend service. Read  Understanding backend services for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_patch(project: string, region: string, backendService: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified regional BackendService resource with the data included in the request. There are several Understanding backend services to keep in mind when updating a backend service. Read  Understanding backend services for more information.
		 * Put {project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_update(project: string, region: string, backendService: string, requestId: string, requestBody: BackendService): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the most recent health check results for this regional BackendService.
		 * Post {project}/regions/{region}/backendServices/{backendService}/getHealth
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource for which to get health.
		 * @return {void} Successful response
		 */
		Compute_regionBackendServices_getHealth(project: string, region: string, backendService: string, requestBody: ResourceGroupReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of commitments contained within the specified region.
		 * Get {project}/regions/{region}/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionCommitments_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a commitment in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionCommitments_insert(project: string, region: string, requestId: string, requestBody: Commitment): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
		 * Get {project}/regions/{region}/commitments/{commitment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} commitment Name of the commitment to return.
		 * @return {void} Successful response
		 */
		Compute_regionCommitments_get(project: string, region: string, commitment: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments/' + (commitment == null ? '' : encodeURIComponent(commitment)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of regional disk types available to the specified project.
		 * Get {project}/regions/{region}/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionDiskTypes_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
		 * Get {project}/regions/{region}/diskTypes/{diskType}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} diskType Name of the disk type to return.
		 * @return {void} Successful response
		 */
		Compute_regionDiskTypes_get(project: string, region: string, diskType: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/diskTypes/' + (diskType == null ? '' : encodeURIComponent(diskType)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of persistent disks contained within the specified region.
		 * Get {project}/regions/{region}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionDisks_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a persistent regional disk in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceImage Optional. Source image to restore onto a disk.
		 * @return {void} Successful response
		 */
		Compute_regionDisks_insert(project: string, region: string, requestId: string, sourceImage: string, requestBody: Disk): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceImage=' + (sourceImage == null ? '' : encodeURIComponent(sourceImage)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
		 * Delete {project}/regions/{region}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_delete(project: string, region: string, disk: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns a specified regional persistent disk.
		 * Get {project}/regions/{region}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to return.
		 * @return {void} Successful response
		 */
		Compute_regionDisks_get(project: string, region: string, disk: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
		 * Post {project}/regions/{region}/disks/{disk}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_addResourcePolicies(project: string, region: string, disk: string, requestId: string, requestBody: RegionDisksAddResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a snapshot of this regional disk.
		 * Post {project}/regions/{region}/disks/{disk}/createSnapshot
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to snapshot.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_createSnapshot(project: string, region: string, disk: string, requestId: string, requestBody: Snapshot): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/createSnapshot&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes resource policies from a regional disk.
		 * Post {project}/regions/{region}/disks/{disk}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_removeResourcePolicies(project: string, region: string, disk: string, requestId: string, requestBody: RegionDisksRemoveResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Resizes the specified regional persistent disk.
		 * Post {project}/regions/{region}/disks/{disk}/resize
		 * @param {string} project The project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_resize(project: string, region: string, disk: string, requestId: string, requestBody: RegionDisksResizeRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on the target regional disk.
		 * Post {project}/regions/{region}/disks/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionDisks_setLabels(project: string, region: string, resource: string, requestId: string, requestBody: RegionSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/disks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_regionDisks_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of ForwardingRule resources available to the specified project and region.
		 * Get {project}/regions/{region}/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a ForwardingRule resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_insert(project: string, region: string, requestId: string, requestBody: ForwardingRule): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified ForwardingRule resource.
		 * Delete {project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_delete(project: string, region: string, forwardingRule: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified ForwardingRule resource.
		 * Get {project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to return.
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_get(project: string, region: string, forwardingRule: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
		 * Patch {project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_patch(project: string, region: string, forwardingRule: string, requestId: string, requestBody: ForwardingRule): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes target URL for forwarding rule. The new target should be of the same type as the old target.
		 * Post {project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource in which target is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_forwardingRules_setTarget(project: string, region: string, forwardingRule: string, requestId: string, requestBody: TargetReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '/setTarget&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of HealthCheck resources available to the specified project.
		 * Get {project}/regions/{region}/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a HealthCheck resource in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_insert(project: string, region: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified HealthCheck resource.
		 * Delete {project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_delete(project: string, region: string, healthCheck: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
		 * Get {project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_get(project: string, region: string, healthCheck: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_patch(project: string, region: string, healthCheck: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request.
		 * Put {project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionHealthChecks_update(project: string, region: string, healthCheck: string, requestId: string, requestBody: HealthCheck): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of managed instance groups that are contained within the specified region.
		 * Get {project}/regions/{region}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
		 * A regional managed instance group can contain up to 2000 instances.
		 * Post {project}/regions/{region}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_insert(project: string, region: string, requestId: string, requestBody: InstanceGroupManager): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified managed instance group and all of the instances in that group.
		 * Delete {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_delete(project: string, region: string, instanceGroupManager: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns all of the details about the specified managed instance group.
		 * Get {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group to return.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_get(project: string, region: string, instanceGroupManager: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the instance group manager.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_patch(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManager): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_abandonInstances(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersAbandonInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/abandonInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Apply updates to selected instances the managed instance group.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group, should conform to RFC1035.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_applyUpdatesToInstances(project: string, region: string, instanceGroupManager: string, requestBody: RegionInstanceGroupManagersApplyUpdatesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/applyUpdatesToInstances', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_createInstances(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersCreateInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/createInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_deleteInstances(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersDeleteInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deleteInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all errors thrown by actions on instances for a given regional managed instance group.
		 * Get {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request. This should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_listErrors(project: string, region: string, instanceGroupManager: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listErrors&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_listManagedInstances(project: string, region: string, instanceGroupManager: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listManagedInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_recreateInstances(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersRecreateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/recreateInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
		 * The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {number} size Number of instances that should exist in this instance group manager.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_resize(project: string, region: string, instanceGroupManager: string, size: number, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/resize&size=' + size + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_setInstanceTemplate(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersSetTemplateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setInstanceTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
		 * Post {project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroupManagers_setTargetPools(project: string, region: string, instanceGroupManager: string, requestId: string, requestBody: RegionInstanceGroupManagersSetTargetPoolsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setTargetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of instance group resources contained within the specified region.
		 * Get {project}/regions/{region}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroups_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified instance group resource.
		 * Get {project}/regions/{region}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup Name of the instance group resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroups_get(project: string, region: string, instanceGroup: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running.
		 * Post {project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup Name of the regional instance group for which we want to list the instances.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroups_listInstances(project: string, region: string, instanceGroup: string, filter: string, maxResults: number, orderBy: string, pageToken: string, requestBody: RegionInstanceGroupsListInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/listInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the named ports for the specified regional instance group.
		 * Post {project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup The name of the regional instance group where the named ports are updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionInstanceGroups_setNamedPorts(project: string, region: string, instanceGroup: string, requestId: string, requestBody: RegionInstanceGroupsSetNamedPortsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/setNamedPorts&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of interconnect attachments contained within the specified region.
		 * Get {project}/regions/{region}/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an InterconnectAttachment in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_insert(project: string, region: string, requestId: string, validateOnly: boolean, requestBody: InterconnectAttachment): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified interconnect attachment.
		 * Delete {project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_delete(project: string, region: string, interconnectAttachment: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified interconnect attachment.
		 * Get {project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to return.
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_get(project: string, region: string, interconnectAttachment: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_interconnectAttachments_patch(project: string, region: string, interconnectAttachment: string, requestId: string, requestBody: InterconnectAttachment): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of node templates available to the specified project.
		 * Get {project}/regions/{region}/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a NodeTemplate resource in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_insert(project: string, region: string, requestId: string, requestBody: NodeTemplate): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified NodeTemplate resource.
		 * Delete {project}/regions/{region}/nodeTemplates/{nodeTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} nodeTemplate Name of the NodeTemplate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_delete(project: string, region: string, nodeTemplate: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (nodeTemplate == null ? '' : encodeURIComponent(nodeTemplate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified node template. Gets a list of available node templates by making a list() request.
		 * Get {project}/regions/{region}/nodeTemplates/{nodeTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} nodeTemplate Name of the node template to return.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_get(project: string, region: string, nodeTemplate: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (nodeTemplate == null ? '' : encodeURIComponent(nodeTemplate)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_getIamPolicy(project: string, region: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeTemplates_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified region.
		 * Get {project}/regions/{region}/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionOperations_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified region-specific Operations resource.
		 * Delete {project}/regions/{region}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_regionOperations_delete(project: string, region: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified region-specific Operations resource.
		 * Get {project}/regions/{region}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionOperations_get(project: string, region: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
		 * This method is called on a best-effort basis. Specifically:
		 * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
		 * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post {project}/regions/{region}/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionOperations_wait(project: string, region: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of PacketMirroring resources available to the specified project and region.
		 * Get {project}/regions/{region}/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a PacketMirroring resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_insert(project: string, region: string, requestId: string, requestBody: PacketMirroring): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified PacketMirroring resource.
		 * Delete {project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_delete(project: string, region: string, packetMirroring: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified PacketMirroring resource.
		 * Get {project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to return.
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_get(project: string, region: string, packetMirroring: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_patch(project: string, region: string, packetMirroring: string, requestId: string, requestBody: PacketMirroring): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_packetMirrorings_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * A list all the resource policies that have been configured for the specified project in specified region.
		 * Get {project}/regions/{region}/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a new resource policy.
		 * Post {project}/regions/{region}/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_insert(project: string, region: string, requestId: string, requestBody: ResourcePolicy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified resource policy.
		 * Delete {project}/regions/{region}/resourcePolicies/{resourcePolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} resourcePolicy Name of the resource policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_delete(project: string, region: string, resourcePolicy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resourcePolicy == null ? '' : encodeURIComponent(resourcePolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves all information of the specified resource policy.
		 * Get {project}/regions/{region}/resourcePolicies/{resourcePolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} resourcePolicy Name of the resource policy to retrieve.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_get(project: string, region: string, resourcePolicy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resourcePolicy == null ? '' : encodeURIComponent(resourcePolicy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_getIamPolicy(project: string, region: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_resourcePolicies_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of Router resources available to the specified project.
		 * Get {project}/regions/{region}/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_routers_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a Router resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routers_insert(project: string, region: string, requestId: string, requestBody: Router): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified Router resource.
		 * Delete {project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routers_delete(project: string, region: string, router: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Router resource. Gets a list of available routers by making a list() request.
		 * Get {project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to return.
		 * @return {void} Successful response
		 */
		Compute_routers_get(project: string, region: string, router: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routers_patch(project: string, region: string, router: string, requestId: string, requestBody: Router): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
		 * Put {project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_routers_update(project: string, region: string, router: string, requestId: string, requestBody: Router): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves runtime Nat mapping information of VM endpoints.
		 * Get {project}/regions/{region}/routers/{router}/getNatMappingInfo
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query for Nat Mapping information of VM endpoints.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_routers_getNatMappingInfo(project: string, region: string, router: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/getNatMappingInfo&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves runtime information of the specified router.
		 * Get {project}/regions/{region}/routers/{router}/getRouterStatus
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query.
		 * @return {void} Successful response
		 */
		Compute_routers_getRouterStatus(project: string, region: string, router: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/getRouterStatus', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
		 * Post {project}/regions/{region}/routers/{router}/preview
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query.
		 * @return {void} Successful response
		 */
		Compute_routers_preview(project: string, region: string, router: string, requestBody: Router): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/preview', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of SslCertificate resources available to the specified project in the specified region.
		 * Get {project}/regions/{region}/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionSslCertificates_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a SslCertificate resource in the specified project and region using the data included in the request
		 * Post {project}/regions/{region}/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionSslCertificates_insert(project: string, region: string, requestId: string, requestBody: SslCertificate): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified SslCertificate resource in the region.
		 * Delete {project}/regions/{region}/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionSslCertificates_delete(project: string, region: string, sslCertificate: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
		 * Get {project}/regions/{region}/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionSslCertificates_get(project: string, region: string, sslCertificate: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of subnetworks available to the specified project.
		 * Get {project}/regions/{region}/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a subnetwork in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_subnetworks_insert(project: string, region: string, requestId: string, requestBody: Subnetwork): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/regions/{region}/subnetworks/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_getIamPolicy(project: string, region: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/regions/{region}/subnetworks/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/subnetworks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified subnetwork.
		 * Delete {project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_subnetworks_delete(project: string, region: string, subnetwork: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified subnetwork. Gets a list of available subnetworks list() request.
		 * Get {project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to return.
		 * @return {void} Successful response
		 */
		Compute_subnetworks_get(project: string, region: string, subnetwork: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified subnetwork with the data included in the request. Only certain fields can up updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
		 * Patch {project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to patch.
		 * @param {number} drainTimeoutSeconds The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork. The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_subnetworks_patch(project: string, region: string, subnetwork: string, drainTimeoutSeconds: number, requestId: string, requestBody: Subnetwork): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '&drainTimeoutSeconds=' + drainTimeoutSeconds + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Expands the IP CIDR range of the subnetwork to a specified value.
		 * Post {project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_subnetworks_expandIpCidrRange(project: string, region: string, subnetwork: string, requestId: string, requestBody: SubnetworksExpandIpCidrRangeRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '/expandIpCidrRange&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
		 * Post {project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_subnetworks_setPrivateIpGoogleAccess(project: string, region: string, subnetwork: string, requestId: string, requestBody: SubnetworksSetPrivateIpGoogleAccessRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '/setPrivateIpGoogleAccess&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
		 * Get {project}/regions/{region}/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpProxies_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpProxies_insert(project: string, region: string, requestId: string, requestBody: TargetHttpProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetHttpProxy resource.
		 * Delete {project}/regions/{region}/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpProxies_delete(project: string, region: string, targetHttpProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
		 * Get {project}/regions/{region}/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpProxies_get(project: string, region: string, targetHttpProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the URL map for TargetHttpProxy.
		 * Post {project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpProxies_setUrlMap(project: string, region: string, targetHttpProxy: string, requestId: string, requestBody: UrlMapReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
		 * Get {project}/regions/{region}/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_insert(project: string, region: string, requestId: string, requestBody: TargetHttpsProxy): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetHttpsProxy resource.
		 * Delete {project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_delete(project: string, region: string, targetHttpsProxy: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
		 * Get {project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_get(project: string, region: string, targetHttpsProxy: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Replaces SslCertificates for TargetHttpsProxy.
		 * Post {project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_setSslCertificates(project: string, region: string, targetHttpsProxy: string, requestId: string, requestBody: RegionTargetHttpsProxiesSetSslCertificatesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the URL map for TargetHttpsProxy.
		 * Post {project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_regionTargetHttpsProxies_setUrlMap(project: string, region: string, targetHttpsProxy: string, requestId: string, requestBody: UrlMapReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of target pools available to the specified project and region.
		 * Get {project}/regions/{region}/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetPools_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a target pool in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_insert(project: string, region: string, requestId: string, requestBody: TargetPool): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified target pool.
		 * Delete {project}/regions/{region}/targetPools/{targetPool}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_delete(project: string, region: string, targetPool: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified target pool. Gets a list of available target pools by making a list() request.
		 * Get {project}/regions/{region}/targetPools/{targetPool}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetPools_get(project: string, region: string, targetPool: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds health check URLs to a target pool.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/addHealthCheck
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the target pool to add a health check to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_addHealthCheck(project: string, region: string, targetPool: string, requestId: string, requestBody: TargetPoolsAddHealthCheckRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/addHealthCheck&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds an instance to a target pool.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/addInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to add instances to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_addInstance(project: string, region: string, targetPool: string, requestId: string, requestBody: TargetPoolsAddInstanceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/addInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/getHealth
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to which the queried instance belongs.
		 * @return {void} Successful response
		 */
		Compute_targetPools_getHealth(project: string, region: string, targetPool: string, requestBody: InstanceReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes health check URL from a target pool.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetPool Name of the target pool to remove health checks from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_removeHealthCheck(project: string, region: string, targetPool: string, requestId: string, requestBody: TargetPoolsRemoveHealthCheckRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/removeHealthCheck&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes instance URL from a target pool.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/removeInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to remove instances from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_removeInstance(project: string, region: string, targetPool: string, requestId: string, requestBody: TargetPoolsRemoveInstanceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/removeInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes a backup target pool's configurations.
		 * Post {project}/regions/{region}/targetPools/{targetPool}/setBackup
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to set a backup pool for.
		 * @param {number} failoverRatio New failoverRatio value for the target pool.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetPools_setBackup(project: string, region: string, targetPool: string, failoverRatio: number, requestId: string, requestBody: TargetReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/setBackup&failoverRatio=' + failoverRatio + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of target VPN gateways available to the specified project and region.
		 * Get {project}/regions/{region}/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetVpnGateways_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a target VPN gateway in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetVpnGateways_insert(project: string, region: string, requestId: string, requestBody: TargetVpnGateway): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified target VPN gateway.
		 * Delete {project}/regions/{region}/targetVpnGateways/{targetVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetVpnGateway Name of the target VPN gateway to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetVpnGateways_delete(project: string, region: string, targetVpnGateway: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways/' + (targetVpnGateway == null ? '' : encodeURIComponent(targetVpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
		 * Get {project}/regions/{region}/targetVpnGateways/{targetVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetVpnGateway Name of the target VPN gateway to return.
		 * @return {void} Successful response
		 */
		Compute_targetVpnGateways_get(project: string, region: string, targetVpnGateway: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways/' + (targetVpnGateway == null ? '' : encodeURIComponent(targetVpnGateway)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of UrlMap resources available to the specified project in the specified region.
		 * Get {project}/regions/{region}/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a UrlMap resource in the specified project using the data included in the request.
		 * Post {project}/regions/{region}/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_insert(project: string, region: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified UrlMap resource.
		 * Delete {project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to delete.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_delete(project: string, region: string, urlMap: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
		 * Get {project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to return.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_get(project: string, region: string, urlMap: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch {project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to patch.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_patch(project: string, region: string, urlMap: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified UrlMap resource with the data included in the request.
		 * Put {project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to update.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_update(project: string, region: string, urlMap: string, requestId: string, requestBody: UrlMap): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
		 * Post {project}/regions/{region}/urlMaps/{urlMap}/validate
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to be validated as.
		 * @return {void} Successful response
		 */
		Compute_regionUrlMaps_validate(project: string, region: string, urlMap: string, requestBody: RegionUrlMapsValidateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/validate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of VPN gateways available to the specified project and region.
		 * Get {project}/regions/{region}/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a VPN gateway in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_insert(project: string, region: string, requestId: string, requestBody: VpnGateway): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/regions/{region}/vpnGateways/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_setLabels(project: string, region: string, resource: string, requestId: string, requestBody: RegionSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/regions/{region}/vpnGateways/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified VPN gateway.
		 * Delete {project}/regions/{region}/vpnGateways/{vpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_delete(project: string, region: string, vpnGateway: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
		 * Get {project}/regions/{region}/vpnGateways/{vpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to return.
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_get(project: string, region: string, vpnGateway: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the status for the specified VPN gateway.
		 * Get {project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to return.
		 * @return {void} Successful response
		 */
		Compute_vpnGateways_getStatus(project: string, region: string, vpnGateway: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)) + '/getStatus', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of VpnTunnel resources contained in the specified project and region.
		 * Get {project}/regions/{region}/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_vpnTunnels_list(project: string, region: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a VpnTunnel resource in the specified project and region using the data included in the request.
		 * Post {project}/regions/{region}/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_vpnTunnels_insert(project: string, region: string, requestId: string, requestBody: VpnTunnel): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified VpnTunnel resource.
		 * Delete {project}/regions/{region}/vpnTunnels/{vpnTunnel}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnTunnel Name of the VpnTunnel resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_vpnTunnels_delete(project: string, region: string, vpnTunnel: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels/' + (vpnTunnel == null ? '' : encodeURIComponent(vpnTunnel)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
		 * Get {project}/regions/{region}/vpnTunnels/{vpnTunnel}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnTunnel Name of the VpnTunnel resource to return.
		 * @return {void} Successful response
		 */
		Compute_vpnTunnels_get(project: string, region: string, vpnTunnel: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels/' + (vpnTunnel == null ? '' : encodeURIComponent(vpnTunnel)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets metadata common to all instances within the specified project using the data included in the request.
		 * Post {project}/setCommonInstanceMetadata
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_setCommonInstanceMetadata(project: string, requestId: string, requestBody: Metadata): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/setCommonInstanceMetadata&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
		 * Post {project}/setDefaultNetworkTier
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_setDefaultNetworkTier(project: string, requestId: string, requestBody: ProjectsSetDefaultNetworkTierRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/setDefaultNetworkTier&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
		 * Post {project}/setUsageExportBucket
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_projects_setUsageExportBucket(project: string, requestId: string, requestBody: UsageExportLocation): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/setUsageExportBucket&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the URL map for TargetHttpProxy.
		 * Post {project}/targetHttpProxies/{targetHttpProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpProxies_setUrlMap(project: string, targetHttpProxy: string, requestId: string, requestBody: UrlMapReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Replaces SslCertificates for TargetHttpsProxy.
		 * Post {project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_setSslCertificates(project: string, targetHttpsProxy: string, requestId: string, requestBody: TargetHttpsProxiesSetSslCertificatesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the URL map for TargetHttpsProxy.
		 * Post {project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource whose URL map is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetHttpsProxies_setUrlMap(project: string, targetHttpsProxy: string, requestId: string, requestBody: UrlMapReference): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of Zone resources available to the specified project.
		 * Get {project}/zones
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_zones_list(project: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Zone resource. Gets a list of available zones by making a list() request.
		 * Get {project}/zones/{zone}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone resource to return.
		 * @return {void} Successful response
		 */
		Compute_zones_get(project: string, zone: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of accelerator types available to the specified project.
		 * Get {project}/zones/{zone}/acceleratorTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_acceleratorTypes_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/acceleratorTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified accelerator type.
		 * Get {project}/zones/{zone}/acceleratorTypes/{acceleratorType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} acceleratorType Name of the accelerator type to return.
		 * @return {void} Successful response
		 */
		Compute_acceleratorTypes_get(project: string, zone: string, acceleratorType: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/acceleratorTypes/' + (acceleratorType == null ? '' : encodeURIComponent(acceleratorType)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of autoscalers contained within the specified zone.
		 * Get {project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_autoscalers_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_autoscalers_patch(project: string, zone: string, autoscaler: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an autoscaler in the specified project using the data included in the request.
		 * Post {project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_autoscalers_insert(project: string, zone: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request.
		 * Put {project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_autoscalers_update(project: string, zone: string, autoscaler: string, requestId: string, requestBody: Autoscaler): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified autoscaler.
		 * Delete {project}/zones/{zone}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_autoscalers_delete(project: string, zone: string, autoscaler: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
		 * Get {project}/zones/{zone}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to return.
		 * @return {void} Successful response
		 */
		Compute_autoscalers_get(project: string, zone: string, autoscaler: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of disk types available to the specified project.
		 * Get {project}/zones/{zone}/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_diskTypes_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified disk type. Gets a list of available disk types by making a list() request.
		 * Get {project}/zones/{zone}/diskTypes/{diskType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} diskType Name of the disk type to return.
		 * @return {void} Successful response
		 */
		Compute_diskTypes_get(project: string, zone: string, diskType: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/diskTypes/' + (diskType == null ? '' : encodeURIComponent(diskType)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of persistent disks contained within the specified zone.
		 * Get {project}/zones/{zone}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_disks_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a persistent disk in the specified project using the data in the request. You can create a disk with a sourceImage, a sourceSnapshot, or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
		 * Post {project}/zones/{zone}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceImage Optional. Source image to restore onto a disk.
		 * @return {void} Successful response
		 */
		Compute_disks_insert(project: string, zone: string, requestId: string, sourceImage: string, requestBody: Disk): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceImage=' + (sourceImage == null ? '' : encodeURIComponent(sourceImage)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
		 * Delete {project}/zones/{zone}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_delete(project: string, zone: string, disk: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
		 * Get {project}/zones/{zone}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to return.
		 * @return {void} Successful response
		 */
		Compute_disks_get(project: string, zone: string, disk: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
		 * Post {project}/zones/{zone}/disks/{disk}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_addResourcePolicies(project: string, zone: string, disk: string, requestId: string, requestBody: DisksAddResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a snapshot of a specified persistent disk.
		 * Post {project}/zones/{zone}/disks/{disk}/createSnapshot
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to snapshot.
		 * @param {boolean} guestFlush [Input Only] Specifies to create an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_createSnapshot(project: string, zone: string, disk: string, guestFlush: boolean, requestId: string, requestBody: Snapshot): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/createSnapshot&guestFlush=' + guestFlush + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes resource policies from a disk.
		 * Post {project}/zones/{zone}/disks/{disk}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_removeResourcePolicies(project: string, zone: string, disk: string, requestId: string, requestBody: DisksRemoveResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Resizes the specified persistent disk. You can only increase the size of the disk.
		 * Post {project}/zones/{zone}/disks/{disk}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_resize(project: string, zone: string, disk: string, requestId: string, requestBody: DisksResizeRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/zones/{zone}/disks/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_disks_getIamPolicy(project: string, zone: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/zones/{zone}/disks/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_disks_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/zones/{zone}/disks/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_disks_setLabels(project: string, zone: string, resource: string, requestId: string, requestBody: ZoneSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/zones/{zone}/disks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_disks_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of managed instance groups that are contained within the specified project and zone.
		 * Get {project}/zones/{zone}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
		 * A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
		 * Post {project}/zones/{zone}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_insert(project: string, zone: string, requestId: string, requestBody: InstanceGroupManager): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
		 * Delete {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_delete(project: string, zone: string, instanceGroupManager: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
		 * Get {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_get(project: string, zone: string, instanceGroupManager: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the managed instance group.
		 * @param {string} instanceGroupManager The name of the instance group manager.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_patch(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManager): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_abandonInstances(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersAbandonInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/abandonInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. Should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group, should conform to RFC1035.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_applyUpdatesToInstances(project: string, zone: string, instanceGroupManager: string, requestBody: InstanceGroupManagersApplyUpdatesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/applyUpdatesToInstances', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_createInstances(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersCreateInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/createInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_deleteInstances(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersDeleteInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deleteInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all errors thrown by actions on instances for a given managed instance group.
		 * Get {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_listErrors(project: string, zone: string, instanceGroupManager: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listErrors&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_listManagedInstances(project: string, zone: string, instanceGroupManager: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listManagedInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * You can specify a maximum of 1000 instances with this method per request.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_recreateInstances(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersRecreateInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/recreateInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
		 * When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
		 * + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
		 * This list is subject to change.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {number} size The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_resize(project: string, zone: string, instanceGroupManager: string, size: number, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/resize&size=' + size + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you recreate them.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_setInstanceTemplate(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersSetInstanceTemplateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setInstanceTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
		 * Post {project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroupManagers_setTargetPools(project: string, zone: string, instanceGroupManager: string, requestId: string, requestBody: InstanceGroupManagersSetTargetPoolsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setTargetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of instance groups that are located in the specified project and zone.
		 * Get {project}/zones/{zone}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an instance group in the specified project using the parameters that are included in the request.
		 * Post {project}/zones/{zone}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_insert(project: string, zone: string, requestId: string, requestBody: InstanceGroup): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
		 * Delete {project}/zones/{zone}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_delete(project: string, zone: string, instanceGroup: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified instance group. Gets a list of available instance groups by making a list() request.
		 * Get {project}/zones/{zone}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group.
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_get(project: string, zone: string, instanceGroup: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
		 * Post {project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where you are adding instances.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_addInstances(project: string, zone: string, instanceGroup: string, requestId: string, requestBody: InstanceGroupsAddInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/addInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the instances in the specified instance group.
		 * Post {project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group from which you want to generate a list of included instances.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_listInstances(project: string, zone: string, instanceGroup: string, filter: string, maxResults: number, orderBy: string, pageToken: string, requestBody: InstanceGroupsListInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/listInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes one or more instances from the specified instance group, but does not delete those instances.
		 * If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
		 * Post {project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where the specified instances will be removed.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_removeInstances(project: string, zone: string, instanceGroup: string, requestId: string, requestBody: InstanceGroupsRemoveInstancesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/removeInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the named ports for the specified instance group.
		 * Post {project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where the named ports are updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instanceGroups_setNamedPorts(project: string, zone: string, instanceGroup: string, requestId: string, requestBody: InstanceGroupsSetNamedPortsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/setNamedPorts&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of instances contained within the specified zone.
		 * Get {project}/zones/{zone}/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instances_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an instance resource in the specified project using the data included in the request.
		 * Post {project}/zones/{zone}/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceInstanceTemplate Specifies instance template to create the instance.
		 * This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:  
		 * - https://www.googleapis.com/compute/v1/projects/project/global/instanceTemplates/instanceTemplate 
		 * - projects/project/global/instanceTemplates/instanceTemplate 
		 * - global/instanceTemplates/instanceTemplate
		 * @return {void} Successful response
		 */
		Compute_instances_insert(project: string, zone: string, requestId: string, sourceInstanceTemplate: string, requestBody: Instance): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceInstanceTemplate=' + (sourceInstanceTemplate == null ? '' : encodeURIComponent(sourceInstanceTemplate)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
		 * Delete {project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_delete(project: string, zone: string, instance: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified Instance resource. Gets a list of available instances by making a list() request.
		 * Get {project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to return.
		 * @return {void} Successful response
		 */
		Compute_instances_get(project: string, zone: string, instance: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
		 * Put {project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to update.
		 * @param {Compute_instances_updateMinimalAction} minimalAction Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action that the updated properties require.
		 * @param {Compute_instances_updateMinimalAction} mostDisruptiveAllowedAction Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_update(project: string, zone: string, instance: string, minimalAction: Compute_instances_updateMinimalAction, mostDisruptiveAllowedAction: Compute_instances_updateMinimalAction, requestId: string, requestBody: Instance): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '&minimalAction=' + minimalAction + '&mostDisruptiveAllowedAction=' + mostDisruptiveAllowedAction + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds an access config to an instance's network interface.
		 * Post {project}/zones/{zone}/instances/{instance}/addAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface to add to this instance.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_addAccessConfig(project: string, zone: string, instance: string, networkInterface: string, requestId: string, requestBody: AccessConfig): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/addAccessConfig&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
		 * Post {project}/zones/{zone}/instances/{instance}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_addResourcePolicies(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesAddResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
		 * Post {project}/zones/{zone}/instances/{instance}/attachDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {boolean} forceAttach Whether to force attach the disk even if it's currently attached to another instance.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_attachDisk(project: string, zone: string, instance: string, forceAttach: boolean, requestId: string, requestBody: AttachedDisk): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/attachDisk&forceAttach=' + forceAttach + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an access config from an instance's network interface.
		 * Post {project}/zones/{zone}/instances/{instance}/deleteAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} accessConfig The name of the access config to delete.
		 * @param {string} networkInterface The name of the network interface.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_deleteAccessConfig(project: string, zone: string, instance: string, accessConfig: string, networkInterface: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/deleteAccessConfig&accessConfig=' + (accessConfig == null ? '' : encodeURIComponent(accessConfig)) + '&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Detaches a disk from an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/detachDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Instance name for this request.
		 * @param {string} deviceName The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_detachDisk(project: string, zone: string, instance: string, deviceName: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/detachDisk&deviceName=' + (deviceName == null ? '' : encodeURIComponent(deviceName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified guest attributes entry.
		 * Get {project}/zones/{zone}/instances/{instance}/getGuestAttributes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} queryPath Specifies the guest attributes path to be queried.
		 * @param {string} variableKey Specifies the key for the guest attributes entry.
		 * @return {void} Successful response
		 */
		Compute_instances_getGuestAttributes(project: string, zone: string, instance: string, queryPath: string, variableKey: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/getGuestAttributes&queryPath=' + (queryPath == null ? '' : encodeURIComponent(queryPath)) + '&variableKey=' + (variableKey == null ? '' : encodeURIComponent(variableKey)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the Shielded Instance Identity of an instance
		 * Get {project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @return {void} Successful response
		 */
		Compute_instances_getShieldedInstanceIdentity(project: string, zone: string, instance: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/getShieldedInstanceIdentity', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of referrers to instances contained within the specified zone. For more information, read Viewing Referrers to VM Instances.
		 * Get {project}/zones/{zone}/instances/{instance}/referrers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_instances_listReferrers(project: string, zone: string, instance: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/referrers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes resource policies from an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_removeResourcePolicies(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesRemoveResourcePoliciesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/reset
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_reset(project: string, zone: string, instance: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/reset&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the last 1 MB of serial port output from the specified instance.
		 * Get {project}/zones/{zone}/instances/{instance}/serialPort
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {number} port Specifies which COM or serial port to retrieve data from.
		 * @param {string} start Returns output starting from a specific byte position. Use this to page through output when the output is too large to return in a single request. For the initial request, leave this field unspecified. For subsequent calls, this field should be set to the next value returned in the previous call.
		 * @return {void} Successful response
		 */
		Compute_instances_getSerialPortOutput(project: string, zone: string, instance: string, port: number, start: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/serialPort&port=' + port + '&start=' + (start == null ? '' : encodeURIComponent(start)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the auto-delete flag for a disk attached to an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/setDiskAutoDelete
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {boolean} autoDelete Whether to auto-delete the disk when the instance is deleted.
		 * @param {string} deviceName The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setDiskAutoDelete(project: string, zone: string, instance: string, autoDelete: boolean, deviceName: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setDiskAutoDelete&autoDelete=' + autoDelete + '&deviceName=' + (deviceName == null ? '' : encodeURIComponent(deviceName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
		 * Post {project}/zones/{zone}/instances/{instance}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setLabels(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesSetLabelsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
		 * Post {project}/zones/{zone}/instances/{instance}/setMachineResources
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setMachineResources(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesSetMachineResourcesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMachineResources&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the machine type for a stopped instance to the machine type specified in the request.
		 * Post {project}/zones/{zone}/instances/{instance}/setMachineType
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setMachineType(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesSetMachineTypeRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMachineType&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets metadata for the specified instance to the data included in the request.
		 * Post {project}/zones/{zone}/instances/{instance}/setMetadata
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setMetadata(project: string, zone: string, instance: string, requestId: string, requestBody: Metadata): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMetadata&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
		 * Post {project}/zones/{zone}/instances/{instance}/setMinCpuPlatform
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setMinCpuPlatform(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesSetMinCpuPlatformRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMinCpuPlatform&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets an instance's scheduling options.
		 * Post {project}/zones/{zone}/instances/{instance}/setScheduling
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setScheduling(project: string, zone: string, instance: string, requestId: string, requestBody: Scheduling): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setScheduling&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/setServiceAccount
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setServiceAccount(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesSetServiceAccountRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setServiceAccount&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setShieldedInstanceIntegrityPolicy(project: string, zone: string, instance: string, requestId: string, requestBody: ShieldedInstanceIntegrityPolicy): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setShieldedInstanceIntegrityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets network tags for the specified instance to the data included in the request.
		 * Post {project}/zones/{zone}/instances/{instance}/setTags
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setTags(project: string, zone: string, instance: string, requestId: string, requestBody: Tags): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setTags&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Simulates a maintenance event on the instance.
		 * Post {project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @return {void} Successful response
		 */
		Compute_instances_simulateMaintenanceEvent(project: string, zone: string, instance: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/simulateMaintenanceEvent', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/start
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_start(project: string, zone: string, instance: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/start&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/startWithEncryptionKey
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_startWithEncryptionKey(project: string, zone: string, instance: string, requestId: string, requestBody: InstancesStartWithEncryptionKeyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/startWithEncryptionKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
		 * Post {project}/zones/{zone}/instances/{instance}/stop
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to stop.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_stop(project: string, zone: string, instance: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/stop&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Post {project}/zones/{zone}/instances/{instance}/updateAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface where the access config is attached.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_updateAccessConfig(project: string, zone: string, instance: string, networkInterface: string, requestId: string, requestBody: AccessConfig): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateAccessConfig&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/zones/{zone}/instances/{instance}/updateDisplayDevice
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_updateDisplayDevice(project: string, zone: string, instance: string, requestId: string, requestBody: DisplayDevice): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateDisplayDevice&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an instance's network interface. This method follows PATCH semantics.
		 * Patch {project}/zones/{zone}/instances/{instance}/updateNetworkInterface
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_updateNetworkInterface(project: string, zone: string, instance: string, networkInterface: string, requestId: string, requestBody: NetworkInterface): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateNetworkInterface&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch {project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_updateShieldedInstanceConfig(project: string, zone: string, instance: string, requestId: string, requestBody: ShieldedInstanceConfig): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateShieldedInstanceConfig&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/zones/{zone}/instances/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instances_getIamPolicy(project: string, zone: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets deletion protection on the instance.
		 * Post {project}/zones/{zone}/instances/{resource}/setDeletionProtection
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {boolean} deletionProtection Whether the resource should be protected against deletion.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_instances_setDeletionProtection(project: string, zone: string, resource: string, deletionProtection: boolean, requestId: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setDeletionProtection&deletionProtection=' + deletionProtection + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/zones/{zone}/instances/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instances_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/zones/{zone}/instances/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_instances_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of machine types available to the specified project.
		 * Get {project}/zones/{zone}/machineTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_machineTypes_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/machineTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified machine type. Gets a list of available machine types by making a list() request.
		 * Get {project}/zones/{zone}/machineTypes/{machineType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} machineType Name of the machine type to return.
		 * @return {void} Successful response
		 */
		Compute_machineTypes_get(project: string, zone: string, machineType: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/machineTypes/' + (machineType == null ? '' : encodeURIComponent(machineType)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the list of network endpoint groups that are located in the specified project and zone.
		 * Get {project}/zones/{zone}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a network endpoint group in the specified project using the parameters that are included in the request.
		 * Post {project}/zones/{zone}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the network endpoint group. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_insert(project: string, zone: string, requestId: string, requestBody: NetworkEndpointGroup): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
		 * Delete {project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_delete(project: string, zone: string, networkEndpointGroup: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
		 * Get {project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_get(project: string, zone: string, networkEndpointGroup: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Attach a list of network endpoints to the specified network endpoint group.
		 * Post {project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_attachNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, requestId: string, requestBody: NetworkEndpointGroupsAttachEndpointsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/attachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Detach a list of network endpoints from the specified network endpoint group.
		 * Post {project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_detachNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, requestId: string, requestBody: NetworkEndpointGroupsDetachEndpointsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/detachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists the network endpoints in the specified network endpoint group.
		 * Post {project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_listNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, filter: string, maxResults: number, orderBy: string, pageToken: string, requestBody: NetworkEndpointGroupsListEndpointsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/listNetworkEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_networkEndpointGroups_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
		 * Get {project}/zones/{zone}/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a NodeGroup resource in the specified project using the data included in the request.
		 * Post {project}/zones/{zone}/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {number} initialNodeCount Initial count of nodes in the node group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_insert(project: string, zone: string, initialNodeCount: number, requestId: string, requestBody: NodeGroup): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups&initialNodeCount=' + initialNodeCount + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified NodeGroup resource.
		 * Delete {project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_delete(project: string, zone: string, nodeGroup: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
		 * Get {project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the node group to return.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_get(project: string, zone: string, nodeGroup: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Patch the node group.
		 * Patch {project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_patch(project: string, zone: string, nodeGroup: string, requestId: string, requestBody: NodeGroup): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Adds specified number of nodes to the node group.
		 * Post {project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_addNodes(project: string, zone: string, nodeGroup: string, requestId: string, requestBody: NodeGroupsAddNodesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/addNodes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes specified nodes from the node group.
		 * Post {project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource whose nodes will be deleted.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_deleteNodes(project: string, zone: string, nodeGroup: string, requestId: string, requestBody: NodeGroupsDeleteNodesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/deleteNodes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists nodes in the node group.
		 * Post {project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource whose nodes you want to list.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_listNodes(project: string, zone: string, nodeGroup: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/listNodes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the node template of the node group.
		 * Post {project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_setNodeTemplate(project: string, zone: string, nodeGroup: string, requestId: string, requestBody: NodeGroupsSetNodeTemplateRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/setNodeTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_getIamPolicy(project: string, zone: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_nodeGroups_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of node types available to the specified project.
		 * Get {project}/zones/{zone}/nodeTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_nodeTypes_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified node type. Gets a list of available node types by making a list() request.
		 * Get {project}/zones/{zone}/nodeTypes/{nodeType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeType Name of the node type to return.
		 * @return {void} Successful response
		 */
		Compute_nodeTypes_get(project: string, zone: string, nodeType: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeTypes/' + (nodeType == null ? '' : encodeURIComponent(nodeType)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified zone.
		 * Get {project}/zones/{zone}/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_zoneOperations_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified zone-specific Operations resource.
		 * Delete {project}/zones/{zone}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_zoneOperations_delete(project: string, zone: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified zone-specific Operations resource.
		 * Get {project}/zones/{zone}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_zoneOperations_get(project: string, zone: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
		 * This method is called on a best-effort basis. Specifically:
		 * - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
		 * - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post {project}/zones/{zone}/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {void} Successful response
		 */
		Compute_zoneOperations_wait(project: string, zone: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * A list of all the reservations that have been configured for the specified project in specified zone.
		 * Get {project}/zones/{zone}/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_reservations_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a new reservation. For more information, read Reserving zonal resources.
		 * Post {project}/zones/{zone}/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_reservations_insert(project: string, zone: string, requestId: string, requestBody: Reservation): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified reservation.
		 * Delete {project}/zones/{zone}/reservations/{reservation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_reservations_delete(project: string, zone: string, reservation: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves information about the specified reservation.
		 * Get {project}/zones/{zone}/reservations/{reservation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to retrieve.
		 * @return {void} Successful response
		 */
		Compute_reservations_get(project: string, zone: string, reservation: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
		 * Post {project}/zones/{zone}/reservations/{reservation}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_reservations_resize(project: string, zone: string, reservation: string, requestId: string, requestBody: ReservationsResizeRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get {project}/zones/{zone}/reservations/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_reservations_getIamPolicy(project: string, zone: string, resource: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post {project}/zones/{zone}/reservations/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_reservations_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post {project}/zones/{zone}/reservations/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {void} Successful response
		 */
		Compute_reservations_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a list of TargetInstance resources available to the specified project and zone.
		 * Get {project}/zones/{zone}/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
		 * For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
		 * You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
		 * To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
		 * You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
		 * Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @return {void} Successful response
		 */
		Compute_targetInstances_list(project: string, zone: string, filter: string, maxResults: number, orderBy: string, pageToken: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a TargetInstance resource in the specified project and zone using the data included in the request.
		 * Post {project}/zones/{zone}/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetInstances_insert(project: string, zone: string, requestId: string, requestBody: TargetInstance): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified TargetInstance resource.
		 * Delete {project}/zones/{zone}/targetInstances/{targetInstance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} targetInstance Name of the TargetInstance resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
		 * For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
		 * The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @return {void} Successful response
		 */
		Compute_targetInstances_delete(project: string, zone: string, targetInstance: string, requestId: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances/' + (targetInstance == null ? '' : encodeURIComponent(targetInstance)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
		 * Get {project}/zones/{zone}/targetInstances/{targetInstance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} targetInstance Name of the TargetInstance resource to return.
		 * @return {void} Successful response
		 */
		Compute_targetInstances_get(project: string, zone: string, targetInstance: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances/' + (targetInstance == null ? '' : encodeURIComponent(targetInstance)) + '', { observe: 'response', responseType: 'text' });
		}
	}

	export enum Compute_networks_listPeeringRoutesDirection { INCOMING = 0, OUTGOING = 1 }

	export enum Compute_instances_updateMinimalAction { INVALID = 0, NO_EFFECT = 1, REFRESH = 2, RESTART = 3 }

}

