import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** A server vulnerability assessment. */
	export interface ServerVulnerabilityAssessment {

		/** Properties of a server Vulnerability Assessment. */
		properties?: ServerVulnerabilityAssessmentProperties;
	}

	/** A server vulnerability assessment. */
	export interface ServerVulnerabilityAssessmentFormProperties {
	}
	export function CreateServerVulnerabilityAssessmentFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentFormProperties>({
		});

	}


	/** Properties of a server Vulnerability Assessment. */
	export interface ServerVulnerabilityAssessmentProperties {

		/** Properties of a Vulnerability Assessment recurring scans. */
		recurringScans?: VulnerabilityAssessmentRecurringScansProperties;

		/** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
		storageAccountAccessKey?: string | null;

		/**
		 * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
		 * Required
		 */
		storageContainerPath: string;

		/** A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
		storageContainerSasKey?: string | null;
	}

	/** Properties of a server Vulnerability Assessment. */
	export interface ServerVulnerabilityAssessmentPropertiesFormProperties {

		/** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
		storageAccountAccessKey: FormControl<string | null | undefined>,

		/**
		 * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
		 * Required
		 */
		storageContainerPath: FormControl<string | null | undefined>,

		/** A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
		storageContainerSasKey: FormControl<string | null | undefined>,
	}
	export function CreateServerVulnerabilityAssessmentPropertiesFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentPropertiesFormProperties>({
			storageAccountAccessKey: new FormControl<string | null | undefined>(undefined),
			storageContainerPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			storageContainerSasKey: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Properties of a Vulnerability Assessment recurring scans. */
	export interface VulnerabilityAssessmentRecurringScansProperties {

		/** Specifies that the schedule scan notification will be is sent to the subscription administrators. */
		emailSubscriptionAdmins?: boolean | null;

		/** Specifies an array of e-mail addresses to which the scan notification is sent. */
		emails?: Array<string>;

		/** Recurring scans state. */
		isEnabled?: boolean | null;
	}

	/** Properties of a Vulnerability Assessment recurring scans. */
	export interface VulnerabilityAssessmentRecurringScansPropertiesFormProperties {

		/** Specifies that the schedule scan notification will be is sent to the subscription administrators. */
		emailSubscriptionAdmins: FormControl<boolean | null | undefined>,

		/** Recurring scans state. */
		isEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateVulnerabilityAssessmentRecurringScansPropertiesFormGroup() {
		return new FormGroup<VulnerabilityAssessmentRecurringScansPropertiesFormProperties>({
			emailSubscriptionAdmins: new FormControl<boolean | null | undefined>(undefined),
			isEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A list of the server's vulnerability assessments. */
	export interface ServerVulnerabilityAssessmentListResult {

		/** Link to retrieve next page of results. */
		nextLink?: string | null;

		/** Array of results. */
		value?: Array<ServerVulnerabilityAssessment>;
	}

	/** A list of the server's vulnerability assessments. */
	export interface ServerVulnerabilityAssessmentListResultFormProperties {

		/** Link to retrieve next page of results. */
		nextLink: FormControl<string | null | undefined>,
	}
	export function CreateServerVulnerabilityAssessmentListResultFormGroup() {
		return new FormGroup<ServerVulnerabilityAssessmentListResultFormProperties>({
			nextLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists the vulnerability assessment policies associated with a server.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} serverName The name of the server.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {ServerVulnerabilityAssessmentListResult} Successfully retrieved the server vulnerability assessment policies.
		 */
		ServerVulnerabilityAssessments_ListByServer(resourceGroupName: string, serverName: string, subscriptionId: string, api_version: string): Observable<ServerVulnerabilityAssessmentListResult> {
			return this.http.get<ServerVulnerabilityAssessmentListResult>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/servers/' + (serverName == null ? '' : encodeURIComponent(serverName)) + '/vulnerabilityAssessments&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Gets the server's vulnerability assessment.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} serverName The name of the server for which the vulnerability assessment is defined.
		 * @param {ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {ServerVulnerabilityAssessment} Successfully retrieved the server vulnerability assessment.
		 */
		ServerVulnerabilityAssessments_Get(resourceGroupName: string, serverName: string, vulnerabilityAssessmentName: ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string): Observable<ServerVulnerabilityAssessment> {
			return this.http.get<ServerVulnerabilityAssessment>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/servers/' + (serverName == null ? '' : encodeURIComponent(serverName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Creates or updates the server's vulnerability assessment.
		 * Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} serverName The name of the server for which the vulnerability assessment is defined.
		 * @param {ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @param {ServerVulnerabilityAssessment} requestBody The requested resource.
		 * @return {ServerVulnerabilityAssessment} Successfully set the vulnerability assessment.
		 */
		ServerVulnerabilityAssessments_CreateOrUpdate(resourceGroupName: string, serverName: string, vulnerabilityAssessmentName: ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string, requestBody: ServerVulnerabilityAssessment): Observable<ServerVulnerabilityAssessment> {
			return this.http.put<ServerVulnerabilityAssessment>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/servers/' + (serverName == null ? '' : encodeURIComponent(serverName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes the server's vulnerability assessment.
		 * Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} serverName The name of the server for which the vulnerability assessment is defined.
		 * @param {ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {void} Successfully removed the server vulnerability assessment.
		 */
		ServerVulnerabilityAssessments_Delete(resourceGroupName: string, serverName: string, vulnerabilityAssessmentName: ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/servers/' + (serverName == null ? '' : encodeURIComponent(serverName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), { observe: 'response', responseType: 'text' });
		}
	}

	export enum ServerVulnerabilityAssessments_GetVulnerabilityAssessmentName { default = 'default' }

}

