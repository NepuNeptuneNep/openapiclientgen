import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** A managed instance vulnerability assessment. */
	export interface ManagedInstanceVulnerabilityAssessment {

		/** Properties of a managed instance vulnerability assessment. */
		properties?: ManagedInstanceVulnerabilityAssessmentProperties;
	}

	/** A managed instance vulnerability assessment. */
	export interface ManagedInstanceVulnerabilityAssessmentFormProperties {
	}
	export function CreateManagedInstanceVulnerabilityAssessmentFormGroup() {
		return new FormGroup<ManagedInstanceVulnerabilityAssessmentFormProperties>({
		});

	}


	/** Properties of a managed instance vulnerability assessment. */
	export interface ManagedInstanceVulnerabilityAssessmentProperties {

		/** Properties of a Vulnerability Assessment recurring scans. */
		recurringScans?: VulnerabilityAssessmentRecurringScansProperties;

		/** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
		storageAccountAccessKey?: string | null;

		/**
		 * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
		 * Required
		 */
		storageContainerPath: string;

		/** A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
		storageContainerSasKey?: string | null;
	}

	/** Properties of a managed instance vulnerability assessment. */
	export interface ManagedInstanceVulnerabilityAssessmentPropertiesFormProperties {

		/** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
		storageAccountAccessKey: FormControl<string | null | undefined>,

		/**
		 * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
		 * Required
		 */
		storageContainerPath: FormControl<string | null | undefined>,

		/** A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
		storageContainerSasKey: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceVulnerabilityAssessmentPropertiesFormGroup() {
		return new FormGroup<ManagedInstanceVulnerabilityAssessmentPropertiesFormProperties>({
			storageAccountAccessKey: new FormControl<string | null | undefined>(undefined),
			storageContainerPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			storageContainerSasKey: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Properties of a Vulnerability Assessment recurring scans. */
	export interface VulnerabilityAssessmentRecurringScansProperties {

		/** Specifies that the schedule scan notification will be is sent to the subscription administrators. */
		emailSubscriptionAdmins?: boolean | null;

		/** Specifies an array of e-mail addresses to which the scan notification is sent. */
		emails?: Array<string>;

		/** Recurring scans state. */
		isEnabled?: boolean | null;
	}

	/** Properties of a Vulnerability Assessment recurring scans. */
	export interface VulnerabilityAssessmentRecurringScansPropertiesFormProperties {

		/** Specifies that the schedule scan notification will be is sent to the subscription administrators. */
		emailSubscriptionAdmins: FormControl<boolean | null | undefined>,

		/** Recurring scans state. */
		isEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateVulnerabilityAssessmentRecurringScansPropertiesFormGroup() {
		return new FormGroup<VulnerabilityAssessmentRecurringScansPropertiesFormProperties>({
			emailSubscriptionAdmins: new FormControl<boolean | null | undefined>(undefined),
			isEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A list of the ManagedInstance's vulnerability assessments. */
	export interface ManagedInstanceVulnerabilityAssessmentListResult {

		/** Link to retrieve next page of results. */
		nextLink?: string | null;

		/** Array of results. */
		value?: Array<ManagedInstanceVulnerabilityAssessment>;
	}

	/** A list of the ManagedInstance's vulnerability assessments. */
	export interface ManagedInstanceVulnerabilityAssessmentListResultFormProperties {

		/** Link to retrieve next page of results. */
		nextLink: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceVulnerabilityAssessmentListResultFormGroup() {
		return new FormGroup<ManagedInstanceVulnerabilityAssessmentListResultFormProperties>({
			nextLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Gets the managed instance's vulnerability assessment policies.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance for which the vulnerability assessments is defined.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {ManagedInstanceVulnerabilityAssessmentListResult} Successfully retrieved the managed instance vulnerability assessment policies.
		 */
		ManagedInstanceVulnerabilityAssessments_ListByInstance(resourceGroupName: string, managedInstanceName: string, subscriptionId: string, api_version: string): Observable<ManagedInstanceVulnerabilityAssessmentListResult> {
			return this.http.get<ManagedInstanceVulnerabilityAssessmentListResult>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/vulnerabilityAssessments&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Gets the managed instance's vulnerability assessment.
		 * Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance for which the vulnerability assessment is defined.
		 * @param {ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {ManagedInstanceVulnerabilityAssessment} Successfully retrieved the managed instance vulnerability assessment.
		 */
		ManagedInstanceVulnerabilityAssessments_Get(resourceGroupName: string, managedInstanceName: string, vulnerabilityAssessmentName: ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string): Observable<ManagedInstanceVulnerabilityAssessment> {
			return this.http.get<ManagedInstanceVulnerabilityAssessment>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), {});
		}

		/**
		 * Creates or updates the managed instance's vulnerability assessment.
		 * Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance for which the vulnerability assessment is defined.
		 * @param {ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @param {ManagedInstanceVulnerabilityAssessment} requestBody The requested resource.
		 * @return {ManagedInstanceVulnerabilityAssessment} Successfully set the vulnerability assessment.
		 */
		ManagedInstanceVulnerabilityAssessments_CreateOrUpdate(resourceGroupName: string, managedInstanceName: string, vulnerabilityAssessmentName: ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string, requestBody: ManagedInstanceVulnerabilityAssessment): Observable<ManagedInstanceVulnerabilityAssessment> {
			return this.http.put<ManagedInstanceVulnerabilityAssessment>(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes the managed instance's vulnerability assessment.
		 * Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
		 * @param {string} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
		 * @param {string} managedInstanceName The name of the managed instance for which the vulnerability assessment is defined.
		 * @param {ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName} vulnerabilityAssessmentName The name of the vulnerability assessment.
		 * @param {string} subscriptionId The subscription ID that identifies an Azure subscription.
		 * @param {string} api_version The API version to use for the request.
		 * @return {void} Successfully removed the managed instance vulnerability assessment.
		 */
		ManagedInstanceVulnerabilityAssessments_Delete(resourceGroupName: string, managedInstanceName: string, vulnerabilityAssessmentName: ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName, subscriptionId: string, api_version: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'subscriptions/' + (subscriptionId == null ? '' : encodeURIComponent(subscriptionId)) + '/resourceGroups/' + (resourceGroupName == null ? '' : encodeURIComponent(resourceGroupName)) + '/providers/Microsoft.Sql/managedInstances/' + (managedInstanceName == null ? '' : encodeURIComponent(managedInstanceName)) + '/vulnerabilityAssessments/' + vulnerabilityAssessmentName + '&api_version=' + (api_version == null ? '' : encodeURIComponent(api_version)), { observe: 'response', responseType: 'text' });
		}
	}

	export enum ManagedInstanceVulnerabilityAssessments_GetVulnerabilityAssessmentName { default = 'default' }

}

