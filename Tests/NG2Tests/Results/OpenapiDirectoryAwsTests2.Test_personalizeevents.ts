import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Represents user interaction event information sent using the <code>PutEvents</code> API. */
	export interface Event {

		/**
		 * Max length: 256
		 * Min length: 1
		 */
		eventId?: string | null;

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		eventType: string;

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		properties: string;

		/** Required */
		sentAt: Date;
	}

	/** Represents user interaction event information sent using the <code>PutEvents</code> API. */
	export interface EventFormProperties {

		/**
		 * Max length: 256
		 * Min length: 1
		 */
		eventId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		eventType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		properties: FormControl<string | null | undefined>,

		/** Required */
		sentAt: FormControl<Date | null | undefined>,
	}
	export function CreateEventFormGroup() {
		return new FormGroup<EventFormProperties>({
			eventId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256), Validators.minLength(1)]),
			eventType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.minLength(1)]),
			properties: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1024), Validators.minLength(1)]),
			sentAt: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface InvalidInputException {
	}
	export interface InvalidInputExceptionFormProperties {
	}
	export function CreateInvalidInputExceptionFormGroup() {
		return new FormGroup<InvalidInputExceptionFormProperties>({
		});

	}

	export interface PutEventsRequest {

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		trackingId: string;

		/**
		 * Max length: 256
		 * Min length: 1
		 */
		userId?: string | null;

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		sessionId: string;

		/**
		 * Required
		 * Minimum items: 1
		 * Maximum items: 10
		 */
		eventList: Array<Event>;
	}
	export interface PutEventsRequestFormProperties {

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		trackingId: FormControl<string | null | undefined>,

		/**
		 * Max length: 256
		 * Min length: 1
		 */
		userId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		sessionId: FormControl<string | null | undefined>,
	}
	export function CreatePutEventsRequestFormGroup() {
		return new FormGroup<PutEventsRequestFormProperties>({
			trackingId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.minLength(1)]),
			userId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256), Validators.minLength(1)]),
			sessionId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.minLength(1)]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Records user interaction event data.
		 * Post events
		 * @return {void} Success
		 */
		PutEvents(requestBody: PutEventsPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'events', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}
	}

	export interface PutEventsPostBody {

		/**
		 * The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		trackingId: string;

		/**
		 * The user associated with the event.
		 * Max length: 256
		 * Min length: 1
		 */
		userId?: string | null;

		/**
		 * The session ID associated with the user's visit.
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		sessionId: string;

		/**
		 * A list of event data from the session.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 10
		 */
		eventList: Array<Event>;
	}
	export interface PutEventsPostBodyFormProperties {

		/**
		 * The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		trackingId: FormControl<string | null | undefined>,

		/**
		 * The user associated with the event.
		 * Max length: 256
		 * Min length: 1
		 */
		userId: FormControl<string | null | undefined>,

		/**
		 * The session ID associated with the user's visit.
		 * Required
		 * Max length: 256
		 * Min length: 1
		 */
		sessionId: FormControl<string | null | undefined>,
	}
	export function CreatePutEventsPostBodyFormGroup() {
		return new FormGroup<PutEventsPostBodyFormProperties>({
			trackingId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.minLength(1)]),
			userId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256), Validators.minLength(1)]),
			sessionId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.minLength(1)]),
		});

	}

}

