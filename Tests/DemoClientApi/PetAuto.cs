//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;


	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class AdvancedGameStat
	{

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public AdvancedGameStatDefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gameId")]
		public System.Nullable<System.Int32> GameId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public AdvancedGameStatOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "opponent")]
		public string Opponent { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	public class AdvancedGameStatDefense
	{

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public System.Nullable<System.Int32> Drives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Double> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsTotal")]
		public System.Nullable<System.Double> LineYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Double> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsTotal")]
		public System.Nullable<System.Int32> OpenFieldYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public AdvancedGameStatDefensePassingDowns PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingPlays")]
		public AdvancedGameStatDefensePassingPlays PassingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "powerSuccess")]
		public System.Nullable<System.Double> PowerSuccess { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingPlays")]
		public AdvancedGameStatDefenseRushingPlays RushingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Double> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsTotal")]
		public System.Nullable<System.Int32> SecondLevelYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public AdvancedGameStatDefenseStandardDowns StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stuffRate")]
		public System.Nullable<System.Double> StuffRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatDefensePassingDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedGameStatDefensePassingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatDefenseRushingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatDefenseStandardDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedGameStatOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public System.Nullable<System.Int32> Drives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Double> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsTotal")]
		public System.Nullable<System.Double> LineYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Double> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsTotal")]
		public System.Nullable<System.Int32> OpenFieldYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public AdvancedGameStatOffensePassingDowns PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingPlays")]
		public AdvancedGameStatOffensePassingPlays PassingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "powerSuccess")]
		public System.Nullable<System.Double> PowerSuccess { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingPlays")]
		public AdvancedGameStatOffenseRushingPlays RushingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Double> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsTotal")]
		public System.Nullable<System.Int32> SecondLevelYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public AdvancedGameStatOffenseStandardDowns StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stuffRate")]
		public System.Nullable<System.Double> StuffRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatOffensePassingDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedGameStatOffensePassingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatOffenseRushingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedGameStatOffenseStandardDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class AdvancedSeasonStat
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public AdvancedSeasonStatDefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public AdvancedSeasonStatOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class AdvancedSeasonStatDefense
	{

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public System.Nullable<System.Int32> Drives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "fieldPosition")]
		public AdvancedSeasonStatDefenseFieldPosition FieldPosition { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "havoc")]
		public AdvancedSeasonStatDefenseHavoc Havoc { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Double> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsTotal")]
		public System.Nullable<System.Double> LineYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Double> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsTotal")]
		public System.Nullable<System.Int32> OpenFieldYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public AdvancedSeasonStatDefensePassingDowns PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingPlays")]
		public AdvancedSeasonStatDefensePassingPlays PassingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pointsPerOpportunity")]
		public System.Nullable<System.Double> PointsPerOpportunity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "powerSuccess")]
		public System.Nullable<System.Double> PowerSuccess { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingPlays")]
		public AdvancedSeasonStatDefenseRushingPlays RushingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Double> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsTotal")]
		public System.Nullable<System.Int32> SecondLevelYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public AdvancedSeasonStatDefenseStandardDowns StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stuffRate")]
		public System.Nullable<System.Double> StuffRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalOpportunies")]
		public System.Nullable<System.Int32> TotalOpportunies { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatDefenseFieldPosition
	{

		[System.Runtime.Serialization.DataMember(Name = "averagePredictedPoints")]
		public System.Nullable<System.Double> AveragePredictedPoints { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "averageStart")]
		public System.Nullable<System.Double> AverageStart { get; set; }
	}

	public class AdvancedSeasonStatDefenseHavoc
	{

		[System.Runtime.Serialization.DataMember(Name = "db")]
		public System.Nullable<System.Double> Db { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "frontSeven")]
		public System.Nullable<System.Double> FrontSeven { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class AdvancedSeasonStatDefensePassingDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedSeasonStatDefensePassingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatDefenseRushingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatDefenseStandardDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedSeasonStatOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public System.Nullable<System.Int32> Drives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "fieldPosition")]
		public AdvancedSeasonStatOffenseFieldPosition FieldPosition { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "havoc")]
		public AdvancedSeasonStatOffenseHavoc Havoc { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Double> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsTotal")]
		public System.Nullable<System.Double> LineYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Double> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsTotal")]
		public System.Nullable<System.Int32> OpenFieldYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public AdvancedSeasonStatOffensePassingDowns PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingPlays")]
		public AdvancedSeasonStatOffensePassingPlays PassingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pointsPerOpportunity")]
		public System.Nullable<System.Double> PointsPerOpportunity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "powerSuccess")]
		public System.Nullable<System.Double> PowerSuccess { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingPlays")]
		public AdvancedSeasonStatOffenseRushingPlays RushingPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Double> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsTotal")]
		public System.Nullable<System.Int32> SecondLevelYardsTotal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public AdvancedSeasonStatOffenseStandardDowns StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stuffRate")]
		public System.Nullable<System.Double> StuffRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalOpportunies")]
		public System.Nullable<System.Int32> TotalOpportunies { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatOffenseFieldPosition
	{

		[System.Runtime.Serialization.DataMember(Name = "averagePredictedPoints")]
		public System.Nullable<System.Double> AveragePredictedPoints { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "averageStart")]
		public System.Nullable<System.Double> AverageStart { get; set; }
	}

	public class AdvancedSeasonStatOffenseHavoc
	{

		[System.Runtime.Serialization.DataMember(Name = "db")]
		public System.Nullable<System.Double> Db { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "frontSeven")]
		public System.Nullable<System.Double> FrontSeven { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class AdvancedSeasonStatOffensePassingDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	public class AdvancedSeasonStatOffensePassingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatOffenseRushingPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }
	}

	public class AdvancedSeasonStatOffenseStandardDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rate")]
		public System.Nullable<System.Double> Rate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class BoxScore
	{

		[System.Runtime.Serialization.DataMember(Name = "players")]
		public BoxScorePlayers Players { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teams")]
		public BoxScoreTeams Teams { get; set; }
	}

	public class BoxScorePlayers
	{

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public BoxScorePlayersPpa[] BoxScorePlayersPpa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "usage")]
		public BoxScorePlayersUsage[] BoxScorePlayersUsage { get; set; }
	}

	public class BoxScorePlayersPpa
	{

		[System.Runtime.Serialization.DataMember(Name = "average")]
		public BoxScorePlayersAverage Average { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "cumulative")]
		public BoxScorePlayersCumulative Cumulative { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "player")]
		public string Player { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScorePlayersAverage
	{

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScorePlayersCumulative
	{

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScorePlayersUsage
	{

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "player")]
		public string Player { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "cumulativePpa")]
		public BoxScoreTeamsCumulativePpa[] BoxScoreTeamsCumulativePpa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public BoxScoreTeamsExplosiveness[] BoxScoreTeamsExplosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "fieldPosition")]
		public BoxScoreTeamsFieldPosition[] BoxScoreTeamsFieldPosition { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "havoc")]
		public BoxScoreTeamsHavoc[] BoxScoreTeamsHavoc { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public BoxScoreTeamsPpa[] BoxScoreTeamsPpa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public BoxScoreTeamsRushing[] BoxScoreTeamsRushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "scoringOpportunities")]
		public BoxScoreTeamsScoringOpportunities[] BoxScoreTeamsScoringOpportunities { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRates")]
		public BoxScoreTeamsSuccessRates[] BoxScoreTeamsSuccessRates { get; set; }
	}

	public class BoxScoreTeamsCumulativePpa
	{

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public BoxScoreTeamsOverall Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public BoxScoreTeamsPassing Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Double> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public BoxScoreTeamsRushing Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsOverall
	{

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeamsPassing
	{

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeamsRushing
	{

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeamsExplosiveness
	{

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public BoxScoreTeamsOverall Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsFieldPosition
	{

		[System.Runtime.Serialization.DataMember(Name = "averageStart")]
		public System.Nullable<System.Double> AverageStart { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "averageStartingPredictedPoints")]
		public System.Nullable<System.Double> AverageStartingPredictedPoints { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsHavoc
	{

		[System.Runtime.Serialization.DataMember(Name = "db")]
		public System.Nullable<System.Double> Db { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "frontSeven")]
		public System.Nullable<System.Double> FrontSeven { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeamsPpa
	{

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public BoxScoreTeamsOverall Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public BoxScoreTeamsPassing Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Double> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public BoxScoreTeamsRushing Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsRushing
	{

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Double> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsAverage")]
		public System.Nullable<System.Double> LineYardsAverage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Int32> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsAverage")]
		public System.Nullable<System.Double> OpenFieldYardsAverage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "powerSuccess")]
		public System.Nullable<System.Double> PowerSuccess { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Int32> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsAverage")]
		public System.Nullable<System.Double> SecondLevelYardsAverage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stuffRate")]
		public System.Nullable<System.Double> StuffRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsScoringOpportunities
	{

		[System.Runtime.Serialization.DataMember(Name = "opportunities")]
		public System.Nullable<System.Int32> Opportunities { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pointsPerOpportunity")]
		public System.Nullable<System.Double> PointsPerOpportunity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsSuccessRates
	{

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public BoxScoreTeamsOverall Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public BoxScoreTeamsPassingDowns PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public BoxScoreTeamsStandardDowns StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class BoxScoreTeamsPassingDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class BoxScoreTeamsStandardDowns
	{

		[System.Runtime.Serialization.DataMember(Name = "quarter1")]
		public System.Nullable<System.Double> Quarter1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter2")]
		public System.Nullable<System.Double> Quarter2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter3")]
		public System.Nullable<System.Double> Quarter3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "quarter4")]
		public System.Nullable<System.Double> Quarter4 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Coach
	{

		[System.Runtime.Serialization.DataMember(Name = "first_name")]
		public string First_name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "hire_date")]
		public string Hire_date { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "last_name")]
		public string Last_name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasons")]
		public CoachSeasons[] CoachSeasons { get; set; }
	}

	public class CoachSeasons
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		/// <summary>
		/// Final ranking in the AP poll
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "postseason_rank")]
		public System.Nullable<System.Int32> Postseason_rank { get; set; }

		/// <summary>
		/// Rank in the AP preseason poll
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "preseason_rank")]
		public System.Nullable<System.Int32> Preseason_rank { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		/// <summary>
		/// Final SP+ defensive rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_defense")]
		public System.Nullable<System.Double> Sp_defense { get; set; }

		/// <summary>
		/// Final SP+ offensive rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_offense")]
		public System.Nullable<System.Double> Sp_offense { get; set; }

		/// <summary>
		/// Final overall SP+ rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_overall")]
		public System.Nullable<System.Double> Sp_overall { get; set; }

		/// <summary>
		/// Final SRS rankings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "srs")]
		public System.Nullable<System.Double> Srs { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public string Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Conference
	{

		[System.Runtime.Serialization.DataMember(Name = "abbreviation")]
		public string Abbreviation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "classification")]
		public string Classification { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "short_name")]
		public string Short_name { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class ConferenceSPRating
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public ConferenceSPRatingDefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public ConferenceSPRatingOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondOrderWins")]
		public System.Nullable<System.Double> SecondOrderWins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "sos")]
		public System.Nullable<System.Double> Sos { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "specialTeams")]
		public ConferenceSPRatingSpecialTeams SpecialTeams { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	public class ConferenceSPRatingDefense
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "havoc")]
		public ConferenceSPRatingDefenseHavoc Havoc { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pasing")]
		public System.Nullable<System.Double> Pasing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Double> Success { get; set; }
	}

	public class ConferenceSPRatingDefenseHavoc
	{

		[System.Runtime.Serialization.DataMember(Name = "db")]
		public System.Nullable<System.Double> Db { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "frontSeven")]
		public System.Nullable<System.Double> FrontSeven { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class ConferenceSPRatingOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pace")]
		public System.Nullable<System.Double> Pace { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "runRate")]
		public System.Nullable<System.Double> RunRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Double> Success { get; set; }
	}

	public class ConferenceSPRatingSpecialTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class DraftPick
	{

		[System.Runtime.Serialization.DataMember(Name = "collegeAthleteId")]
		public System.Nullable<System.Int32> CollegeAthleteId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "collegeConference")]
		public string CollegeConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "collegeId")]
		public System.Nullable<System.Int32> CollegeId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "collegeTeam")]
		public string CollegeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "height")]
		public System.Nullable<System.Int32> Height { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "hometownInfo")]
		public DraftPickHometownInfo HometownInfo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "nflAthleteId")]
		public System.Nullable<System.Int32> NflAthleteId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "nflTeam")]
		public string NflTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Int32> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pick")]
		public System.Nullable<System.Int32> Pick { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "preDraftGrade")]
		public System.Nullable<System.Int32> PreDraftGrade { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "preDraftPositionRanking")]
		public System.Nullable<System.Int32> PreDraftPositionRanking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "preDraftRanking")]
		public System.Nullable<System.Int32> PreDraftRanking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "round")]
		public System.Nullable<System.Int32> Round { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weight")]
		public System.Nullable<System.Int32> Weight { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	public class DraftPickHometownInfo
	{

		[System.Runtime.Serialization.DataMember(Name = "city")]
		public string City { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "country")]
		public string Country { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "countryFips")]
		public System.Nullable<System.Int32> CountryFips { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "state")]
		public string State { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class DraftPosition
	{

		[System.Runtime.Serialization.DataMember(Name = "abbreviation")]
		public string Abbreviation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class DraftTeam
	{

		[System.Runtime.Serialization.DataMember(Name = "displayName")]
		public string DisplayName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "location")]
		public string Location { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "logo")]
		public string Logo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "nickname")]
		public string Nickname { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Drive
	{

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public string Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense_conference")]
		public string Defense_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "drive_number")]
		public System.Nullable<System.Int32> Drive_number { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "drive_result")]
		public string Drive_result { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_defense_score")]
		public System.Nullable<System.Int32> End_defense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_offense_score")]
		public System.Nullable<System.Int32> End_offense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_period")]
		public System.Nullable<System.Int32> End_period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_time")]
		public DriveEnd_time End_time { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_yardline")]
		public System.Nullable<System.Int32> End_yardline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "end_yards_to_goal")]
		public System.Nullable<System.Int32> End_yards_to_goal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "game_id")]
		public System.Nullable<System.Int32> Game_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "is_home_offense")]
		public System.Nullable<System.Boolean> Is_home_offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public string Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense_conference")]
		public string Offense_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "scoring")]
		public System.Nullable<System.Boolean> Scoring { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_defense_score")]
		public System.Nullable<System.Int32> Start_defense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_offense_score")]
		public System.Nullable<System.Int32> Start_offense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_period")]
		public System.Nullable<System.Int32> Start_period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_time")]
		public DriveStart_time Start_time { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_yardline")]
		public System.Nullable<System.Int32> Start_yardline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_yards_to_goal")]
		public System.Nullable<System.Int32> Start_yards_to_goal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yards")]
		public System.Nullable<System.Int32> Yards { get; set; }
	}

	public class DriveEnd_time
	{

		[System.Runtime.Serialization.DataMember(Name = "minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}

	public class DriveStart_time
	{

		[System.Runtime.Serialization.DataMember(Name = "minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Game
	{

		[System.Runtime.Serialization.DataMember(Name = "attendance")]
		public System.Nullable<System.Int32> Attendance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_conference")]
		public string Away_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_division")]
		public string Away_division { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_id")]
		public System.Nullable<System.Int32> Away_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_line_scores")]
		public int[] Away_line_scores { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_points")]
		public System.Nullable<System.Int32> Away_points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_post_win_prob")]
		public System.Nullable<System.Double> Away_post_win_prob { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_postgame_elo")]
		public System.Nullable<System.Int32> Away_postgame_elo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_pregame_elo")]
		public System.Nullable<System.Int32> Away_pregame_elo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "away_team")]
		public string Away_team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference_game")]
		public System.Nullable<System.Boolean> Conference_game { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "excitement_index")]
		public System.Nullable<System.Double> Excitement_index { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "highlights")]
		public string Highlights { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_conference")]
		public string Home_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_division")]
		public string Home_division { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_id")]
		public System.Nullable<System.Int32> Home_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_line_scores")]
		public int[] Home_line_scores { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_points")]
		public System.Nullable<System.Int32> Home_points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_post_win_prob")]
		public System.Nullable<System.Double> Home_post_win_prob { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_postgame_elo")]
		public System.Nullable<System.Int32> Home_postgame_elo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_pregame_elo")]
		public System.Nullable<System.Int32> Home_pregame_elo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_team")]
		public string Home_team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "neutral_site")]
		public System.Nullable<System.Boolean> Neutral_site { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "notes")]
		public string Notes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season_type")]
		public string Season_type { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_date")]
		public string Start_date { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "start_time_tbd")]
		public System.Nullable<System.Boolean> Start_time_tbd { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue")]
		public string Venue { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue_id")]
		public System.Nullable<System.Int32> Venue_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class GameLines
	{

		[System.Runtime.Serialization.DataMember(Name = "awayConference")]
		public string AwayConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayScore")]
		public System.Nullable<System.Int32> AwayScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public string AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeConference")]
		public string HomeConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeScore")]
		public System.Nullable<System.Int32> HomeScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public string HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lines")]
		public GameLinesLines[] GameLinesLines { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startDate")]
		public string StartDate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	public class GameLinesLines
	{

		[System.Runtime.Serialization.DataMember(Name = "awayMoneyline")]
		public System.Nullable<System.Double> AwayMoneyline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "formattedSpread")]
		public string FormattedSpread { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeMoneyline")]
		public System.Nullable<System.Double> HomeMoneyline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overUnder")]
		public System.Nullable<System.Double> OverUnder { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overUnderOpen")]
		public System.Nullable<System.Double> OverUnderOpen { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "provider")]
		public string Provider { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "spread")]
		public System.Nullable<System.Double> Spread { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "spreadOpen")]
		public System.Nullable<System.Double> SpreadOpen { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class GameMedia
	{

		[System.Runtime.Serialization.DataMember(Name = "awayConference")]
		public string AwayConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public string AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeConference")]
		public string HomeConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public string HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "isStartTimeTBD")]
		public System.Nullable<System.Boolean> IsStartTimeTBD { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "mediaType")]
		public string MediaType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "outlet")]
		public string Outlet { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startTime")]
		public string StartTime { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class GamePPA
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public GamePPADefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gameId")]
		public System.Nullable<System.Int32> GameId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public GamePPAOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "opponent")]
		public string Opponent { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	public class GamePPADefense
	{

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Double> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	public class GamePPAOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Double> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class GameWeather
	{

		[System.Runtime.Serialization.DataMember(Name = "awayConference")]
		public string AwayConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public string AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "dewPoint")]
		public System.Nullable<System.Double> DewPoint { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gameIndoors")]
		public System.Nullable<System.Boolean> GameIndoors { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeConference")]
		public string HomeConference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public string HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "humidity")]
		public System.Nullable<System.Double> Humidity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "precipitation")]
		public System.Nullable<System.Double> Precipitation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "snowfall")]
		public System.Nullable<System.Double> Snowfall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startTime")]
		public string StartTime { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue")]
		public string Venue { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venueId")]
		public System.Nullable<System.Int32> VenueId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weatherCondition")]
		public string WeatherCondition { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weatherConditionCode")]
		public System.Nullable<System.Int32> WeatherConditionCode { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "windDirection")]
		public System.Nullable<System.Double> WindDirection { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "windSpeed")]
		public System.Nullable<System.Double> WindSpeed { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class LivePlayByPlay
	{

		[System.Runtime.Serialization.DataMember(Name = "clock")]
		public string Clock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "distance")]
		public System.Nullable<System.Int32> Distance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "down")]
		public System.Nullable<System.Int32> Down { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public LivePlayByPlayDrives[] LivePlayByPlayDrives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "period")]
		public System.Nullable<System.Int32> Period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "possession")]
		public string Possession { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "status")]
		public string Status { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teams")]
		public LivePlayByPlayTeams[] LivePlayByPlayTeams { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardsToGoal")]
		public System.Nullable<System.Int32> YardsToGoal { get; set; }
	}

	public class LivePlayByPlayDrives
	{

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public string Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defenseId")]
		public System.Nullable<System.Int32> DefenseId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "duration")]
		public string Duration { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "endClock")]
		public string EndClock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "endPeriod")]
		public System.Nullable<System.Int32> EndPeriod { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "endYardsToGoal")]
		public System.Nullable<System.Int32> EndYardsToGoal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public string Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offenseId")]
		public System.Nullable<System.Int32> OffenseId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playCount")]
		public System.Nullable<System.Int32> PlayCount { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public LivePlayByPlayDrivesPlays[] LivePlayByPlayDrivesPlays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "scoringOpportunity")]
		public System.Nullable<System.Boolean> ScoringOpportunity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startClock")]
		public string StartClock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startPeriod")]
		public System.Nullable<System.Int32> StartPeriod { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startYardsToGoal")]
		public System.Nullable<System.Int32> StartYardsToGoal { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yards")]
		public System.Nullable<System.Int32> Yards { get; set; }
	}

	public class LivePlayByPlayDrivesPlays
	{

		[System.Runtime.Serialization.DataMember(Name = "awayScore")]
		public System.Nullable<System.Int32> AwayScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "clock")]
		public string Clock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "distance")]
		public System.Nullable<System.Int32> Distance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "down")]
		public System.Nullable<System.Int32> Down { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "downType")]
		public string DownType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "epa")]
		public System.Nullable<System.Double> Epa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "garbageTime")]
		public System.Nullable<System.Boolean> GarbageTime { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeScore")]
		public System.Nullable<System.Int32> HomeScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "period")]
		public System.Nullable<System.Int32> Period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playText")]
		public string PlayText { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playType")]
		public string PlayType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playTypeId")]
		public System.Nullable<System.Int32> PlayTypeId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushPass")]
		public string RushPass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Boolean> Success { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teamId")]
		public System.Nullable<System.Int32> TeamId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wallclock")]
		public string Wallclock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardsGained")]
		public System.Nullable<System.Int32> YardsGained { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardsToGoal")]
		public System.Nullable<System.Int32> YardsToGoal { get; set; }
	}

	public class LivePlayByPlayTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "drives")]
		public System.Nullable<System.Int32> Drives { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "epaPerPass")]
		public System.Nullable<System.Double> EpaPerPass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "epaPerPlay")]
		public System.Nullable<System.Double> EpaPerPlay { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "epaPerRush")]
		public System.Nullable<System.Double> EpaPerRush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeAway")]
		public string HomeAway { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYards")]
		public System.Nullable<System.Int32> LineYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lineYardsPerRush")]
		public System.Nullable<System.Double> LineYardsPerRush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYards")]
		public System.Nullable<System.Int32> OpenFieldYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "openFieldYardsPerRush")]
		public System.Nullable<System.Double> OpenFieldYardsPerRush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDownSuccessRate")]
		public System.Nullable<System.Double> PassingDownSuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingEpa")]
		public System.Nullable<System.Double> PassingEpa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "plays")]
		public System.Nullable<System.Int32> Plays { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pointsPerOpportunity")]
		public System.Nullable<System.Double> PointsPerOpportunity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingEpa")]
		public System.Nullable<System.Double> RushingEpa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "scoringOpportunities")]
		public System.Nullable<System.Int32> ScoringOpportunities { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYards")]
		public System.Nullable<System.Int32> SecondLevelYards { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondLevelYardsPerRush")]
		public System.Nullable<System.Double> SecondLevelYardsPerRush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDownSuccessRate")]
		public System.Nullable<System.Double> StandardDownSuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "successRate")]
		public System.Nullable<System.Double> SuccessRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teamId")]
		public System.Nullable<System.Int32> TeamId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalEpa")]
		public System.Nullable<System.Double> TotalEpa { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Play
	{

		[System.Runtime.Serialization.DataMember(Name = "away")]
		public string Away { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "clock")]
		public PlayClock Clock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public string Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense_conference")]
		public string Defense_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense_score")]
		public System.Nullable<System.Int32> Defense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense_timeouts")]
		public System.Nullable<System.Int32> Defense_timeouts { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "distance")]
		public System.Nullable<System.Int32> Distance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "down")]
		public System.Nullable<System.Int32> Down { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "drive_id")]
		public System.Nullable<System.Int32> Drive_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "drive_number")]
		public System.Nullable<System.Int32> Drive_number { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "game_id")]
		public System.Nullable<System.Int32> Game_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home")]
		public string Home { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public string Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense_conference")]
		public string Offense_conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense_score")]
		public System.Nullable<System.Int32> Offense_score { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense_timeouts")]
		public System.Nullable<System.Int32> Offense_timeouts { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "period")]
		public System.Nullable<System.Int32> Period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "play_number")]
		public System.Nullable<System.Int32> Play_number { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "play_text")]
		public string Play_text { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "play_type")]
		public string Play_type { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ppa")]
		public System.Nullable<System.Double> Ppa { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "scoring")]
		public System.Nullable<System.Boolean> Scoring { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wallclock")]
		public string Wallclock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yard_line")]
		public System.Nullable<System.Int32> Yard_line { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yards_gained")]
		public System.Nullable<System.Int32> Yards_gained { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yards_to_goal")]
		public System.Nullable<System.Int32> Yards_to_goal { get; set; }
	}

	public class PlayClock
	{

		[System.Runtime.Serialization.DataMember(Name = "minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayStat
	{

		[System.Runtime.Serialization.DataMember(Name = "athleteId")]
		public System.Nullable<System.Int32> AthleteId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "athleteName")]
		public string AthleteName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "clock")]
		public PlayStatClock Clock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "distance")]
		public System.Nullable<System.Int32> Distance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "down")]
		public System.Nullable<System.Int32> Down { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "driveId")]
		public System.Nullable<System.Int32> DriveId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gameId")]
		public System.Nullable<System.Int32> GameId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "opponent")]
		public string Opponent { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "opponentScore")]
		public System.Nullable<System.Int32> OpponentScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "period")]
		public System.Nullable<System.Int32> Period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playId")]
		public System.Nullable<System.Int32> PlayId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stat")]
		public System.Nullable<System.Int32> Stat { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "statType")]
		public string StatType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teamScore")]
		public System.Nullable<System.Int32> TeamScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardsToGoal")]
		public System.Nullable<System.Int32> YardsToGoal { get; set; }
	}

	public class PlayStatClock
	{

		[System.Runtime.Serialization.DataMember(Name = "minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayStatType
	{

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayType
	{

		[System.Runtime.Serialization.DataMember(Name = "abbreviation")]
		public string Abbreviation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "text")]
		public string Text { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayWP
	{

		[System.Runtime.Serialization.DataMember(Name = "away")]
		public string Away { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayId")]
		public System.Nullable<System.Int32> AwayId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayScore")]
		public System.Nullable<System.Int32> AwayScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "distance")]
		public System.Nullable<System.Int32> Distance { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "down")]
		public System.Nullable<System.Int32> Down { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gamesId")]
		public System.Nullable<System.Int32> GamesId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home")]
		public string Home { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeBall")]
		public System.Nullable<System.Boolean> HomeBall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeId")]
		public System.Nullable<System.Int32> HomeId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeScore")]
		public System.Nullable<System.Int32> HomeScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeWinProb")]
		public System.Nullable<System.Double> HomeWinProb { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playId")]
		public System.Nullable<System.Int32> PlayId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playNumber")]
		public System.Nullable<System.Int32> PlayNumber { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playText")]
		public string PlayText { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "spread")]
		public System.Nullable<System.Double> Spread { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "timeRemaining")]
		public System.Nullable<System.Int32> TimeRemaining { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardLine")]
		public System.Nullable<System.Int32> YardLine { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Player
	{

		[System.Runtime.Serialization.DataMember(Name = "first_name")]
		public string First_name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "height")]
		public System.Nullable<System.Int32> Height { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_city")]
		public string Home_city { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_country")]
		public string Home_country { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_county_fips")]
		public string Home_county_fips { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_latitude")]
		public System.Nullable<System.Double> Home_latitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_longitude")]
		public System.Nullable<System.Double> Home_longitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "home_state")]
		public string Home_state { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "jersey")]
		public System.Nullable<System.Int32> Jersey { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "last_name")]
		public string Last_name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "recruit_ids")]
		public int[] Recruit_ids { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weight")]
		public System.Nullable<System.Int32> Weight { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerGame
	{

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teams")]
		public PlayerGameTeams[] PlayerGameTeams { get; set; }
	}

	public class PlayerGameTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "categories")]
		public PlayerGameTeamsCategories[] PlayerGameTeamsCategories { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeAway")]
		public System.Nullable<System.Boolean> HomeAway { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public PlayerGameSchool School { get; set; }
	}

	public class PlayerGameTeamsCategories
	{

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "types")]
		public PlayerGameTeamsCategoriesTypes[] PlayerGameTeamsCategoriesTypes { get; set; }
	}

	public class PlayerGameTeamsCategoriesTypes
	{

		[System.Runtime.Serialization.DataMember(Name = "athletes")]
		public PlayerGameTeamsCategoriesTypesAthletes[] PlayerGameTeamsCategoriesTypesAthletes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	public class PlayerGameTeamsCategoriesTypesAthletes
	{

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stat")]
		public string Stat { get; set; }
	}

	public class PlayerGameSchool
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerGamePPA
	{

		[System.Runtime.Serialization.DataMember(Name = "averagePPA")]
		public PlayerGamePPAAveragePPA AveragePPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "opponent")]
		public string Opponent { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	public class PlayerGamePPAAveragePPA
	{

		[System.Runtime.Serialization.DataMember(Name = "all")]
		public System.Nullable<System.Double> All { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pass")]
		public System.Nullable<System.Double> Pass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rush")]
		public System.Nullable<System.Double> Rush { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerSearchResult
	{

		[System.Runtime.Serialization.DataMember(Name = "firstName")]
		public string FirstName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "height")]
		public System.Nullable<System.Int32> Height { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "hometown")]
		public string Hometown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "jersey")]
		public System.Nullable<System.Int32> Jersey { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lastName")]
		public string LastName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teamColor")]
		public string TeamColor { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teamColorSecondary")]
		public string TeamColorSecondary { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerSeasonPPA
	{

		[System.Runtime.Serialization.DataMember(Name = "averagePPA")]
		public PlayerSeasonPPAAveragePPA AveragePPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public PlayerSeasonPPATotalPPA TotalPPA { get; set; }
	}

	public class PlayerSeasonPPAAveragePPA
	{

		[System.Runtime.Serialization.DataMember(Name = "all")]
		public System.Nullable<System.Double> All { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pass")]
		public System.Nullable<System.Double> Pass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rush")]
		public System.Nullable<System.Double> Rush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	public class PlayerSeasonPPATotalPPA
	{

		[System.Runtime.Serialization.DataMember(Name = "all")]
		public System.Nullable<System.Double> All { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pass")]
		public System.Nullable<System.Double> Pass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rush")]
		public System.Nullable<System.Double> Rush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerSeasonStat
	{

		[System.Runtime.Serialization.DataMember(Name = "category")]
		public string Category { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "player")]
		public string Player { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "playerId")]
		public System.Nullable<System.Int32> PlayerId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stat")]
		public System.Nullable<System.Double> Stat { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "statType")]
		public string StatType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PlayerUsage
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "usage")]
		public PlayerUsageUsage Usage { get; set; }
	}

	public class PlayerUsageUsage
	{

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Double> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pass")]
		public System.Nullable<System.Double> Pass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rush")]
		public System.Nullable<System.Double> Rush { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PortalPlayer
	{

		[System.Runtime.Serialization.DataMember(Name = "destination")]
		public string Destination { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "eligibility")]
		public string Eligibility { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstName")]
		public string FirstName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lastName")]
		public string LastName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "origin")]
		public string Origin { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stars")]
		public System.Nullable<System.Int32> Stars { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "transferDate")]
		public string TransferDate { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PositionGroupRecruitingRating
	{

		[System.Runtime.Serialization.DataMember(Name = "averageRating")]
		public System.Nullable<System.Double> AverageRating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "averageStars")]
		public System.Nullable<System.Double> AverageStars { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "commits")]
		public System.Nullable<System.Double> Commits { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "positionGroup")]
		public string PositionGroup { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalRating")]
		public System.Nullable<System.Double> TotalRating { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PredictedPoints
	{

		[System.Runtime.Serialization.DataMember(Name = "predictedPoints")]
		public System.Nullable<System.Double> PredictedPoints1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "yardLine")]
		public System.Nullable<System.Int32> YardLine { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class PregameWP
	{

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public string AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "gameId")]
		public System.Nullable<System.Int32> GameId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public string HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeWinProb")]
		public System.Nullable<System.Double> HomeWinProb { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "spread")]
		public System.Nullable<System.Double> Spread { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class RankingWeek
	{

		[System.Runtime.Serialization.DataMember(Name = "polls")]
		public RankingWeekPolls[] RankingWeekPolls { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}

	public class RankingWeekPolls
	{

		[System.Runtime.Serialization.DataMember(Name = "poll")]
		public string Poll { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranks")]
		public RankingWeekPollsRanks[] RankingWeekPollsRanks { get; set; }
	}

	public class RankingWeekPollsRanks
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstPlaceVotes")]
		public System.Nullable<System.Int32> FirstPlaceVotes { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rank")]
		public System.Nullable<System.Int32> Rank { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Recruit
	{

		[System.Runtime.Serialization.DataMember(Name = "athleteId")]
		public System.Nullable<System.Int32> AthleteId { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "city")]
		public string City { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "committedTo")]
		public string CommittedTo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "country")]
		public string Country { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "height")]
		public System.Nullable<System.Double> Height { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "hometownInfo")]
		public RecruitHometownInfo HometownInfo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "position")]
		public string Position { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranking")]
		public System.Nullable<System.Int32> Ranking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "recruitType")]
		public string RecruitType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stars")]
		public System.Nullable<System.Int32> Stars { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stateProvince")]
		public string StateProvince { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weight")]
		public System.Nullable<System.Int32> Weight { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	public class RecruitHometownInfo
	{

		[System.Runtime.Serialization.DataMember(Name = "countyFips")]
		public string CountyFips { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class ReturningProduction
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingUsage")]
		public System.Nullable<System.Double> PassingUsage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "percentPPA")]
		public System.Nullable<System.Double> PercentPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "percentPassingPPA")]
		public System.Nullable<System.Double> PercentPassingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "percentReceivingPPA")]
		public System.Nullable<System.Double> PercentReceivingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "percentRushingPPA")]
		public System.Nullable<System.Double> PercentRushingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "receivingUsage")]
		public System.Nullable<System.Double> ReceivingUsage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushingUsage")]
		public System.Nullable<System.Double> RushingUsage { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPPA")]
		public System.Nullable<System.Double> TotalPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalPassingPPA")]
		public System.Nullable<System.Double> TotalPassingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalReceivingPPA")]
		public System.Nullable<System.Double> TotalReceivingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "totalRushingPPA")]
		public System.Nullable<System.Double> TotalRushingPPA { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "usage")]
		public System.Nullable<System.Double> Usage { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class ScoreboardGame
	{

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public ScoreboardGameAwayTeam AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "betting")]
		public ScoreboardGameBetting Betting { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "clock")]
		public string Clock { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conferenceGame")]
		public System.Nullable<System.Boolean> ConferenceGame { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public ScoreboardGameHomeTeam HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "neutralSite")]
		public System.Nullable<System.Boolean> NeutralSite { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "period")]
		public System.Nullable<System.Int32> Period { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "possession")]
		public string Possession { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "situation")]
		public string Situation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startDate")]
		public string StartDate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startTimeTBD")]
		public System.Nullable<System.Boolean> StartTimeTBD { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "status")]
		public string Status { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "tv")]
		public string Tv { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue")]
		public ScoreboardGameVenue Venue { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "weather")]
		public ScoreboardGameWeather Weather { get; set; }
	}

	public class ScoreboardGameAwayTeam
	{

		[System.Runtime.Serialization.DataMember(Name = "classification")]
		public string Classification { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }
	}

	public class ScoreboardGameBetting
	{

		[System.Runtime.Serialization.DataMember(Name = "awayMoneyline")]
		public System.Nullable<System.Int32> AwayMoneyline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeMoneyline")]
		public System.Nullable<System.Int32> HomeMoneyline { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overUnder")]
		public System.Nullable<System.Double> OverUnder { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "spread")]
		public System.Nullable<System.Double> Spread { get; set; }
	}

	public class ScoreboardGameHomeTeam
	{

		[System.Runtime.Serialization.DataMember(Name = "classification")]
		public string Classification { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }
	}

	public class ScoreboardGameVenue
	{

		[System.Runtime.Serialization.DataMember(Name = "city")]
		public string City { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "state")]
		public string State { get; set; }
	}

	public class ScoreboardGameWeather
	{

		[System.Runtime.Serialization.DataMember(Name = "description")]
		public string Description { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "windDirection")]
		public System.Nullable<System.Double> WindDirection { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "windSpeed")]
		public System.Nullable<System.Double> WindSpeed { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Team
	{

		[System.Runtime.Serialization.DataMember(Name = "abbreviation")]
		public string Abbreviation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "alt_color")]
		public string Alt_color { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "alt_name_1")]
		public string Alt_name_1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "alt_name_2")]
		public string Alt_name_2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "alt_name_3")]
		public string Alt_name_3 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "classification")]
		public string Classification { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "color")]
		public string Color { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "division")]
		public string Division { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "location")]
		public TeamLocation Location { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "logos")]
		public string[] Logos { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "mascot")]
		public string Mascot { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "twitter")]
		public string Twitter { get; set; }
	}

	public class TeamLocation
	{

		[System.Runtime.Serialization.DataMember(Name = "capacity")]
		public System.Nullable<System.Double> Capacity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "city")]
		public string City { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "country_code")]
		public string Country_code { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "dome")]
		public System.Nullable<System.Boolean> Dome { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "elevation")]
		public System.Nullable<System.Double> Elevation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "grass")]
		public System.Nullable<System.Boolean> Grass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "state")]
		public string State { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "timezone")]
		public string Timezone { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue_id")]
		public System.Nullable<System.Int32> Venue_id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year_constructed")]
		public System.Nullable<System.Double> Year_constructed { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "zip")]
		public string Zip { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamEloRating
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "elo")]
		public System.Nullable<System.Double> Elo { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamGame
	{

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "teams")]
		public TeamGameTeams[] TeamGameTeams { get; set; }
	}

	public class TeamGameTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeAway")]
		public string HomeAway { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Int32> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stats")]
		public TeamGameTeamsStats[] TeamGameTeamsStats { get; set; }
	}

	public class TeamGameTeamsStats
	{

		[System.Runtime.Serialization.DataMember(Name = "category")]
		public string Category { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "stat")]
		public string Stat { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamMatchup
	{

		[System.Runtime.Serialization.DataMember(Name = "endYear")]
		public System.Nullable<System.Int32> EndYear { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public TeamMatchupGames[] TeamMatchupGames { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "startYear")]
		public System.Nullable<System.Int32> StartYear { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team1")]
		public string Team1 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team1Wins")]
		public System.Nullable<System.Int32> Team1Wins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team2")]
		public string Team2 { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team2Wins")]
		public System.Nullable<System.Int32> Team2Wins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }
	}

	public class TeamMatchupGames
	{

		[System.Runtime.Serialization.DataMember(Name = "awayScore")]
		public System.Nullable<System.Int32> AwayScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "awayTeam")]
		public string AwayTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "date")]
		public string Date { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeScore")]
		public System.Nullable<System.Int32> HomeScore { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeTeam")]
		public string HomeTeam { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "neutralSite")]
		public System.Nullable<System.Boolean> NeutralSite { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season_type")]
		public string Season_type { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "venue")]
		public string Venue { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "winner")]
		public string Winner { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamPPA
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public TeamPPADefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public TeamPPAOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	public class TeamPPADefense
	{

		[System.Runtime.Serialization.DataMember(Name = "cumulative")]
		public TeamPPADefenseCumulative Cumulative { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Double> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	public class TeamPPADefenseCumulative
	{

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class TeamPPAOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "cumulative")]
		public TeamPPAOffenseCumulative Cumulative { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "firstDown")]
		public System.Nullable<System.Double> FirstDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "overall")]
		public System.Nullable<System.Double> Overall { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondDown")]
		public System.Nullable<System.Double> SecondDown { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "thirdDown")]
		public System.Nullable<System.Double> ThirdDown { get; set; }
	}

	public class TeamPPAOffenseCumulative
	{

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamRecord
	{

		[System.Runtime.Serialization.DataMember(Name = "awayGames")]
		public TeamRecordAwayGames AwayGames { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "conferenceGames")]
		public TeamRecordConferenceGames ConferenceGames { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "division")]
		public string Division { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "expectedWins")]
		public System.Nullable<System.Double> ExpectedWins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "homeGames")]
		public TeamRecordHomeGames HomeGames { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public TeamRecordTotal Total { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	public class TeamRecordAwayGames
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }
	}

	public class TeamRecordConferenceGames
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }
	}

	public class TeamRecordHomeGames
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }
	}

	public class TeamRecordTotal
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamRecruitingRank
	{

		[System.Runtime.Serialization.DataMember(Name = "points")]
		public System.Nullable<System.Double> Points { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rank")]
		public System.Nullable<System.Int32> Rank { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamSPRating
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "defense")]
		public TeamSPRatingDefense Defense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "offense")]
		public TeamSPRatingOffense Offense { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranking")]
		public System.Nullable<System.Double> Ranking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "secondOrderWins")]
		public System.Nullable<System.Double> SecondOrderWins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "sos")]
		public System.Nullable<System.Double> Sos { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "specialTeams")]
		public TeamSPRatingSpecialTeams SpecialTeams { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	public class TeamSPRatingDefense
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "havoc")]
		public TeamSPRatingDefenseHavoc Havoc { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pasing")]
		public System.Nullable<System.Double> Pasing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranking")]
		public System.Nullable<System.Double> Ranking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Double> Success { get; set; }
	}

	public class TeamSPRatingDefenseHavoc
	{

		[System.Runtime.Serialization.DataMember(Name = "db")]
		public System.Nullable<System.Double> Db { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "frontSeven")]
		public System.Nullable<System.Double> FrontSeven { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "total")]
		public System.Nullable<System.Double> Total { get; set; }
	}

	public class TeamSPRatingOffense
	{

		[System.Runtime.Serialization.DataMember(Name = "explosiveness")]
		public System.Nullable<System.Double> Explosiveness { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "pace")]
		public System.Nullable<System.Double> Pace { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passing")]
		public System.Nullable<System.Double> Passing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "passingDowns")]
		public System.Nullable<System.Double> PassingDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranking")]
		public System.Nullable<System.Double> Ranking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "runRate")]
		public System.Nullable<System.Double> RunRate { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rushing")]
		public System.Nullable<System.Double> Rushing { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "standardDowns")]
		public System.Nullable<System.Double> StandardDowns { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Double> Success { get; set; }
	}

	public class TeamSPRatingSpecialTeams
	{

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamSRSRating
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "division")]
		public string Division { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ranking")]
		public System.Nullable<System.Double> Ranking { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "rating")]
		public System.Nullable<System.Double> Rating { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamSeason
	{

		[System.Runtime.Serialization.DataMember(Name = "games")]
		public System.Nullable<System.Int32> Games { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "losses")]
		public System.Nullable<System.Int32> Losses { get; set; }

		/// <summary>
		/// Final ranking in the AP poll
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "postseason_rank")]
		public System.Nullable<System.Int32> Postseason_rank { get; set; }

		/// <summary>
		/// Rank in the AP preseason poll
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "preseason_rank")]
		public System.Nullable<System.Int32> Preseason_rank { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		/// <summary>
		/// Final SP+ defensive rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_defense")]
		public System.Nullable<System.Double> Sp_defense { get; set; }

		/// <summary>
		/// Final SP+ offensive rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_offense")]
		public System.Nullable<System.Double> Sp_offense { get; set; }

		/// <summary>
		/// Final overall SP+ rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "sp_overall")]
		public System.Nullable<System.Double> Sp_overall { get; set; }

		/// <summary>
		/// Final SRS rankings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "srs")]
		public System.Nullable<System.Double> Srs { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "ties")]
		public System.Nullable<System.Int32> Ties { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "wins")]
		public System.Nullable<System.Int32> Wins { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public string Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamSeasonStat
	{

		[System.Runtime.Serialization.DataMember(Name = "conference")]
		public string Conference { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "statName")]
		public string StatName { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "statValue")]
		public System.Nullable<System.Int32> StatValue { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "team")]
		public string Team { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class TeamTalent
	{

		[System.Runtime.Serialization.DataMember(Name = "school")]
		public string School { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "talent")]
		public System.Nullable<System.Double> Talent { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Venue
	{

		[System.Runtime.Serialization.DataMember(Name = "capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "city")]
		public string City { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "country_code")]
		public string Country_code { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "dome")]
		public System.Nullable<System.Boolean> Dome { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "elevation")]
		public System.Nullable<System.Double> Elevation { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "grass")]
		public System.Nullable<System.Boolean> Grass { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "id")]
		public System.Nullable<System.Int32> Id { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "location")]
		public VenueLocation Location { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "state")]
		public string State { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "timezone")]
		public string Timezone { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "year_constructed")]
		public System.Nullable<System.Int32> Year_constructed { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "zip")]
		public string Zip { get; set; }
	}

	public class VenueLocation
	{

		[System.Runtime.Serialization.DataMember(Name = "x")]
		public System.Nullable<System.Double> X { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "y")]
		public System.Nullable<System.Double> Y { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Week
	{

		[System.Runtime.Serialization.DataMember(Name = "firstGameStart")]
		public string FirstGameStart { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "lastGameStart")]
		public string LastGameStart { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "season")]
		public System.Nullable<System.Int32> Season { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "seasonType")]
		public string SeasonType { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "week")]
		public System.Nullable<System.Int32> Week1 { get; set; }
	}

	public partial class Misc
	{

		private System.Net.Http.HttpClient httpClient;

		private JsonSerializerSettings jsonSerializerSettings;

		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings = null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}

		/// <summary>
		/// Season calendar
		/// Get calendar of weeks by season
		/// GetCalendar calendar
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <returns>successful operation</returns>
		public async Task<Week[]> GetCalendarAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar?year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Week[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Coaching records and history
		/// Coaching history
		/// GetCoaches coaches
		/// </summary>
		/// <param name="firstName">First name filter</param>
		/// <param name="lastName">Last name filter</param>
		/// <param name="team">Team name filter</param>
		/// <param name="year">Year filter</param>
		/// <param name="minYear">Minimum year filter (inclusive)</param>
		/// <param name="maxYear">Maximum year filter (inclusive)</param>
		/// <returns>successful operation</returns>
		public async Task<Coach[]> GetCoachesAsync(string firstName, string lastName, string team, int year, int minYear, int maxYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "coaches?firstName=" + (firstName == null ? "" : System.Uri.EscapeDataString(firstName)) + "&lastName=" + (lastName == null ? "" : System.Uri.EscapeDataString(lastName)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&year=" + year + "&minYear=" + minYear + "&maxYear=" + maxYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Coach[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Conferences
		/// Get conference list
		/// GetConferences conferences
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<Conference[]> GetConferencesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conferences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Conference[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// List of NFL Draft picks
		/// List of NFL Draft picks
		/// GetDraftPicks draft/picks
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="nflTeam">NFL team filter</param>
		/// <param name="college">Player college filter</param>
		/// <param name="conference">College confrence abbreviation filter</param>
		/// <param name="position">NFL position filter</param>
		/// <returns>successful operation</returns>
		public async Task<DraftPick[]> GetDraftPicksAsync(int year, string nflTeam, string college, string conference, string position, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "draft/picks?year=" + year + "&nflTeam=" + (nflTeam == null ? "" : System.Uri.EscapeDataString(nflTeam)) + "&college=" + (college == null ? "" : System.Uri.EscapeDataString(college)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<DraftPick[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// List of NFL positions
		/// List of NFL positions
		/// GetNFLPositions draft/positions
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DraftPosition[]> GetNFLPositionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "draft/positions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<DraftPosition[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// List of NFL teams
		/// List of NFL teams
		/// GetNFLTeams draft/teams
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<DraftTeam[]> GetNFLTeamsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "draft/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<DraftTeam[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Drive data and results
		/// Get game drives
		/// GetDrives drives
		/// </summary>
		/// <param name="seasonType">Season type filter</param>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="offense">Offensive team filter</param>
		/// <param name="defense">Defensive team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="offenseConference">Offensive conference filter</param>
		/// <param name="defenseConference">Defensive conference filter</param>
		/// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <returns>successful operation</returns>
		public async Task<Drive[]> GetDrivesAsync(string seasonType, int year, int week, string team, string offense, string defense, string conference, string offenseConference, string defenseConference, string classification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives?seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&offense=" + (offense == null ? "" : System.Uri.EscapeDataString(offense)) + "&defense=" + (defense == null ? "" : System.Uri.EscapeDataString(defense)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&offenseConference=" + (offenseConference == null ? "" : System.Uri.EscapeDataString(offenseConference)) + "&defenseConference=" + (defenseConference == null ? "" : System.Uri.EscapeDataString(defenseConference)) + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Drive[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Advanced box scores
		/// Get advanced box score data
		/// GetAdvancedBoxScore game/box/advanced
		/// </summary>
		/// <param name="gameId">Game id parameters</param>
		/// <returns>successful operation</returns>
		public async Task<BoxScore> GetAdvancedBoxScoreAsync(int gameId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "game/box/advanced?gameId=" + gameId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<BoxScore>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Games and results
		/// Get game results
		/// GetGames games
		/// </summary>
		/// <param name="year">Year/season filter for games</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <param name="team">Team</param>
		/// <param name="home">Home team filter</param>
		/// <param name="away">Away team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="division">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <param name="id">id filter for querying a single game</param>
		/// <returns>successful operation</returns>
		public async Task<Game[]> GetGamesAsync(int year, int week, string seasonType, string team, string home, string away, string conference, string division, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games?year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&home=" + (home == null ? "" : System.Uri.EscapeDataString(home)) + "&away=" + (away == null ? "" : System.Uri.EscapeDataString(away)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&division=" + (division == null ? "" : System.Uri.EscapeDataString(division)) + "&id=" + id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Game[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Game media information and schedules
		/// Game media information (TV, radio, etc)
		/// GetGameMedia games/media
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile)</param>
		/// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <returns>successful operation</returns>
		public async Task<GameMedia[]> GetGameMediaAsync(int year, int week, string seasonType, string team, string conference, string mediaType, string classification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/media?year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&mediaType=" + (mediaType == null ? "" : System.Uri.EscapeDataString(mediaType)) + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<GameMedia[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player game stats
		/// Player stats broken down by game
		/// GetPlayerGameStats games/players
		/// </summary>
		/// <param name="year">Year/season filter for games</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="category">Category filter (e.g defensive)</param>
		/// <param name="gameId">Game id filter</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerGame[]> GetPlayerGameStatsAsync(int year, int week, string seasonType, string team, string conference, string category, int gameId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/players?year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&category=" + (category == null ? "" : System.Uri.EscapeDataString(category)) + "&gameId=" + gameId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerGame[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team game stats
		/// Team stats broken down by game
		/// GetTeamGameStats games/teams
		/// </summary>
		/// <param name="year">Year/season filter for games</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="gameId">Game id filter</param>
		/// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <returns>successful operation</returns>
		public async Task<TeamGame[]> GetTeamGameStatsAsync(int year, int week, string seasonType, string team, string conference, int gameId, string classification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/teams?year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&gameId=" + gameId + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamGame[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Game weather information (Patreon only)
		/// Weather information for the hour of kickoff
		/// GetGameWeather games/weather
		/// </summary>
		/// <param name="gameId">Game id filter (required if no year)</param>
		/// <param name="year">Year filter (required if no game id)</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <returns>successful operation</returns>
		public async Task<GameWeather[]> GetGameWeatherAsync(int gameId, int year, int week, string seasonType, string team, string conference, string classification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/weather?gameId=" + gameId + "&year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<GameWeather[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Betting lines
		/// Closing betting lines
		/// GetLines lines
		/// </summary>
		/// <param name="gameId">Game id filter</param>
		/// <param name="year">Year/season filter for games</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <param name="team">Team</param>
		/// <param name="home">Home team filter</param>
		/// <param name="away">Away team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <returns>successful operation</returns>
		public async Task<GameLines[]> GetLinesAsync(int gameId, int year, int week, string seasonType, string team, string home, string away, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lines?gameId=" + gameId + "&year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&home=" + (home == null ? "" : System.Uri.EscapeDataString(home)) + "&away=" + (away == null ? "" : System.Uri.EscapeDataString(away)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<GameLines[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Live metrics and PBP (Patreon only)
		/// Get live metrics and PBP
		/// GetLivePlays live/plays
		/// </summary>
		/// <param name="id">Game id</param>
		/// <returns>successful operation</returns>
		public async Task<LivePlayByPlay> GetLivePlaysAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live/plays?id=" + id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<LivePlayByPlay>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Win probability chart data
		/// Win probability data
		/// GetWinProbabilityData metrics/wp
		/// </summary>
		/// <param name="gameId">Game id filter</param>
		/// <returns>successful operation</returns>
		public async Task<PlayWP[]> GetWinProbabilityDataAsync(int gameId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/wp?gameId=" + gameId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayWP[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Pregame win probability data
		/// Pregame win probabilities
		/// GetPregameWinProbabilities metrics/wp/pregame
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="seasonType">regular or postseason</param>
		/// <returns>successful operation</returns>
		public async Task<PregameWP[]> GetPregameWinProbabilitiesAsync(int year, int week, string team, string seasonType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics/wp/pregame?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PregameWP[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Types of player play stats
		/// Type of play stats
		/// GetPlayStatTypes play/stat/types
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PlayStatType[]> GetPlayStatTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "play/stat/types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayStatType[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Play stats by play
		/// Gets player stats associated by play (limit 1000)
		/// GetPlayStats play/stats
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="gameId">gameId filter (from /games endpoint)</param>
		/// <param name="athleteId">athleteId filter (from /roster endpoint)</param>
		/// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint)</param>
		/// <param name="seasonType">regular, postseason, or both</param>
		/// <param name="conference">conference abbreviation filter</param>
		/// <returns>successful operation</returns>
		public async Task<PlayStat[]> GetPlayStatsAsync(int year, int week, string team, int gameId, int athleteId, int statTypeId, string seasonType, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "play/stats?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&gameId=" + gameId + "&athleteId=" + athleteId + "&statTypeId=" + statTypeId + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayStat[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Play types
		/// Types of plays
		/// GetPlayTypes play/types
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PlayType[]> GetPlayTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "play/types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayType[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Transfer portal by season
		/// Transfer portal by season
		/// GetTransferPortal player/portal
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <returns>successful operation</returns>
		public async Task<PortalPlayer[]> GetTransferPortalAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "player/portal?year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PortalPlayer[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team returning production metrics
		/// Returning production metrics
		/// GetReturningProduction player/returning
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <returns>successful operation</returns>
		public async Task<ReturningProduction[]> GetReturningProductionAsync(int year, string team, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "player/returning?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<ReturningProduction[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Search for player information
		/// Search for players
		/// PlayerSearch player/search
		/// </summary>
		/// <param name="searchTerm">Term to search on</param>
		/// <param name="position">Position abbreviation filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="year">Year filter</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerSearchResult[]> PlayerSearchAsync(string searchTerm, string position, string team, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "player/search?searchTerm=" + (searchTerm == null ? "" : System.Uri.EscapeDataString(searchTerm)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerSearchResult[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player usage metrics broken down by season
		/// Player usage metrics by season
		/// GetPlayerUsage player/usage
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="position">Position abbreviation filter</param>
		/// <param name="playerId">Player id filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerUsage[]> GetPlayerUsageAsync(int year, string team, string conference, string position, int playerId, bool excludeGarbageTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "player/usage?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position)) + "&playerId=" + playerId + "&excludeGarbageTime=" + excludeGarbageTime;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerUsage[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Play by play data
		/// Get play data and results
		/// GetPlays plays
		/// </summary>
		/// <param name="seasonType">Season type filter</param>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
		/// <param name="team">Team filter</param>
		/// <param name="offense">Offensive team filter</param>
		/// <param name="defense">Defensive team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="offenseConference">Offensive conference filter</param>
		/// <param name="defenseConference">Defensive conference filter</param>
		/// <param name="playType">Play type filter</param>
		/// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
		/// <returns>successful operation</returns>
		public async Task<Play[]> GetPlaysAsync(string seasonType, int year, int week, string team, string offense, string defense, string conference, string offenseConference, string defenseConference, int playType, string classification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "plays?seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&offense=" + (offense == null ? "" : System.Uri.EscapeDataString(offense)) + "&defense=" + (defense == null ? "" : System.Uri.EscapeDataString(defense)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&offenseConference=" + (offenseConference == null ? "" : System.Uri.EscapeDataString(offenseConference)) + "&defenseConference=" + (defenseConference == null ? "" : System.Uri.EscapeDataString(defenseConference)) + "&playType=" + playType + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Play[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team Predicated Points Added (PPA/EPA) by game
		/// Predicted Points Added (PPA) by game
		/// GetGamePPA ppa/games
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <returns>successful operation</returns>
		public async Task<GamePPA[]> GetGamePPAAsync(int year, int week, string team, string conference, bool excludeGarbageTime, string seasonType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ppa/games?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&excludeGarbageTime=" + excludeGarbageTime + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<GamePPA[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player Predicated Points Added (PPA/EPA) broken down by game
		/// Predicted Points Added (PPA) by player game
		/// GetPlayerGamePPA ppa/players/games
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="position">Position abbreviation filter</param>
		/// <param name="playerId">Player id filter</param>
		/// <param name="threshold">Minimum play threshold filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerGamePPA[]> GetPlayerGamePPAAsync(int year, int week, string team, string position, int playerId, string threshold, bool excludeGarbageTime, string seasonType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ppa/players/games?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position)) + "&playerId=" + playerId + "&threshold=" + (threshold == null ? "" : System.Uri.EscapeDataString(threshold)) + "&excludeGarbageTime=" + excludeGarbageTime + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerGamePPA[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player Predicated Points Added (PPA/EPA) broken down by season
		/// Predicted Points Added (PPA) by player season
		/// GetPlayerSeasonPPA ppa/players/season
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="position">Position abbreviation filter</param>
		/// <param name="playerId">Player id filter</param>
		/// <param name="threshold">Minimum play threshold filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerSeasonPPA[]> GetPlayerSeasonPPAAsync(int year, string team, string conference, string position, int playerId, string threshold, bool excludeGarbageTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ppa/players/season?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position)) + "&playerId=" + playerId + "&threshold=" + (threshold == null ? "" : System.Uri.EscapeDataString(threshold)) + "&excludeGarbageTime=" + excludeGarbageTime;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerSeasonPPA[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Predicted Points (i.e. Expected Points or EP)
		/// Predicted Points
		/// GetPredictedPoints ppa/predicted
		/// </summary>
		/// <param name="down">Down filter</param>
		/// <param name="distance">Distance filter</param>
		/// <returns>successful operation</returns>
		public async Task<PredictedPoints[]> GetPredictedPointsAsync(int down, int distance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ppa/predicted?down=" + down + "&distance=" + distance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PredictedPoints[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Predicted Points Added (PPA/EPA) data by team
		/// Predicted Points Added (PPA)
		/// GetTeamPPA ppa/teams
		/// </summary>
		/// <param name="year">Year filter (required if team not specified)</param>
		/// <param name="team">Team filter (required if year not specified)</param>
		/// <param name="conference">Conference filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <returns>successful operation</returns>
		public async Task<TeamPPA[]> GetTeamPPAAsync(int year, string team, string conference, bool excludeGarbageTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ppa/teams?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&excludeGarbageTime=" + excludeGarbageTime;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamPPA[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Historical polls and rankings
		/// Poll rankings
		/// GetRankings rankings
		/// </summary>
		/// <param name="year">Year/season filter for games</param>
		/// <param name="week">Week filter</param>
		/// <param name="seasonType">Season type filter (regular or postseason)</param>
		/// <returns>successful operation</returns>
		public async Task<RankingWeek[]> GetRankingsAsync(int year, int week, string seasonType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rankings?year=" + year + "&week=" + week + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<RankingWeek[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Historical Elo ratings
		/// Elo rating data
		/// GetEloRatings ratings/elo
		/// </summary>
		/// <param name="year">Season filter</param>
		/// <param name="week">Maximum week filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamEloRating[]> GetEloRatingsAsync(int year, int week, string team, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ratings/elo?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamEloRating[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Historical SP+ ratings
		/// SP+ rating data
		/// GetSPRatings ratings/sp
		/// </summary>
		/// <param name="year">Season filter (required if team not specified)</param>
		/// <param name="team">Team filter (required if year not specified)</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSPRating[]> GetSPRatingsAsync(int year, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ratings/sp?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamSPRating[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Historical SP+ ratings by conference
		/// Get average SP+ historical rating data by conference
		/// GetConferenceSPRatings ratings/sp/conferences
		/// </summary>
		/// <param name="year">Season filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <returns>successful operation</returns>
		public async Task<ConferenceSPRating[]> GetConferenceSPRatingsAsync(int year, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ratings/sp/conferences?year=" + year + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<ConferenceSPRating[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Historical SRS ratings
		/// SRS rating data (requires either a year or team specified)
		/// GetSRSRatings ratings/srs
		/// </summary>
		/// <param name="year">Season filter (required if team not specified)</param>
		/// <param name="team">Team filter (required if year not specified)</param>
		/// <param name="conference">Conference filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSRSRating[]> GetSRSRatingsAsync(int year, string team, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ratings/srs?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamSRSRating[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team records
		/// Get team records by year
		/// GetTeamRecords records
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamRecord[]> GetTeamRecordsAsync(int year, string team, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "records?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamRecord[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Recruit position group ratings
		/// Gets a list of aggregated statistics by team and position grouping
		/// GetRecruitingGroups recruiting/groups
		/// </summary>
		/// <param name="startYear">Starting year</param>
		/// <param name="endYear">Ending year</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">conference filter</param>
		/// <returns>successful operation</returns>
		public async Task<PositionGroupRecruitingRating[]> GetRecruitingGroupsAsync(int startYear, int endYear, string team, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recruiting/groups?startYear=" + startYear + "&endYear=" + endYear + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PositionGroupRecruitingRating[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player recruiting ratings and rankings
		/// Get player recruiting rankings and data. Requires either a year or team to be specified.
		/// GetRecruitingPlayers recruiting/players
		/// </summary>
		/// <param name="year">Recruiting class year (required if team no specified)</param>
		/// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool)</param>
		/// <param name="position">Position abbreviation filter</param>
		/// <param name="state">State or province abbreviation filter</param>
		/// <param name="team">Committed team filter (required if year not specified)</param>
		/// <returns>successful operation</returns>
		public async Task<Recruit[]> GetRecruitingPlayersAsync(int year, string classification, string position, string state, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recruiting/players?year=" + year + "&classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification)) + "&position=" + (position == null ? "" : System.Uri.EscapeDataString(position)) + "&state=" + (state == null ? "" : System.Uri.EscapeDataString(state)) + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Recruit[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team recruiting rankings and ratings
		/// Team recruiting rankings
		/// GetRecruitingTeams recruiting/teams
		/// </summary>
		/// <param name="year">Recruiting class year</param>
		/// <param name="team">Team filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamRecruitingRank[]> GetRecruitingTeamsAsync(int year, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recruiting/teams?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamRecruitingRank[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team rosters
		/// Roster data
		/// GetRoster roster
		/// </summary>
		/// <param name="team">Team name</param>
		/// <param name="year">Season year</param>
		/// <returns>successful operation</returns>
		public async Task<Player[]> GetRosterAsync(string team, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roster?team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Player[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Live game results (Patreon only)
		/// Get live game results
		/// GetScoreboard scoreboard
		/// </summary>
		/// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs.</param>
		/// <param name="conference">Conference abbreviation filter.</param>
		/// <returns>successful operation</returns>
		public async Task<ScoreboardGame[]> GetScoreboardAsync(string classification, string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scoreboard?classification=" + (classification == null ? "" : System.Uri.EscapeDataString(classification)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<ScoreboardGame[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team stat categories
		/// Stat category list
		/// GetStatCategories stats/categories
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> GetStatCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<string[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Advanced team metrics by game
		/// Advanced team game stats
		/// GetAdvancedTeamGameStats stats/game/advanced
		/// </summary>
		/// <param name="year">Year filter (required if no team specified)</param>
		/// <param name="week">Week filter</param>
		/// <param name="team">Team filter (required if no year specified)</param>
		/// <param name="opponent">Opponent filter</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
		/// <returns>successful operation</returns>
		public async Task<AdvancedGameStat[]> GetAdvancedTeamGameStatsAsync(int year, int week, string team, string opponent, bool excludeGarbageTime, string seasonType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/game/advanced?year=" + year + "&week=" + week + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&opponent=" + (opponent == null ? "" : System.Uri.EscapeDataString(opponent)) + "&excludeGarbageTime=" + excludeGarbageTime + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<AdvancedGameStat[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Player stats by season
		/// Season player stats
		/// GetPlayerSeasonStats stats/player/season
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <param name="team">Team filter</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="startWeek">Start week filter</param>
		/// <param name="endWeek">Start week filter</param>
		/// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
		/// <param name="category">Stat category filter (e.g. passing)</param>
		/// <returns>successful operation</returns>
		public async Task<PlayerSeasonStat[]> GetPlayerSeasonStatsAsync(int year, string team, string conference, int startWeek, int endWeek, string seasonType, string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/player/season?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&startWeek=" + startWeek + "&endWeek=" + endWeek + "&seasonType=" + (seasonType == null ? "" : System.Uri.EscapeDataString(seasonType)) + "&category=" + (category == null ? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<PlayerSeasonStat[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team statistics by season
		/// Team season stats
		/// GetTeamSeasonStats stats/season
		/// </summary>
		/// <param name="year">Year filter (required if no team specified)</param>
		/// <param name="team">Team filter (required if no year specified)</param>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <param name="startWeek">Starting week filter</param>
		/// <param name="endWeek">Starting week filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamSeasonStat[]> GetTeamSeasonStatsAsync(int year, string team, string conference, int startWeek, int endWeek, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/season?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference)) + "&startWeek=" + startWeek + "&endWeek=" + endWeek;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamSeasonStat[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Advanced team metrics by season
		/// Advanced team season stats
		/// GetAdvancedTeamSeasonStats stats/season/advanced
		/// </summary>
		/// <param name="year">Year filter (required if no team specified)</param>
		/// <param name="team">Team filter (required if no year specified)</param>
		/// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
		/// <param name="startWeek">Starting week filter</param>
		/// <param name="endWeek">Starting week filter</param>
		/// <returns>successful operation</returns>
		public async Task<AdvancedSeasonStat[]> GetAdvancedTeamSeasonStatsAsync(int year, string team, bool excludeGarbageTime, int startWeek, int endWeek, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/season/advanced?year=" + year + "&team=" + (team == null ? "" : System.Uri.EscapeDataString(team)) + "&excludeGarbageTime=" + excludeGarbageTime + "&startWeek=" + startWeek + "&endWeek=" + endWeek;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<AdvancedSeasonStat[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team talent composite rankings
		/// Team talent composite
		/// GetTalent talent
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <returns>successful operation</returns>
		public async Task<TeamTalent[]> GetTalentAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "talent?year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamTalent[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team information
		/// Get team information
		/// GetTeams teams
		/// </summary>
		/// <param name="conference">Conference abbreviation filter</param>
		/// <returns>successful operation</returns>
		public async Task<Team[]> GetTeamsAsync(string conference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams?conference=" + (conference == null ? "" : System.Uri.EscapeDataString(conference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Team[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// FBS team list
		/// Information on major division teams
		/// GetFbsTeams teams/fbs
		/// </summary>
		/// <param name="year">Year filter</param>
		/// <returns>successful operation</returns>
		public async Task<Team[]> GetFbsTeamsAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/fbs?year=" + year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Team[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Team matchup history
		/// Matchup history
		/// GetTeamMatchup teams/matchup
		/// </summary>
		/// <param name="team1">First team</param>
		/// <param name="team2">Second team</param>
		/// <param name="minYear">Minimum year</param>
		/// <param name="maxYear">Maximum year</param>
		/// <returns>successful operation</returns>
		public async Task<TeamMatchup> GetTeamMatchupAsync(string team1, string team2, int minYear, int maxYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/matchup?team1=" + (team1 == null ? "" : System.Uri.EscapeDataString(team1)) + "&team2=" + (team2 == null ? "" : System.Uri.EscapeDataString(team2)) + "&minYear=" + minYear + "&maxYear=" + maxYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<TeamMatchup>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Arena and venue information
		/// Venues
		/// GetVenues venues
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<Venue[]> GetVenuesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "venues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
					var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
					{
						var serializer = JsonSerializer.Create(jsonSerializerSettings);
						return serializer.Deserialize<Venue[]>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
