//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;


	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class DetectionsElement
	{

		/// <summary>
		/// Confidence value
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> Confidence { get; set; }

		/// <summary>
		/// Language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "language")]
		public string Language { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Error_response
	{

		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "error")]
		public string Error { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Error_slow_down
	{

		/// <summary>
		/// Reason for slow down
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "error")]
		public string Error { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Frontend_settings
	{

		/// <summary>
		/// Whether the API key database is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "apiKeys")]
		public System.Nullable<System.Boolean> ApiKeys { get; set; }

		/// <summary>
		/// Character input limit for this language (-1 indicates no limit)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "charLimit")]
		public System.Nullable<System.Int32> CharLimit { get; set; }

		/// <summary>
		/// Frontend translation timeout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "frontendTimeout")]
		public System.Nullable<System.Int32> FrontendTimeout { get; set; }

		/// <summary>
		/// Whether an API key is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "keyRequired")]
		public System.Nullable<System.Boolean> KeyRequired { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "language")]
		public Frontend_settingsLanguage Language { get; set; }

		/// <summary>
		/// Whether submitting suggestions is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "suggestions")]
		public System.Nullable<System.Boolean> Suggestions { get; set; }

		/// <summary>
		/// Supported files format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "supportedFilesFormat")]
		public string[] SupportedFilesFormat { get; set; }
	}

	public class Frontend_settingsLanguage
	{

		[System.Runtime.Serialization.DataMember(Name = "source")]
		public Frontend_settingsLanguageSource Source { get; set; }

		[System.Runtime.Serialization.DataMember(Name = "target")]
		public Frontend_settingsLanguageTarget Target { get; set; }
	}

	public class Frontend_settingsLanguageSource
	{

		/// <summary>
		/// Language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "code")]
		public string Code { get; set; }

		/// <summary>
		/// Human-readable language name (in English)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	public class Frontend_settingsLanguageTarget
	{

		/// <summary>
		/// Language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "code")]
		public string Code { get; set; }

		/// <summary>
		/// Human-readable language name (in English)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class LanguagesElement
	{

		/// <summary>
		/// Language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "code")]
		public string Code { get; set; }

		/// <summary>
		/// Human-readable language name (in English)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "name")]
		public string Name { get; set; }

		/// <summary>
		/// Supported target language codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "targets")]
		public string[] Targets { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Suggest_response
	{

		/// <summary>
		/// Whether submission was successful
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Translate
	{

		/// <summary>
		/// Translated text(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "translatedText")]
		public string TranslatedText { get; set; }
	}

	[System.Runtime.Serialization.DataContract(Namespace = "")]
	[System.SerializableAttribute()]
	public class Translate_file
	{

		/// <summary>
		/// Translated file url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name = "translatedFileUrl")]
		public string TranslatedFileUrl { get; set; }
	}

	public partial class Misc
	{

		private System.Net.Http.HttpClient httpClient;

		private JsonSerializerSettings jsonSerializerSettings;

		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings = null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}

		/// <summary>
		/// Detect the language of a single text
		/// TranslatePost detect
		/// </summary>
		/// <returns>Detections</returns>
		public async Task TranslatePostAsync(PostDetect requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
				using (var requestWriter = new System.IO.StringWriter())
				{
					var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
					requestSerializer.Serialize(requestWriter, requestBody);
					var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
					httpRequestMessage.Content = content;
					if (handleHeaders != null)
					{
						handleHeaders(httpRequestMessage.Headers);
					}

					var responseMessage = await httpClient.SendAsync(httpRequestMessage);
					try
					{
						responseMessage.EnsureSuccessStatusCodeEx();
					}
					finally
					{
						responseMessage.Dispose();
					}
				}
			}
		}

		/// <summary>
		/// Retrieve frontend specific settings
		/// FrontendGet frontend/settings
		/// </summary>
		/// <returns>frontend settings</returns>
		public async Task FrontendGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "frontend/settings";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Retrieve list of supported languages
		/// TranslateGet languages
		/// </summary>
		/// <returns>List of languages</returns>
		public async Task TranslateGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "languages";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
				if (handleHeaders != null)
				{
					handleHeaders(httpRequestMessage.Headers);
				}

				var responseMessage = await httpClient.SendAsync(httpRequestMessage);
				try
				{
					responseMessage.EnsureSuccessStatusCodeEx();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Translate text from a language to another
		/// TranslatePost translate
		/// </summary>
		/// <returns>Translated text</returns>
		public async Task TranslatePostAsync(PostDetect requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "translate";
			using (var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
				using (var requestWriter = new System.IO.StringWriter())
				{
					var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
					requestSerializer.Serialize(requestWriter, requestBody);
					var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
					httpRequestMessage.Content = content;
					if (handleHeaders != null)
					{
						handleHeaders(httpRequestMessage.Headers);
					}

					var responseMessage = await httpClient.SendAsync(httpRequestMessage);
					try
					{
						responseMessage.EnsureSuccessStatusCodeEx();
					}
					finally
					{
						responseMessage.Dispose();
					}
				}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
